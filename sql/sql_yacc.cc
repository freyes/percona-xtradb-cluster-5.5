/* A Bison parser, made by GNU Bison 2.5.  */

/* Bison implementation for Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2011 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.5"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 268 of yacc.c  */
#line 24 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"

/*
Note: YYTHD is passed as an argument to yyparse(), and subsequently to yylex().
*/
#define YYLIP (& YYTHD->m_parser_state->m_lip)
#define YYPS (& YYTHD->m_parser_state->m_yacc)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Alter_table*_statement
#include "sql_truncate.h"                      // Truncate_statement
#include "sql_admin.h"                         // Analyze/Check..._table_stmt
#include "sql_partition_admin.h"               // Alter_table_*_partition_stmt
#include "sql_signal.h"
#include "event_parse_data.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror(YYTHD, (char*) (A));            \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(THD *thd, const char *s)
{
  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label((char *)"", lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !test(i) ||
         sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!test(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (val && val->type() == Item::FIELD_ITEM &&
      ((Item_field*)val)->table_name)
  {
    my_error(ER_WRONG_TYPE_FOR_VAR, MYF(0), tmp->var->name.str);
    return TRUE;
  }

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable_t *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->dflt)
    it= spv->dflt;
  else
  {
    it= new (thd->mem_root) Item_null();
    if (it == NULL)
      return TRUE;
  }

  sp_set= new sp_instr_set(lex->sphead->instructions(), lex->spcont,
                           spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new Item_null();

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new sp_instr_set_trigger_field(lex->sphead->instructions(),
                                         lex->spcont, trg_fld, val, lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_NO_WRITE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}



/* Line 268 of yacc.c  */
#line 788 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ANALYZE_SYM = 269,
     AND_AND_SYM = 270,
     AND_SYM = 271,
     ANY_SYM = 272,
     AS = 273,
     ASC = 274,
     ASCII_SYM = 275,
     ASENSITIVE_SYM = 276,
     AT_SYM = 277,
     AUTHORS_SYM = 278,
     AUTOEXTEND_SIZE_SYM = 279,
     AUTO_INC = 280,
     AVG_ROW_LENGTH = 281,
     AVG_SYM = 282,
     BACKUP_SYM = 283,
     BEFORE_SYM = 284,
     BEGIN_SYM = 285,
     BETWEEN_SYM = 286,
     BIGINT = 287,
     BINARY = 288,
     BINLOG_SYM = 289,
     BIN_NUM = 290,
     BIT_AND = 291,
     BIT_OR = 292,
     BIT_SYM = 293,
     BIT_XOR = 294,
     BLOB_SYM = 295,
     BLOCK_SYM = 296,
     BOOLEAN_SYM = 297,
     BOOL_SYM = 298,
     BOTH = 299,
     BTREE_SYM = 300,
     BY = 301,
     BYTE_SYM = 302,
     CACHE_SYM = 303,
     CALL_SYM = 304,
     CASCADE = 305,
     CASCADED = 306,
     CASE_SYM = 307,
     CAST_SYM = 308,
     CATALOG_NAME_SYM = 309,
     CHAIN_SYM = 310,
     CHANGE = 311,
     CHANGED = 312,
     CHANGED_PAGE_BITMAPS_SYM = 313,
     CHARSET = 314,
     CHAR_SYM = 315,
     CHECKSUM_SYM = 316,
     CHECK_SYM = 317,
     CIPHER_SYM = 318,
     CLASS_ORIGIN_SYM = 319,
     CLIENT_SYM = 320,
     CLIENT_STATS_SYM = 321,
     CLOSE_SYM = 322,
     COALESCE = 323,
     CODE_SYM = 324,
     COLLATE_SYM = 325,
     COLLATION_SYM = 326,
     COLUMNS = 327,
     COLUMN_SYM = 328,
     COLUMN_NAME_SYM = 329,
     COMMENT_SYM = 330,
     COMMITTED_SYM = 331,
     COMMIT_SYM = 332,
     COMPACT_SYM = 333,
     COMPLETION_SYM = 334,
     COMPRESSED_SYM = 335,
     CONCURRENT = 336,
     CONDITION_SYM = 337,
     CONNECTION_SYM = 338,
     CONSISTENT_SYM = 339,
     CONSTRAINT = 340,
     CONSTRAINT_CATALOG_SYM = 341,
     CONSTRAINT_NAME_SYM = 342,
     CONSTRAINT_SCHEMA_SYM = 343,
     CONTAINS_SYM = 344,
     CONTEXT_SYM = 345,
     CONTINUE_SYM = 346,
     CONTRIBUTORS_SYM = 347,
     CONVERT_SYM = 348,
     COUNT_SYM = 349,
     CPU_SYM = 350,
     CREATE = 351,
     CROSS = 352,
     CUBE_SYM = 353,
     CURDATE = 354,
     CURRENT_USER = 355,
     CURSOR_SYM = 356,
     CURSOR_NAME_SYM = 357,
     CURTIME = 358,
     DATABASE = 359,
     DATABASES = 360,
     DATAFILE_SYM = 361,
     DATA_SYM = 362,
     DATETIME = 363,
     DATE_ADD_INTERVAL = 364,
     DATE_SUB_INTERVAL = 365,
     DATE_SYM = 366,
     DAY_HOUR_SYM = 367,
     DAY_MICROSECOND_SYM = 368,
     DAY_MINUTE_SYM = 369,
     DAY_SECOND_SYM = 370,
     DAY_SYM = 371,
     DEALLOCATE_SYM = 372,
     DECIMAL_NUM = 373,
     DECIMAL_SYM = 374,
     DECLARE_SYM = 375,
     DEFAULT = 376,
     DEFINER_SYM = 377,
     DELAYED_SYM = 378,
     DELAY_KEY_WRITE_SYM = 379,
     DELETE_SYM = 380,
     DESC = 381,
     DESCRIBE = 382,
     DES_KEY_FILE = 383,
     DETERMINISTIC_SYM = 384,
     DIRECTORY_SYM = 385,
     DISABLE_SYM = 386,
     DISCARD = 387,
     DISK_SYM = 388,
     DISTINCT = 389,
     DIV_SYM = 390,
     DOUBLE_SYM = 391,
     DO_SYM = 392,
     DROP = 393,
     DUAL_SYM = 394,
     DUMPFILE = 395,
     DUPLICATE_SYM = 396,
     DYNAMIC_SYM = 397,
     EACH_SYM = 398,
     ELSE = 399,
     ELSEIF_SYM = 400,
     ENABLE_SYM = 401,
     ENCLOSED = 402,
     END = 403,
     ENDS_SYM = 404,
     END_OF_INPUT = 405,
     ENGINES_SYM = 406,
     ENGINE_SYM = 407,
     ENUM = 408,
     EQ = 409,
     EQUAL_SYM = 410,
     ERROR_SYM = 411,
     ERRORS = 412,
     ESCAPED = 413,
     ESCAPE_SYM = 414,
     EVENTS_SYM = 415,
     EVENT_SYM = 416,
     EVERY_SYM = 417,
     EXECUTE_SYM = 418,
     EXISTS = 419,
     EXIT_SYM = 420,
     EXPANSION_SYM = 421,
     EXTENDED_SYM = 422,
     EXTENT_SIZE_SYM = 423,
     EXTRACT_SYM = 424,
     FALSE_SYM = 425,
     FAST_SYM = 426,
     FAULTS_SYM = 427,
     FETCH_SYM = 428,
     FILE_SYM = 429,
     FIRST_SYM = 430,
     FIXED_SYM = 431,
     FLOAT_NUM = 432,
     FLOAT_SYM = 433,
     FLUSH_SYM = 434,
     FORCE_SYM = 435,
     FOREIGN = 436,
     FOR_SYM = 437,
     FOUND_SYM = 438,
     FROM = 439,
     FULL = 440,
     FULLTEXT_SYM = 441,
     FUNCTION_SYM = 442,
     GE = 443,
     GENERAL = 444,
     GEOMETRYCOLLECTION = 445,
     GEOMETRY_SYM = 446,
     GET_FORMAT = 447,
     GLOBAL_SYM = 448,
     GRANT = 449,
     GRANTS = 450,
     GROUP_SYM = 451,
     GROUP_CONCAT_SYM = 452,
     GT_SYM = 453,
     HANDLER_SYM = 454,
     HASH_SYM = 455,
     HAVING = 456,
     HELP_SYM = 457,
     HEX_NUM = 458,
     HIGH_PRIORITY = 459,
     HOST_SYM = 460,
     HOSTS_SYM = 461,
     HOUR_MICROSECOND_SYM = 462,
     HOUR_MINUTE_SYM = 463,
     HOUR_SECOND_SYM = 464,
     HOUR_SYM = 465,
     IDENT = 466,
     IDENTIFIED_SYM = 467,
     IDENT_QUOTED = 468,
     IF = 469,
     IGNORE_SYM = 470,
     IGNORE_SERVER_IDS_SYM = 471,
     IMPORT = 472,
     INDEXES = 473,
     INDEX_SYM = 474,
     INDEX_STATS_SYM = 475,
     INFILE = 476,
     INITIAL_SIZE_SYM = 477,
     INNER_SYM = 478,
     INOUT_SYM = 479,
     INSENSITIVE_SYM = 480,
     INSERT = 481,
     INSERT_METHOD = 482,
     INSTALL_SYM = 483,
     INTERVAL_SYM = 484,
     INTO = 485,
     INT_SYM = 486,
     INVOKER_SYM = 487,
     IN_SYM = 488,
     IO_SYM = 489,
     IPC_SYM = 490,
     IS = 491,
     ISOLATION = 492,
     ISSUER_SYM = 493,
     ITERATE_SYM = 494,
     JOIN_SYM = 495,
     KEYS = 496,
     KEY_BLOCK_SIZE = 497,
     KEY_SYM = 498,
     KILL_SYM = 499,
     LANGUAGE_SYM = 500,
     LAST_SYM = 501,
     LE = 502,
     LEADING = 503,
     LEAVES = 504,
     LEAVE_SYM = 505,
     LEFT = 506,
     LESS_SYM = 507,
     LEVEL_SYM = 508,
     LEX_HOSTNAME = 509,
     LIKE = 510,
     LIMIT = 511,
     LINEAR_SYM = 512,
     LINES = 513,
     LINESTRING = 514,
     LIST_SYM = 515,
     LOAD = 516,
     LOCAL_SYM = 517,
     LOCATOR_SYM = 518,
     LOCKS_SYM = 519,
     LOCK_SYM = 520,
     LOGFILE_SYM = 521,
     LOGS_SYM = 522,
     LONGBLOB = 523,
     LONGTEXT = 524,
     LONG_NUM = 525,
     LONG_SYM = 526,
     LOOP_SYM = 527,
     LOW_PRIORITY = 528,
     LT = 529,
     MASTER_CONNECT_RETRY_SYM = 530,
     MASTER_HOST_SYM = 531,
     MASTER_LOG_FILE_SYM = 532,
     MASTER_LOG_POS_SYM = 533,
     MASTER_PASSWORD_SYM = 534,
     MASTER_PORT_SYM = 535,
     MASTER_SERVER_ID_SYM = 536,
     MASTER_SSL_CAPATH_SYM = 537,
     MASTER_SSL_CA_SYM = 538,
     MASTER_SSL_CERT_SYM = 539,
     MASTER_SSL_CIPHER_SYM = 540,
     MASTER_SSL_KEY_SYM = 541,
     MASTER_SSL_SYM = 542,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 543,
     MASTER_SYM = 544,
     MASTER_USER_SYM = 545,
     MASTER_HEARTBEAT_PERIOD_SYM = 546,
     MATCH = 547,
     MAX_CONNECTIONS_PER_HOUR = 548,
     MAX_QUERIES_PER_HOUR = 549,
     MAX_ROWS = 550,
     MAX_SIZE_SYM = 551,
     MAX_SYM = 552,
     MAX_UPDATES_PER_HOUR = 553,
     MAX_USER_CONNECTIONS_SYM = 554,
     MAX_VALUE_SYM = 555,
     MEDIUMBLOB = 556,
     MEDIUMINT = 557,
     MEDIUMTEXT = 558,
     MEDIUM_SYM = 559,
     MEMORY_SYM = 560,
     MERGE_SYM = 561,
     MESSAGE_TEXT_SYM = 562,
     MICROSECOND_SYM = 563,
     MIGRATE_SYM = 564,
     MINUTE_MICROSECOND_SYM = 565,
     MINUTE_SECOND_SYM = 566,
     MINUTE_SYM = 567,
     MIN_ROWS = 568,
     MIN_SYM = 569,
     MODE_SYM = 570,
     MODIFIES_SYM = 571,
     MODIFY_SYM = 572,
     MOD_SYM = 573,
     MONTH_SYM = 574,
     MULTILINESTRING = 575,
     MULTIPOINT = 576,
     MULTIPOLYGON = 577,
     MUTEX_SYM = 578,
     MYSQL_ERRNO_SYM = 579,
     NAMES_SYM = 580,
     NAME_SYM = 581,
     NATIONAL_SYM = 582,
     NATURAL = 583,
     NCHAR_STRING = 584,
     NCHAR_SYM = 585,
     NDBCLUSTER_SYM = 586,
     NE = 587,
     NEG = 588,
     NEW_SYM = 589,
     NEXT_SYM = 590,
     NODEGROUP_SYM = 591,
     NONE_SYM = 592,
     NOT2_SYM = 593,
     NOT_SYM = 594,
     NOW_SYM = 595,
     NO_SYM = 596,
     NO_WAIT_SYM = 597,
     NO_WRITE_TO_BINLOG = 598,
     NULL_SYM = 599,
     NUM = 600,
     NUMERIC_SYM = 601,
     NVARCHAR_SYM = 602,
     OFFSET_SYM = 603,
     OLD_PASSWORD = 604,
     ON = 605,
     ONE_SHOT_SYM = 606,
     ONE_SYM = 607,
     OPEN_SYM = 608,
     OPTIMIZE = 609,
     OPTIONS_SYM = 610,
     OPTION = 611,
     OPTIONALLY = 612,
     OR2_SYM = 613,
     ORDER_SYM = 614,
     OR_OR_SYM = 615,
     OR_SYM = 616,
     OUTER = 617,
     OUTFILE = 618,
     OUT_SYM = 619,
     OWNER_SYM = 620,
     PACK_KEYS_SYM = 621,
     PAGE_SYM = 622,
     PARAM_MARKER = 623,
     PARSER_SYM = 624,
     PARTIAL = 625,
     PARTITIONING_SYM = 626,
     PARTITIONS_SYM = 627,
     PARTITION_SYM = 628,
     PASSWORD = 629,
     PHASE_SYM = 630,
     PLUGINS_SYM = 631,
     PLUGIN_SYM = 632,
     POINT_SYM = 633,
     POLYGON = 634,
     PORT_SYM = 635,
     POSITION_SYM = 636,
     PRECISION = 637,
     PREPARE_SYM = 638,
     PRESERVE_SYM = 639,
     PREV_SYM = 640,
     PRIMARY_SYM = 641,
     PRIVILEGES = 642,
     PROCEDURE_SYM = 643,
     PROCESS = 644,
     PROCESSLIST_SYM = 645,
     PROFILE_SYM = 646,
     PROFILES_SYM = 647,
     PROXY_SYM = 648,
     PURGE = 649,
     QUARTER_SYM = 650,
     QUERY_SYM = 651,
     QUERY_RESPONSE_TIME_SYM = 652,
     QUICK = 653,
     RANGE_SYM = 654,
     READS_SYM = 655,
     READ_ONLY_SYM = 656,
     READ_SYM = 657,
     READ_WRITE_SYM = 658,
     REAL = 659,
     REBUILD_SYM = 660,
     RECOVER_SYM = 661,
     REDOFILE_SYM = 662,
     REDO_BUFFER_SIZE_SYM = 663,
     REDUNDANT_SYM = 664,
     REFERENCES = 665,
     REGEXP = 666,
     RELAY = 667,
     RELAYLOG_SYM = 668,
     RELAY_LOG_FILE_SYM = 669,
     RELAY_LOG_POS_SYM = 670,
     RELAY_THREAD = 671,
     RELEASE_SYM = 672,
     RELOAD = 673,
     REMOVE_SYM = 674,
     RENAME = 675,
     REORGANIZE_SYM = 676,
     REPAIR = 677,
     REPEATABLE_SYM = 678,
     REPEAT_SYM = 679,
     REPLACE = 680,
     REPLICATION = 681,
     REQUIRE_SYM = 682,
     RESET_SYM = 683,
     RESIGNAL_SYM = 684,
     RESOURCES = 685,
     RESTORE_SYM = 686,
     RESTRICT = 687,
     RESUME_SYM = 688,
     RETURNS_SYM = 689,
     RETURN_SYM = 690,
     REVOKE = 691,
     RIGHT = 692,
     ROLLBACK_SYM = 693,
     ROLLUP_SYM = 694,
     ROUTINE_SYM = 695,
     ROWS_SYM = 696,
     ROW_FORMAT_SYM = 697,
     ROW_SYM = 698,
     RTREE_SYM = 699,
     SAVEPOINT_SYM = 700,
     SCHEDULE_SYM = 701,
     SCHEMA_NAME_SYM = 702,
     SECOND_MICROSECOND_SYM = 703,
     SECOND_SYM = 704,
     SECURITY_SYM = 705,
     SELECT_SYM = 706,
     SENSITIVE_SYM = 707,
     SEPARATOR_SYM = 708,
     SERIALIZABLE_SYM = 709,
     SERIAL_SYM = 710,
     SESSION_SYM = 711,
     SERVER_SYM = 712,
     SERVER_OPTIONS = 713,
     SET = 714,
     SET_VAR = 715,
     SHARE_SYM = 716,
     SHIFT_LEFT = 717,
     SHIFT_RIGHT = 718,
     SHOW = 719,
     SHUTDOWN = 720,
     SIGNAL_SYM = 721,
     SIGNED_SYM = 722,
     SIMPLE_SYM = 723,
     SLAVE = 724,
     SLOW = 725,
     SMALLINT = 726,
     SNAPSHOT_SYM = 727,
     SOCKET_SYM = 728,
     SONAME_SYM = 729,
     SOUNDS_SYM = 730,
     SOURCE_SYM = 731,
     SPATIAL_SYM = 732,
     SPECIFIC_SYM = 733,
     SQLEXCEPTION_SYM = 734,
     SQLSTATE_SYM = 735,
     SQLWARNING_SYM = 736,
     SQL_BIG_RESULT = 737,
     SQL_BUFFER_RESULT = 738,
     SQL_CACHE_SYM = 739,
     SQL_CALC_FOUND_ROWS = 740,
     SQL_NO_CACHE_SYM = 741,
     SQL_NO_FCACHE_SYM = 742,
     SQL_SMALL_RESULT = 743,
     SQL_SYM = 744,
     SQL_THREAD = 745,
     SSL_SYM = 746,
     STARTING = 747,
     STARTS_SYM = 748,
     START_SYM = 749,
     STATUS_SYM = 750,
     NOLOCK_SYM = 751,
     STDDEV_SAMP_SYM = 752,
     STD_SYM = 753,
     STOP_SYM = 754,
     STORAGE_SYM = 755,
     STRAIGHT_JOIN = 756,
     STRING_SYM = 757,
     SUBCLASS_ORIGIN_SYM = 758,
     SUBDATE_SYM = 759,
     SUBJECT_SYM = 760,
     SUBPARTITIONS_SYM = 761,
     SUBPARTITION_SYM = 762,
     SUBSTRING = 763,
     SUM_SYM = 764,
     SUPER_SYM = 765,
     SUSPEND_SYM = 766,
     SWAPS_SYM = 767,
     SWITCHES_SYM = 768,
     SYSDATE = 769,
     TABLES = 770,
     TABLESPACE = 771,
     TABLE_REF_PRIORITY = 772,
     TABLE_SYM = 773,
     TABLE_STATS_SYM = 774,
     TABLE_CHECKSUM_SYM = 775,
     TABLE_NAME_SYM = 776,
     TEMPORARY = 777,
     TEMPTABLE_SYM = 778,
     TERMINATED = 779,
     TEXT_STRING = 780,
     TEXT_SYM = 781,
     THAN_SYM = 782,
     THEN_SYM = 783,
     THREAD_STATS_SYM = 784,
     TIMESTAMP = 785,
     TIMESTAMP_ADD = 786,
     TIMESTAMP_DIFF = 787,
     TIME_SYM = 788,
     TINYBLOB = 789,
     TINYINT = 790,
     TINYTEXT = 791,
     TO_SYM = 792,
     TRAILING = 793,
     TRANSACTION_SYM = 794,
     TRIGGERS_SYM = 795,
     TRIGGER_SYM = 796,
     TRIM = 797,
     TRUE_SYM = 798,
     TRUNCATE_SYM = 799,
     TYPES_SYM = 800,
     TYPE_SYM = 801,
     UDF_RETURNS_SYM = 802,
     ULONGLONG_NUM = 803,
     UNCOMMITTED_SYM = 804,
     UNDEFINED_SYM = 805,
     UNDERSCORE_CHARSET = 806,
     UNDOFILE_SYM = 807,
     UNDO_BUFFER_SIZE_SYM = 808,
     UNDO_SYM = 809,
     UNICODE_SYM = 810,
     UNINSTALL_SYM = 811,
     UNION_SYM = 812,
     UNIQUE_SYM = 813,
     UNKNOWN_SYM = 814,
     UNLOCK_SYM = 815,
     UNSIGNED = 816,
     UNTIL_SYM = 817,
     UPDATE_SYM = 818,
     UPGRADE_SYM = 819,
     USAGE = 820,
     USER = 821,
     USER_STATS_SYM = 822,
     USE_FRM = 823,
     USE_SYM = 824,
     USING = 825,
     UTC_DATE_SYM = 826,
     UTC_TIMESTAMP_SYM = 827,
     UTC_TIME_SYM = 828,
     VALUES = 829,
     VALUE_SYM = 830,
     VARBINARY = 831,
     VARCHAR = 832,
     VARIABLES = 833,
     VARIANCE_SYM = 834,
     VARYING = 835,
     VAR_SAMP_SYM = 836,
     VIEW_SYM = 837,
     WAIT_SYM = 838,
     WARNINGS = 839,
     WEEK_SYM = 840,
     WHEN_SYM = 841,
     WHERE = 842,
     WHILE_SYM = 843,
     WITH = 844,
     WITH_CUBE_SYM = 845,
     WITH_ROLLUP_SYM = 846,
     WORK_SYM = 847,
     WRAPPER_SYM = 848,
     WRITE_SYM = 849,
     X509_SYM = 850,
     XA_SYM = 851,
     XML_SYM = 852,
     XOR = 853,
     YEAR_MONTH_SYM = 854,
     YEAR_SYM = 855,
     ZEROFILL = 856
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ANALYZE_SYM 269
#define AND_AND_SYM 270
#define AND_SYM 271
#define ANY_SYM 272
#define AS 273
#define ASC 274
#define ASCII_SYM 275
#define ASENSITIVE_SYM 276
#define AT_SYM 277
#define AUTHORS_SYM 278
#define AUTOEXTEND_SIZE_SYM 279
#define AUTO_INC 280
#define AVG_ROW_LENGTH 281
#define AVG_SYM 282
#define BACKUP_SYM 283
#define BEFORE_SYM 284
#define BEGIN_SYM 285
#define BETWEEN_SYM 286
#define BIGINT 287
#define BINARY 288
#define BINLOG_SYM 289
#define BIN_NUM 290
#define BIT_AND 291
#define BIT_OR 292
#define BIT_SYM 293
#define BIT_XOR 294
#define BLOB_SYM 295
#define BLOCK_SYM 296
#define BOOLEAN_SYM 297
#define BOOL_SYM 298
#define BOTH 299
#define BTREE_SYM 300
#define BY 301
#define BYTE_SYM 302
#define CACHE_SYM 303
#define CALL_SYM 304
#define CASCADE 305
#define CASCADED 306
#define CASE_SYM 307
#define CAST_SYM 308
#define CATALOG_NAME_SYM 309
#define CHAIN_SYM 310
#define CHANGE 311
#define CHANGED 312
#define CHANGED_PAGE_BITMAPS_SYM 313
#define CHARSET 314
#define CHAR_SYM 315
#define CHECKSUM_SYM 316
#define CHECK_SYM 317
#define CIPHER_SYM 318
#define CLASS_ORIGIN_SYM 319
#define CLIENT_SYM 320
#define CLIENT_STATS_SYM 321
#define CLOSE_SYM 322
#define COALESCE 323
#define CODE_SYM 324
#define COLLATE_SYM 325
#define COLLATION_SYM 326
#define COLUMNS 327
#define COLUMN_SYM 328
#define COLUMN_NAME_SYM 329
#define COMMENT_SYM 330
#define COMMITTED_SYM 331
#define COMMIT_SYM 332
#define COMPACT_SYM 333
#define COMPLETION_SYM 334
#define COMPRESSED_SYM 335
#define CONCURRENT 336
#define CONDITION_SYM 337
#define CONNECTION_SYM 338
#define CONSISTENT_SYM 339
#define CONSTRAINT 340
#define CONSTRAINT_CATALOG_SYM 341
#define CONSTRAINT_NAME_SYM 342
#define CONSTRAINT_SCHEMA_SYM 343
#define CONTAINS_SYM 344
#define CONTEXT_SYM 345
#define CONTINUE_SYM 346
#define CONTRIBUTORS_SYM 347
#define CONVERT_SYM 348
#define COUNT_SYM 349
#define CPU_SYM 350
#define CREATE 351
#define CROSS 352
#define CUBE_SYM 353
#define CURDATE 354
#define CURRENT_USER 355
#define CURSOR_SYM 356
#define CURSOR_NAME_SYM 357
#define CURTIME 358
#define DATABASE 359
#define DATABASES 360
#define DATAFILE_SYM 361
#define DATA_SYM 362
#define DATETIME 363
#define DATE_ADD_INTERVAL 364
#define DATE_SUB_INTERVAL 365
#define DATE_SYM 366
#define DAY_HOUR_SYM 367
#define DAY_MICROSECOND_SYM 368
#define DAY_MINUTE_SYM 369
#define DAY_SECOND_SYM 370
#define DAY_SYM 371
#define DEALLOCATE_SYM 372
#define DECIMAL_NUM 373
#define DECIMAL_SYM 374
#define DECLARE_SYM 375
#define DEFAULT 376
#define DEFINER_SYM 377
#define DELAYED_SYM 378
#define DELAY_KEY_WRITE_SYM 379
#define DELETE_SYM 380
#define DESC 381
#define DESCRIBE 382
#define DES_KEY_FILE 383
#define DETERMINISTIC_SYM 384
#define DIRECTORY_SYM 385
#define DISABLE_SYM 386
#define DISCARD 387
#define DISK_SYM 388
#define DISTINCT 389
#define DIV_SYM 390
#define DOUBLE_SYM 391
#define DO_SYM 392
#define DROP 393
#define DUAL_SYM 394
#define DUMPFILE 395
#define DUPLICATE_SYM 396
#define DYNAMIC_SYM 397
#define EACH_SYM 398
#define ELSE 399
#define ELSEIF_SYM 400
#define ENABLE_SYM 401
#define ENCLOSED 402
#define END 403
#define ENDS_SYM 404
#define END_OF_INPUT 405
#define ENGINES_SYM 406
#define ENGINE_SYM 407
#define ENUM 408
#define EQ 409
#define EQUAL_SYM 410
#define ERROR_SYM 411
#define ERRORS 412
#define ESCAPED 413
#define ESCAPE_SYM 414
#define EVENTS_SYM 415
#define EVENT_SYM 416
#define EVERY_SYM 417
#define EXECUTE_SYM 418
#define EXISTS 419
#define EXIT_SYM 420
#define EXPANSION_SYM 421
#define EXTENDED_SYM 422
#define EXTENT_SIZE_SYM 423
#define EXTRACT_SYM 424
#define FALSE_SYM 425
#define FAST_SYM 426
#define FAULTS_SYM 427
#define FETCH_SYM 428
#define FILE_SYM 429
#define FIRST_SYM 430
#define FIXED_SYM 431
#define FLOAT_NUM 432
#define FLOAT_SYM 433
#define FLUSH_SYM 434
#define FORCE_SYM 435
#define FOREIGN 436
#define FOR_SYM 437
#define FOUND_SYM 438
#define FROM 439
#define FULL 440
#define FULLTEXT_SYM 441
#define FUNCTION_SYM 442
#define GE 443
#define GENERAL 444
#define GEOMETRYCOLLECTION 445
#define GEOMETRY_SYM 446
#define GET_FORMAT 447
#define GLOBAL_SYM 448
#define GRANT 449
#define GRANTS 450
#define GROUP_SYM 451
#define GROUP_CONCAT_SYM 452
#define GT_SYM 453
#define HANDLER_SYM 454
#define HASH_SYM 455
#define HAVING 456
#define HELP_SYM 457
#define HEX_NUM 458
#define HIGH_PRIORITY 459
#define HOST_SYM 460
#define HOSTS_SYM 461
#define HOUR_MICROSECOND_SYM 462
#define HOUR_MINUTE_SYM 463
#define HOUR_SECOND_SYM 464
#define HOUR_SYM 465
#define IDENT 466
#define IDENTIFIED_SYM 467
#define IDENT_QUOTED 468
#define IF 469
#define IGNORE_SYM 470
#define IGNORE_SERVER_IDS_SYM 471
#define IMPORT 472
#define INDEXES 473
#define INDEX_SYM 474
#define INDEX_STATS_SYM 475
#define INFILE 476
#define INITIAL_SIZE_SYM 477
#define INNER_SYM 478
#define INOUT_SYM 479
#define INSENSITIVE_SYM 480
#define INSERT 481
#define INSERT_METHOD 482
#define INSTALL_SYM 483
#define INTERVAL_SYM 484
#define INTO 485
#define INT_SYM 486
#define INVOKER_SYM 487
#define IN_SYM 488
#define IO_SYM 489
#define IPC_SYM 490
#define IS 491
#define ISOLATION 492
#define ISSUER_SYM 493
#define ITERATE_SYM 494
#define JOIN_SYM 495
#define KEYS 496
#define KEY_BLOCK_SIZE 497
#define KEY_SYM 498
#define KILL_SYM 499
#define LANGUAGE_SYM 500
#define LAST_SYM 501
#define LE 502
#define LEADING 503
#define LEAVES 504
#define LEAVE_SYM 505
#define LEFT 506
#define LESS_SYM 507
#define LEVEL_SYM 508
#define LEX_HOSTNAME 509
#define LIKE 510
#define LIMIT 511
#define LINEAR_SYM 512
#define LINES 513
#define LINESTRING 514
#define LIST_SYM 515
#define LOAD 516
#define LOCAL_SYM 517
#define LOCATOR_SYM 518
#define LOCKS_SYM 519
#define LOCK_SYM 520
#define LOGFILE_SYM 521
#define LOGS_SYM 522
#define LONGBLOB 523
#define LONGTEXT 524
#define LONG_NUM 525
#define LONG_SYM 526
#define LOOP_SYM 527
#define LOW_PRIORITY 528
#define LT 529
#define MASTER_CONNECT_RETRY_SYM 530
#define MASTER_HOST_SYM 531
#define MASTER_LOG_FILE_SYM 532
#define MASTER_LOG_POS_SYM 533
#define MASTER_PASSWORD_SYM 534
#define MASTER_PORT_SYM 535
#define MASTER_SERVER_ID_SYM 536
#define MASTER_SSL_CAPATH_SYM 537
#define MASTER_SSL_CA_SYM 538
#define MASTER_SSL_CERT_SYM 539
#define MASTER_SSL_CIPHER_SYM 540
#define MASTER_SSL_KEY_SYM 541
#define MASTER_SSL_SYM 542
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 543
#define MASTER_SYM 544
#define MASTER_USER_SYM 545
#define MASTER_HEARTBEAT_PERIOD_SYM 546
#define MATCH 547
#define MAX_CONNECTIONS_PER_HOUR 548
#define MAX_QUERIES_PER_HOUR 549
#define MAX_ROWS 550
#define MAX_SIZE_SYM 551
#define MAX_SYM 552
#define MAX_UPDATES_PER_HOUR 553
#define MAX_USER_CONNECTIONS_SYM 554
#define MAX_VALUE_SYM 555
#define MEDIUMBLOB 556
#define MEDIUMINT 557
#define MEDIUMTEXT 558
#define MEDIUM_SYM 559
#define MEMORY_SYM 560
#define MERGE_SYM 561
#define MESSAGE_TEXT_SYM 562
#define MICROSECOND_SYM 563
#define MIGRATE_SYM 564
#define MINUTE_MICROSECOND_SYM 565
#define MINUTE_SECOND_SYM 566
#define MINUTE_SYM 567
#define MIN_ROWS 568
#define MIN_SYM 569
#define MODE_SYM 570
#define MODIFIES_SYM 571
#define MODIFY_SYM 572
#define MOD_SYM 573
#define MONTH_SYM 574
#define MULTILINESTRING 575
#define MULTIPOINT 576
#define MULTIPOLYGON 577
#define MUTEX_SYM 578
#define MYSQL_ERRNO_SYM 579
#define NAMES_SYM 580
#define NAME_SYM 581
#define NATIONAL_SYM 582
#define NATURAL 583
#define NCHAR_STRING 584
#define NCHAR_SYM 585
#define NDBCLUSTER_SYM 586
#define NE 587
#define NEG 588
#define NEW_SYM 589
#define NEXT_SYM 590
#define NODEGROUP_SYM 591
#define NONE_SYM 592
#define NOT2_SYM 593
#define NOT_SYM 594
#define NOW_SYM 595
#define NO_SYM 596
#define NO_WAIT_SYM 597
#define NO_WRITE_TO_BINLOG 598
#define NULL_SYM 599
#define NUM 600
#define NUMERIC_SYM 601
#define NVARCHAR_SYM 602
#define OFFSET_SYM 603
#define OLD_PASSWORD 604
#define ON 605
#define ONE_SHOT_SYM 606
#define ONE_SYM 607
#define OPEN_SYM 608
#define OPTIMIZE 609
#define OPTIONS_SYM 610
#define OPTION 611
#define OPTIONALLY 612
#define OR2_SYM 613
#define ORDER_SYM 614
#define OR_OR_SYM 615
#define OR_SYM 616
#define OUTER 617
#define OUTFILE 618
#define OUT_SYM 619
#define OWNER_SYM 620
#define PACK_KEYS_SYM 621
#define PAGE_SYM 622
#define PARAM_MARKER 623
#define PARSER_SYM 624
#define PARTIAL 625
#define PARTITIONING_SYM 626
#define PARTITIONS_SYM 627
#define PARTITION_SYM 628
#define PASSWORD 629
#define PHASE_SYM 630
#define PLUGINS_SYM 631
#define PLUGIN_SYM 632
#define POINT_SYM 633
#define POLYGON 634
#define PORT_SYM 635
#define POSITION_SYM 636
#define PRECISION 637
#define PREPARE_SYM 638
#define PRESERVE_SYM 639
#define PREV_SYM 640
#define PRIMARY_SYM 641
#define PRIVILEGES 642
#define PROCEDURE_SYM 643
#define PROCESS 644
#define PROCESSLIST_SYM 645
#define PROFILE_SYM 646
#define PROFILES_SYM 647
#define PROXY_SYM 648
#define PURGE 649
#define QUARTER_SYM 650
#define QUERY_SYM 651
#define QUERY_RESPONSE_TIME_SYM 652
#define QUICK 653
#define RANGE_SYM 654
#define READS_SYM 655
#define READ_ONLY_SYM 656
#define READ_SYM 657
#define READ_WRITE_SYM 658
#define REAL 659
#define REBUILD_SYM 660
#define RECOVER_SYM 661
#define REDOFILE_SYM 662
#define REDO_BUFFER_SIZE_SYM 663
#define REDUNDANT_SYM 664
#define REFERENCES 665
#define REGEXP 666
#define RELAY 667
#define RELAYLOG_SYM 668
#define RELAY_LOG_FILE_SYM 669
#define RELAY_LOG_POS_SYM 670
#define RELAY_THREAD 671
#define RELEASE_SYM 672
#define RELOAD 673
#define REMOVE_SYM 674
#define RENAME 675
#define REORGANIZE_SYM 676
#define REPAIR 677
#define REPEATABLE_SYM 678
#define REPEAT_SYM 679
#define REPLACE 680
#define REPLICATION 681
#define REQUIRE_SYM 682
#define RESET_SYM 683
#define RESIGNAL_SYM 684
#define RESOURCES 685
#define RESTORE_SYM 686
#define RESTRICT 687
#define RESUME_SYM 688
#define RETURNS_SYM 689
#define RETURN_SYM 690
#define REVOKE 691
#define RIGHT 692
#define ROLLBACK_SYM 693
#define ROLLUP_SYM 694
#define ROUTINE_SYM 695
#define ROWS_SYM 696
#define ROW_FORMAT_SYM 697
#define ROW_SYM 698
#define RTREE_SYM 699
#define SAVEPOINT_SYM 700
#define SCHEDULE_SYM 701
#define SCHEMA_NAME_SYM 702
#define SECOND_MICROSECOND_SYM 703
#define SECOND_SYM 704
#define SECURITY_SYM 705
#define SELECT_SYM 706
#define SENSITIVE_SYM 707
#define SEPARATOR_SYM 708
#define SERIALIZABLE_SYM 709
#define SERIAL_SYM 710
#define SESSION_SYM 711
#define SERVER_SYM 712
#define SERVER_OPTIONS 713
#define SET 714
#define SET_VAR 715
#define SHARE_SYM 716
#define SHIFT_LEFT 717
#define SHIFT_RIGHT 718
#define SHOW 719
#define SHUTDOWN 720
#define SIGNAL_SYM 721
#define SIGNED_SYM 722
#define SIMPLE_SYM 723
#define SLAVE 724
#define SLOW 725
#define SMALLINT 726
#define SNAPSHOT_SYM 727
#define SOCKET_SYM 728
#define SONAME_SYM 729
#define SOUNDS_SYM 730
#define SOURCE_SYM 731
#define SPATIAL_SYM 732
#define SPECIFIC_SYM 733
#define SQLEXCEPTION_SYM 734
#define SQLSTATE_SYM 735
#define SQLWARNING_SYM 736
#define SQL_BIG_RESULT 737
#define SQL_BUFFER_RESULT 738
#define SQL_CACHE_SYM 739
#define SQL_CALC_FOUND_ROWS 740
#define SQL_NO_CACHE_SYM 741
#define SQL_NO_FCACHE_SYM 742
#define SQL_SMALL_RESULT 743
#define SQL_SYM 744
#define SQL_THREAD 745
#define SSL_SYM 746
#define STARTING 747
#define STARTS_SYM 748
#define START_SYM 749
#define STATUS_SYM 750
#define NOLOCK_SYM 751
#define STDDEV_SAMP_SYM 752
#define STD_SYM 753
#define STOP_SYM 754
#define STORAGE_SYM 755
#define STRAIGHT_JOIN 756
#define STRING_SYM 757
#define SUBCLASS_ORIGIN_SYM 758
#define SUBDATE_SYM 759
#define SUBJECT_SYM 760
#define SUBPARTITIONS_SYM 761
#define SUBPARTITION_SYM 762
#define SUBSTRING 763
#define SUM_SYM 764
#define SUPER_SYM 765
#define SUSPEND_SYM 766
#define SWAPS_SYM 767
#define SWITCHES_SYM 768
#define SYSDATE 769
#define TABLES 770
#define TABLESPACE 771
#define TABLE_REF_PRIORITY 772
#define TABLE_SYM 773
#define TABLE_STATS_SYM 774
#define TABLE_CHECKSUM_SYM 775
#define TABLE_NAME_SYM 776
#define TEMPORARY 777
#define TEMPTABLE_SYM 778
#define TERMINATED 779
#define TEXT_STRING 780
#define TEXT_SYM 781
#define THAN_SYM 782
#define THEN_SYM 783
#define THREAD_STATS_SYM 784
#define TIMESTAMP 785
#define TIMESTAMP_ADD 786
#define TIMESTAMP_DIFF 787
#define TIME_SYM 788
#define TINYBLOB 789
#define TINYINT 790
#define TINYTEXT 791
#define TO_SYM 792
#define TRAILING 793
#define TRANSACTION_SYM 794
#define TRIGGERS_SYM 795
#define TRIGGER_SYM 796
#define TRIM 797
#define TRUE_SYM 798
#define TRUNCATE_SYM 799
#define TYPES_SYM 800
#define TYPE_SYM 801
#define UDF_RETURNS_SYM 802
#define ULONGLONG_NUM 803
#define UNCOMMITTED_SYM 804
#define UNDEFINED_SYM 805
#define UNDERSCORE_CHARSET 806
#define UNDOFILE_SYM 807
#define UNDO_BUFFER_SIZE_SYM 808
#define UNDO_SYM 809
#define UNICODE_SYM 810
#define UNINSTALL_SYM 811
#define UNION_SYM 812
#define UNIQUE_SYM 813
#define UNKNOWN_SYM 814
#define UNLOCK_SYM 815
#define UNSIGNED 816
#define UNTIL_SYM 817
#define UPDATE_SYM 818
#define UPGRADE_SYM 819
#define USAGE 820
#define USER 821
#define USER_STATS_SYM 822
#define USE_FRM 823
#define USE_SYM 824
#define USING 825
#define UTC_DATE_SYM 826
#define UTC_TIMESTAMP_SYM 827
#define UTC_TIME_SYM 828
#define VALUES 829
#define VALUE_SYM 830
#define VARBINARY 831
#define VARCHAR 832
#define VARIABLES 833
#define VARIANCE_SYM 834
#define VARYING 835
#define VAR_SAMP_SYM 836
#define VIEW_SYM 837
#define WAIT_SYM 838
#define WARNINGS 839
#define WEEK_SYM 840
#define WHEN_SYM 841
#define WHERE 842
#define WHILE_SYM 843
#define WITH 844
#define WITH_CUBE_SYM 845
#define WITH_ROLLUP_SYM 846
#define WORK_SYM 847
#define WRAPPER_SYM 848
#define WRITE_SYM 849
#define X509_SYM 850
#define XA_SYM 851
#define XML_SYM 852
#define XOR 853
#define YEAR_MONTH_SYM 854
#define YEAR_SYM 855
#define ZEROFILL 856




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 293 of yacc.c  */
#line 731 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  struct sp_cond_type *spcondtype;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  bool is_not_empty;



/* Line 293 of yacc.c  */
#line 2077 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 343 of yacc.c  */
#line 780 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 343 of yacc.c  */
#line 2094 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  580
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   50925

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  621
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  888
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2521
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4283

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   856

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   614,     2,     2,     2,   608,   603,     2,
     611,   612,   606,   605,   613,   604,   619,   607,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   620,   617,
       2,     2,     2,     2,   618,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   609,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   615,   602,   616,   610,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   127,   129,   131,   136,   138,   141,   142,   147,
     148,   151,   155,   157,   160,   161,   165,   166,   172,   174,
     178,   182,   186,   190,   194,   198,   202,   206,   210,   214,
     218,   222,   226,   230,   236,   238,   239,   241,   245,   247,
     251,   255,   259,   263,   264,   272,   273,   286,   287,   300,
     301,   314,   315,   322,   323,   327,   332,   337,   341,   344,
     355,   357,   361,   364,   367,   370,   373,   376,   379,   382,
     383,   397,   398,   405,   408,   409,   411,   415,   417,   418,
     421,   422,   425,   426,   428,   432,   437,   438,   441,   442,
     445,   447,   449,   451,   453,   455,   457,   459,   461,   463,
     465,   467,   469,   471,   472,   476,   478,   479,   482,   483,
     486,   489,   492,   495,   498,   502,   506,   508,   510,   512,
     515,   519,   523,   524,   529,   530,   534,   535,   537,   541,
     543,   544,   546,   550,   552,   553,   557,   558,   560,   564,
     566,   571,   572,   574,   576,   578,   579,   583,   586,   590,
     591,   595,   596,   602,   608,   609,   617,   623,   624,   627,
     629,   631,   633,   637,   639,   641,   643,   647,   648,   650,
     652,   654,   656,   659,   661,   665,   667,   669,   670,   672,
     673,   676,   680,   686,   688,   690,   692,   694,   696,   698,
     700,   702,   704,   706,   708,   710,   712,   714,   716,   720,
     722,   726,   727,   730,   732,   734,   736,   738,   740,   742,
     744,   746,   748,   750,   752,   754,   756,   757,   763,   764,
     767,   768,   772,   773,   776,   779,   782,   785,   786,   793,
     796,   797,   800,   802,   804,   808,   809,   810,   811,   819,
     820,   823,   826,   828,   830,   831,   832,   841,   842,   849,
     851,   854,   856,   859,   860,   861,   868,   869,   870,   877,
     878,   881,   882,   888,   889,   891,   892,   898,   899,   902,
     903,   909,   914,   915,   916,   925,   926,   934,   936,   938,
     940,   942,   944,   947,   952,   958,   959,   964,   969,   974,
     978,   982,   985,   988,   989,   992,   994,   997,  1001,  1003,
    1005,  1007,  1009,  1011,  1014,  1018,  1020,  1022,  1024,  1026,
    1028,  1030,  1032,  1034,  1036,  1038,  1041,  1045,  1047,  1049,
    1051,  1053,  1055,  1057,  1059,  1062,  1066,  1068,  1070,  1072,
    1074,  1076,  1078,  1080,  1082,  1084,  1087,  1091,  1093,  1095,
    1097,  1100,  1103,  1106,  1108,  1110,  1112,  1114,  1117,  1121,
    1125,  1129,  1133,  1137,  1141,  1145,  1149,  1154,  1155,  1157,
    1159,  1161,  1163,  1165,  1168,  1172,  1175,  1180,  1186,  1187,
    1193,  1194,  1195,  1201,  1202,  1210,  1212,  1213,  1215,  1216,
    1221,  1222,  1223,  1227,  1233,  1240,  1241,  1246,  1249,  1252,
    1255,  1258,  1259,  1261,  1262,  1266,  1267,  1269,  1271,  1275,
    1277,  1282,  1288,  1294,  1295,  1298,  1299,  1300,  1308,  1309,
    1320,  1322,  1326,  1328,  1330,  1331,  1334,  1335,  1339,  1341,
    1345,  1346,  1353,  1355,  1356,  1357,  1363,  1364,  1369,  1371,
    1373,  1375,  1379,  1381,  1385,  1386,  1387,  1393,  1395,  1399,
    1401,  1403,  1404,  1408,  1410,  1414,  1415,  1420,  1422,  1423,
    1425,  1428,  1430,  1434,  1439,  1443,  1447,  1451,  1456,  1461,
    1465,  1466,  1467,  1474,  1475,  1477,  1478,  1480,  1482,  1485,
    1487,  1489,  1490,  1492,  1494,  1497,  1499,  1500,  1504,  1505,
    1507,  1509,  1512,  1514,  1517,  1521,  1525,  1529,  1533,  1537,
    1541,  1545,  1549,  1553,  1557,  1561,  1565,  1569,  1573,  1574,
    1581,  1583,  1585,  1589,  1594,  1599,  1602,  1605,  1608,  1612,
    1616,  1621,  1626,  1628,  1630,  1632,  1634,  1636,  1638,  1640,
    1642,  1644,  1646,  1648,  1650,  1653,  1655,  1657,  1659,  1661,
    1663,  1665,  1669,  1671,  1673,  1676,  1679,  1687,  1696,  1705,
    1714,  1723,  1726,  1727,  1729,  1734,  1735,  1737,  1740,  1741,
    1746,  1750,  1754,  1758,  1760,  1763,  1765,  1767,  1771,  1774,
    1778,  1781,  1784,  1786,  1790,  1794,  1797,  1801,  1803,  1805,
    1807,  1809,  1811,  1814,  1816,  1818,  1820,  1823,  1827,  1830,
    1834,  1837,  1840,  1844,  1848,  1852,  1853,  1860,  1861,  1868,
    1871,  1873,  1875,  1877,  1879,  1881,  1883,  1885,  1887,  1889,
    1891,  1893,  1896,  1899,  1901,  1904,  1906,  1909,  1913,  1916,
    1918,  1920,  1922,  1924,  1926,  1928,  1930,  1933,  1934,  1936,
    1938,  1944,  1945,  1947,  1950,  1952,  1954,  1956,  1958,  1962,
    1966,  1970,  1974,  1975,  1977,  1978,  1980,  1981,  1983,  1986,
    1988,  1990,  1993,  1996,  2001,  2003,  2007,  2010,  2012,  2015,
    2018,  2021,  2024,  2027,  2029,  2032,  2034,  2036,  2038,  2040,
    2042,  2043,  2046,  2048,  2050,  2052,  2054,  2056,  2057,  2060,
    2062,  2064,  2065,  2067,  2069,  2072,  2075,  2077,  2080,  2083,
    2084,  2086,  2088,  2090,  2094,  2096,  2100,  2101,  2103,  2104,
    2106,  2112,  2113,  2117,  2121,  2123,  2124,  2127,  2130,  2133,
    2134,  2138,  2142,  2149,  2156,  2158,  2160,  2163,  2166,  2169,
    2171,  2174,  2177,  2179,  2181,  2182,  2184,  2186,  2188,  2190,
    2191,  2193,  2195,  2197,  2198,  2200,  2203,  2204,  2206,  2207,
    2209,  2210,  2212,  2214,  2217,  2219,  2222,  2224,  2227,  2230,
    2233,  2237,  2240,  2242,  2244,  2246,  2248,  2252,  2254,  2256,
    2258,  2263,  2266,  2268,  2273,  2274,  2276,  2277,  2280,  2282,
    2286,  2287,  2294,  2295,  2301,  2309,  2310,  2316,  2317,  2323,
    2324,  2330,  2331,  2336,  2337,  2349,  2353,  2358,  2362,  2366,
    2374,  2375,  2379,  2381,  2386,  2387,  2391,  2392,  2395,  2396,
    2398,  2399,  2402,  2405,  2408,  2411,  2413,  2415,  2417,  2421,
    2426,  2427,  2434,  2439,  2440,  2446,  2447,  2454,  2459,  2463,
    2465,  2468,  2470,  2472,  2473,  2479,  2480,  2484,  2487,  2488,
    2494,  2495,  2496,  2503,  2505,  2509,  2511,  2513,  2517,  2520,
    2524,  2527,  2532,  2533,  2540,  2541,  2542,  2551,  2556,  2561,
    2565,  2569,  2572,  2575,  2582,  2588,  2592,  2598,  2600,  2602,
    2604,  2605,  2607,  2608,  2610,  2611,  2613,  2615,  2616,  2619,
    2621,  2622,  2624,  2626,  2628,  2629,  2635,  2639,  2640,  2646,
    2650,  2654,  2655,  2659,  2660,  2663,  2665,  2669,  2670,  2672,
    2674,  2675,  2678,  2680,  2684,  2685,  2691,  2692,  2694,  2696,
    2697,  2704,  2705,  2707,  2709,  2712,  2714,  2716,  2718,  2719,
    2725,  2728,  2729,  2735,  2736,  2738,  2740,  2743,  2745,  2747,
    2749,  2751,  2753,  2756,  2757,  2763,  2764,  2766,  2768,  2769,
    2774,  2779,  2783,  2789,  2791,  2795,  2799,  2800,  2807,  2809,
    2811,  2813,  2817,  2820,  2824,  2826,  2828,  2829,  2836,  2838,
    2840,  2842,  2846,  2850,  2855,  2856,  2863,  2864,  2867,  2868,
    2873,  2874,  2877,  2879,  2882,  2887,  2890,  2894,  2897,  2901,
    2902,  2906,  2907,  2908,  2915,  2918,  2920,  2922,  2925,  2928,
    2937,  2942,  2943,  2945,  2948,  2950,  2952,  2954,  2956,  2958,
    2959,  2962,  2967,  2971,  2973,  2975,  2979,  2984,  2985,  2986,
    2987,  2990,  2993,  2995,  2997,  2998,  3001,  3005,  3009,  3013,
    3016,  3020,  3025,  3029,  3034,  3038,  3043,  3045,  3049,  3054,
    3058,  3062,  3069,  3071,  3077,  3084,  3090,  3098,  3105,  3114,
    3120,  3127,  3132,  3137,  3143,  3147,  3152,  3154,  3158,  3162,
    3166,  3170,  3174,  3178,  3184,  3190,  3194,  3198,  3202,  3206,
    3210,  3214,  3216,  3218,  3220,  3222,  3224,  3226,  3228,  3230,
    3232,  3234,  3236,  3238,  3240,  3242,  3244,  3246,  3248,  3250,
    3252,  3254,  3256,  3258,  3262,  3264,  3266,  3268,  3270,  3274,
    3277,  3280,  3283,  3286,  3290,  3294,  3300,  3307,  3312,  3317,
    3325,  3328,  3335,  3341,  3348,  3355,  3360,  3365,  3371,  3376,
    3383,  3386,  3391,  3396,  3401,  3412,  3419,  3428,  3435,  3440,
    3445,  3452,  3457,  3462,  3467,  3474,  3479,  3487,  3495,  3503,
    3510,  3517,  3524,  3531,  3535,  3540,  3547,  3556,  3559,  3562,
    3567,  3576,  3585,  3592,  3599,  3602,  3607,  3614,  3621,  3630,
    3639,  3646,  3655,  3662,  3665,  3670,  3679,  3688,  3691,  3694,
    3697,  3702,  3707,  3712,  3717,  3721,  3730,  3735,  3742,  3747,
    3752,  3757,  3764,  3773,  3780,  3785,  3792,  3794,  3801,  3806,
    3811,  3816,  3821,  3826,  3833,  3838,  3839,  3845,  3852,  3855,
    3859,  3860,  3865,  3866,  3870,  3871,  3873,  3875,  3879,  3884,
    3889,  3895,  3900,  3905,  3910,  3916,  3921,  3922,  3923,  3931,
    3936,  3942,  3947,  3953,  3958,  3963,  3968,  3973,  3978,  3984,
    3985,  3994,  3995,  3999,  4003,  4005,  4010,  4011,  4013,  4014,
    4017,  4018,  4019,  4024,  4029,  4032,  4033,  4037,  4040,  4044,
    4047,  4049,  4052,  4054,  4057,  4059,  4061,  4063,  4066,  4067,
    4069,  4071,  4075,  4077,  4081,  4083,  4087,  4088,  4090,  4091,
    4094,  4099,  4105,  4107,  4109,  4111,  4113,  4118,  4120,  4124,
    4128,  4132,  4133,  4140,  4141,  4148,  4149,  4158,  4163,  4164,
    4173,  4174,  4185,  4192,  4193,  4202,  4203,  4214,  4221,  4223,
    4226,  4229,  4230,  4235,  4239,  4245,  4248,  4249,  4250,  4258,
    4260,  4261,  4262,  4269,  4270,  4274,  4275,  4276,  4282,  4283,
    4285,  4286,  4288,  4289,  4292,  4296,  4300,  4302,  4304,  4305,
    4313,  4314,  4322,  4324,  4327,  4328,  4329,  4332,  4333,  4336,
    4337,  4339,  4341,  4343,  4345,  4349,  4351,  4355,  4357,  4359,
    4361,  4363,  4365,  4367,  4369,  4371,  4373,  4375,  4377,  4379,
    4381,  4383,  4385,  4387,  4389,  4391,  4393,  4395,  4397,  4399,
    4401,  4403,  4405,  4406,  4408,  4410,  4411,  4414,  4415,  4417,
    4418,  4419,  4423,  4424,  4425,  4429,  4432,  4433,  4434,  4439,
    4444,  4447,  4448,  4450,  4452,  4456,  4460,  4462,  4465,  4466,
    4468,  4469,  4474,  4479,  4482,  4483,  4485,  4487,  4488,  4490,
    4491,  4493,  4496,  4498,  4502,  4506,  4508,  4510,  4512,  4514,
    4516,  4517,  4520,  4522,  4524,  4526,  4528,  4530,  4532,  4534,
    4536,  4538,  4540,  4542,  4544,  4546,  4548,  4550,  4552,  4554,
    4556,  4558,  4560,  4562,  4564,  4566,  4567,  4568,  4575,  4576,
    4578,  4582,  4584,  4588,  4589,  4592,  4596,  4598,  4601,  4603,
    4604,  4608,  4609,  4610,  4618,  4621,  4623,  4624,  4628,  4629,
    4637,  4638,  4645,  4650,  4657,  4662,  4667,  4672,  4673,  4680,
    4685,  4690,  4696,  4703,  4708,  4710,  4714,  4716,  4718,  4722,
    4724,  4725,  4728,  4729,  4731,  4732,  4733,  4742,  4743,  4744,
    4751,  4752,  4754,  4756,  4758,  4760,  4762,  4765,  4767,  4769,
    4771,  4775,  4780,  4781,  4785,  4789,  4791,  4794,  4797,  4798,
    4802,  4803,  4809,  4813,  4815,  4819,  4821,  4825,  4827,  4829,
    4830,  4832,  4833,  4838,  4839,  4841,  4845,  4847,  4849,  4851,
    4852,  4853,  4860,  4861,  4862,  4874,  4878,  4880,  4884,  4888,
    4890,  4894,  4895,  4897,  4898,  4903,  4904,  4911,  4912,  4918,
    4919,  4926,  4928,  4932,  4935,  4940,  4941,  4944,  4945,  4948,
    4950,  4952,  4954,  4955,  4960,  4961,  4963,  4964,  4966,  4968,
    4972,  4974,  4976,  4979,  4982,  4985,  4987,  4989,  4991,  4993,
    4994,  4998,  4999,  5003,  5006,  5011,  5016,  5021,  5025,  5030,
    5035,  5037,  5041,  5045,  5052,  5055,  5058,  5059,  5066,  5067,
    5074,  5080,  5083,  5085,  5087,  5089,  5095,  5101,  5104,  5107,
    5109,  5114,  5118,  5121,  5125,  5128,  5131,  5133,  5137,  5142,
    5146,  5150,  5153,  5156,  5160,  5163,  5166,  5169,  5172,  5175,
    5178,  5182,  5186,  5190,  5194,  5198,  5202,  5206,  5210,  5212,
    5214,  5216,  5218,  5220,  5221,  5223,  5224,  5227,  5228,  5230,
    5232,  5234,  5235,  5238,  5239,  5242,  5243,  5246,  5249,  5250,
    5255,  5256,  5261,  5263,  5265,  5266,  5268,  5270,  5271,  5273,
    5275,  5276,  5281,  5282,  5283,  5289,  5291,  5292,  5296,  5300,
    5302,  5305,  5308,  5311,  5314,  5317,  5320,  5323,  5325,  5327,
    5329,  5331,  5333,  5335,  5337,  5339,  5341,  5343,  5345,  5347,
    5349,  5351,  5353,  5354,  5356,  5357,  5361,  5365,  5367,  5368,
    5372,  5374,  5377,  5379,  5380,  5382,  5383,  5387,  5391,  5395,
    5398,  5401,  5405,  5406,  5408,  5410,  5413,  5414,  5415,  5416,
    5417,  5439,  5441,  5443,  5444,  5446,  5447,  5449,  5451,  5452,
    5454,  5456,  5457,  5460,  5463,  5465,  5469,  5474,  5478,  5482,
    5483,  5486,  5489,  5491,  5495,  5499,  5500,  5505,  5506,  5510,
    5512,  5514,  5515,  5519,  5522,  5526,  5528,  5530,  5533,  5534,
    5537,  5541,  5543,  5549,  5551,  5553,  5556,  5559,  5561,  5563,
    5565,  5567,  5569,  5572,  5575,  5577,  5579,  5581,  5583,  5585,
    5587,  5589,  5592,  5595,  5598,  5601,  5604,  5606,  5608,  5610,
    5612,  5614,  5616,  5618,  5622,  5628,  5630,  5632,  5634,  5636,
    5638,  5642,  5647,  5653,  5655,  5661,  5665,  5668,  5670,  5674,
    5677,  5680,  5685,  5687,  5689,  5691,  5693,  5695,  5697,  5699,
    5701,  5703,  5705,  5707,  5709,  5711,  5713,  5717,  5720,  5722,
    5724,  5726,  5728,  5730,  5732,  5734,  5736,  5738,  5740,  5742,
    5744,  5746,  5748,  5750,  5752,  5754,  5756,  5758,  5760,  5762,
    5764,  5766,  5768,  5770,  5772,  5774,  5776,  5778,  5780,  5782,
    5784,  5786,  5788,  5790,  5792,  5794,  5796,  5798,  5800,  5802,
    5804,  5806,  5808,  5810,  5812,  5814,  5816,  5818,  5820,  5822,
    5824,  5826,  5828,  5830,  5832,  5834,  5836,  5838,  5840,  5842,
    5844,  5846,  5848,  5850,  5852,  5854,  5856,  5858,  5860,  5862,
    5864,  5866,  5868,  5870,  5872,  5874,  5876,  5878,  5880,  5882,
    5884,  5886,  5888,  5890,  5892,  5894,  5896,  5898,  5900,  5902,
    5904,  5906,  5908,  5910,  5912,  5914,  5916,  5918,  5920,  5922,
    5924,  5926,  5928,  5930,  5932,  5934,  5936,  5938,  5940,  5942,
    5944,  5946,  5948,  5950,  5952,  5954,  5956,  5958,  5960,  5962,
    5964,  5966,  5968,  5970,  5972,  5974,  5976,  5978,  5980,  5982,
    5984,  5986,  5988,  5990,  5992,  5994,  5996,  5998,  6000,  6002,
    6004,  6006,  6008,  6010,  6012,  6014,  6016,  6018,  6020,  6022,
    6024,  6026,  6028,  6030,  6032,  6034,  6036,  6038,  6040,  6042,
    6044,  6046,  6048,  6050,  6052,  6054,  6056,  6058,  6060,  6062,
    6064,  6066,  6068,  6070,  6072,  6074,  6076,  6078,  6080,  6082,
    6084,  6086,  6088,  6090,  6092,  6094,  6096,  6098,  6100,  6102,
    6104,  6106,  6108,  6110,  6112,  6114,  6116,  6118,  6120,  6122,
    6124,  6126,  6128,  6130,  6132,  6134,  6136,  6138,  6140,  6142,
    6144,  6146,  6148,  6150,  6152,  6154,  6156,  6158,  6160,  6162,
    6164,  6166,  6168,  6170,  6172,  6174,  6176,  6178,  6180,  6182,
    6184,  6186,  6188,  6190,  6192,  6194,  6196,  6198,  6200,  6202,
    6204,  6206,  6208,  6210,  6212,  6214,  6216,  6218,  6220,  6222,
    6224,  6226,  6228,  6230,  6232,  6234,  6236,  6238,  6240,  6242,
    6244,  6246,  6248,  6250,  6252,  6254,  6256,  6258,  6260,  6262,
    6264,  6266,  6268,  6270,  6272,  6274,  6276,  6278,  6280,  6282,
    6284,  6286,  6288,  6290,  6292,  6294,  6296,  6298,  6300,  6302,
    6304,  6306,  6308,  6310,  6312,  6314,  6316,  6318,  6320,  6322,
    6324,  6326,  6328,  6330,  6332,  6334,  6336,  6338,  6340,  6342,
    6344,  6346,  6348,  6350,  6352,  6354,  6356,  6358,  6360,  6362,
    6364,  6366,  6368,  6370,  6372,  6374,  6376,  6378,  6380,  6382,
    6384,  6386,  6388,  6390,  6391,  6396,  6397,  6399,  6401,  6405,
    6406,  6409,  6411,  6413,  6415,  6417,  6418,  6420,  6421,  6423,
    6425,  6427,  6428,  6431,  6434,  6437,  6439,  6442,  6447,  6453,
    6458,  6465,  6468,  6472,  6476,  6480,  6486,  6488,  6492,  6496,
    6499,  6502,  6505,  6507,  6509,  6514,  6519,  6521,  6523,  6525,
    6527,  6529,  6530,  6535,  6537,  6539,  6541,  6545,  6549,  6551,
    6553,  6556,  6559,  6560,  6564,  6569,  6573,  6574,  6582,  6584,
    6587,  6589,  6591,  6593,  6595,  6597,  6599,  6600,  6606,  6608,
    6610,  6612,  6614,  6616,  6620,  6627,  6634,  6641,  6649,  6655,
    6659,  6668,  6677,  6686,  6693,  6694,  6696,  6698,  6701,  6702,
    6704,  6706,  6710,  6711,  6715,  6716,  6720,  6721,  6725,  6726,
    6730,  6732,  6734,  6736,  6738,  6740,  6742,  6744,  6746,  6748,
    6750,  6752,  6755,  6758,  6760,  6764,  6767,  6770,  6773,  6776,
    6779,  6782,  6785,  6788,  6790,  6792,  6795,  6796,  6798,  6802,
    6804,  6807,  6810,  6813,  6815,  6819,  6823,  6825,  6827,  6831,
    6833,  6837,  6842,  6848,  6853,  6860,  6862,  6863,  6867,  6871,
    6873,  6875,  6876,  6879,  6882,  6885,  6888,  6889,  6892,  6893,
    6897,  6900,  6902,  6905,  6908,  6911,  6914,  6917,  6918,  6922,
    6923,  6925,  6926,  6930,  6933,  6934,  6936,  6939,  6940,  6942,
    6947,  6952,  6958,  6961,  6965,  6966,  6968,  6969,  6974,  6975,
    6977,  6979,  6980,  6982,  6983,  6986,  6989,  6991,  6992,  6994,
    6996,  6999,  7003,  7006,  7007,  7014,  7018,  7019,  7020,  7021,
    7023,  7026,  7028,  7030,  7032,  7034,  7036,  7038,  7040,  7042,
    7044,  7047,  7050,  7054,  7056,  7058,  7060,  7062,  7064,  7066,
    7068,  7070,  7072,  7074,  7076,  7078,  7080,  7081,  7085,  7087,
    7090,  7092,  7095,  7099,  7103,  7107,  7108,  7112,  7116,  7117,
    7125,  7126,  7130,  7132,  7136,  7137,  7141,  7144,  7149,  7150,
    7154,  7159,  7164,  7165,  7166,  7167,  7184,  7193,  7201,  7202,
    7203,  7204,  7205,  7206,  7222,  7223,  7224,  7225,  7226,  7239,
    7244,  7249,  7253,  7258,  7262,  7265,  7267,  7271,  7277,  7279,
    7281,  7282,  7284,  7286,  7287,  7290,  7291,  7292,  7296,  7297,
    7300,  7306
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     622,     0,    -1,   150,    -1,    -1,   625,   623,   617,   624,
      -1,   625,   150,    -1,    -1,   150,    -1,   626,    -1,  1437,
      -1,   969,    -1,  1026,    -1,  1028,    -1,   675,    -1,   638,
      -1,  1029,    -1,  1018,    -1,  1443,    -1,   645,    -1,   627,
      -1,  1267,    -1,  1299,    -1,  1219,    -1,  1221,    -1,   631,
      -1,  1305,    -1,  1411,    -1,  1402,    -1,   636,    -1,  1231,
      -1,  1507,    -1,  1324,    -1,  1327,    -1,  1394,    -1,  1034,
      -1,  1042,    -1,   818,    -1,  1049,    -1,   629,    -1,  1320,
      -1,  1446,    -1,  1037,    -1,  1021,    -1,  1234,    -1,  1314,
      -1,   710,    -1,  1409,    -1,  1444,    -1,  1445,    -1,  1061,
      -1,  1377,    -1,   703,    -1,  1285,    -1,  1007,    -1,  1010,
      -1,  1278,    -1,  1508,    -1,  1400,    -1,  1259,    -1,  1326,
      -1,  1499,    -1,   628,   383,  1371,    -1,   117,    -1,   138,
      -1,   383,  1371,   184,   630,    -1,  1368,    -1,   618,  1373,
      -1,    -1,   163,  1371,   632,   633,    -1,    -1,   570,   634,
      -1,   634,   613,   635,    -1,   635,    -1,   618,  1373,    -1,
      -1,   202,   637,  1373,    -1,    -1,    56,   289,   537,   639,
     640,    -1,   641,    -1,   640,   613,   641,    -1,   276,   154,
    1368,    -1,   290,   154,  1368,    -1,   279,   154,  1368,    -1,
     280,   154,  1199,    -1,   275,   154,  1199,    -1,   287,   154,
    1199,    -1,   283,   154,  1368,    -1,   282,   154,  1368,    -1,
     284,   154,  1368,    -1,   285,   154,  1368,    -1,   286,   154,
    1368,    -1,   288,   154,  1199,    -1,   291,   154,  1356,    -1,
     216,   154,   611,   642,   612,    -1,   644,    -1,    -1,   643,
      -1,   642,   613,   643,    -1,  1199,    -1,   277,   154,  1368,
      -1,   278,   154,  1201,    -1,   414,   154,  1368,    -1,   415,
     154,  1199,    -1,    -1,    96,   870,   518,   873,  1364,   646,
     807,    -1,    -1,    96,   947,   219,  1371,   951,   350,  1364,
     647,   611,   964,   612,   952,    -1,    -1,    96,   948,   219,
    1371,   950,   350,  1364,   648,   611,   964,   612,   953,    -1,
      -1,    96,   949,   219,  1371,   950,   350,  1364,   649,   611,
     964,   612,   954,    -1,    -1,    96,   104,   873,  1371,   650,
     867,    -1,    -1,    96,   651,  1465,    -1,    96,   566,   668,
    1427,    -1,    96,   266,   196,   770,    -1,    96,   516,   767,
      -1,    96,   652,    -1,   457,  1373,   181,   107,   593,  1373,
     355,   611,   653,   612,    -1,   654,    -1,   653,   613,   654,
      -1,   566,  1368,    -1,   205,  1368,    -1,   104,  1368,    -1,
     365,  1368,    -1,   374,  1368,    -1,   473,  1368,    -1,   380,
    1199,    -1,    -1,  1078,   161,   873,   669,   656,   350,   446,
     657,   662,   659,   664,   137,   665,    -1,    -1,   162,  1082,
    1171,   658,   660,   661,    -1,    22,  1082,    -1,    -1,   146,
      -1,   131,   350,   469,    -1,   131,    -1,    -1,   493,  1082,
      -1,    -1,   149,  1082,    -1,    -1,   663,    -1,   350,    79,
     384,    -1,   350,    79,   339,   384,    -1,    -1,    75,  1368,
      -1,    -1,   666,   667,    -1,   716,    -1,   718,    -1,   714,
      -1,   735,    -1,   753,    -1,   755,    -1,   750,    -1,   720,
      -1,   722,    -1,   723,    -1,   724,    -1,   725,    -1,   727,
      -1,    -1,  1371,   619,  1371,    -1,  1371,    -1,    -1,   670,
     672,    -1,    -1,   671,   673,    -1,    75,  1368,    -1,   245,
     489,    -1,   341,   489,    -1,    89,   489,    -1,   400,   489,
     107,    -1,   316,   489,   107,    -1,   674,    -1,   672,    -1,
     129,    -1,  1088,   129,    -1,   489,   450,   122,    -1,   489,
     450,   232,    -1,    -1,    49,   669,   676,   677,    -1,    -1,
     611,   678,   612,    -1,    -1,   679,    -1,   679,   613,  1082,
      -1,  1082,    -1,    -1,   681,    -1,   681,   613,   683,    -1,
     683,    -1,    -1,  1371,   682,   919,    -1,    -1,   685,    -1,
     685,   613,   686,    -1,   686,    -1,   687,   682,  1371,   919,
      -1,    -1,   233,    -1,   364,    -1,   224,    -1,    -1,   688,
     713,   617,    -1,   713,   617,    -1,   689,   713,   617,    -1,
      -1,   690,   691,   617,    -1,    -1,   120,   711,   692,   919,
     712,    -1,   120,  1371,    82,   182,   699,    -1,    -1,   120,
     696,   199,   182,   693,   697,   713,    -1,   120,  1371,   101,
     182,   694,    -1,    -1,   695,  1061,    -1,   165,    -1,    91,
      -1,   698,    -1,   697,   613,   698,    -1,   702,    -1,  1199,
      -1,   700,    -1,   480,   701,  1369,    -1,    -1,   575,    -1,
     699,    -1,  1371,    -1,   481,    -1,  1088,   183,    -1,   479,
      -1,   466,   704,   706,    -1,  1371,    -1,   700,    -1,    -1,
     704,    -1,    -1,   459,   707,    -1,   709,   154,   708,    -1,
     707,   613,   709,   154,   708,    -1,  1355,    -1,  1109,    -1,
    1360,    -1,    64,    -1,   503,    -1,    86,    -1,    88,    -1,
      87,    -1,    54,    -1,   447,    -1,   521,    -1,    74,    -1,
     102,    -1,   307,    -1,   324,    -1,   429,   705,   706,    -1,
    1371,    -1,   711,   613,  1371,    -1,    -1,   121,  1082,    -1,
     716,    -1,   718,    -1,   714,    -1,   735,    -1,   753,    -1,
     755,    -1,   750,    -1,   720,    -1,   722,    -1,   723,    -1,
     724,    -1,   725,    -1,   727,    -1,    -1,   214,   715,   730,
     148,   214,    -1,    -1,   717,   626,    -1,    -1,   435,   719,
    1082,    -1,    -1,   721,   759,    -1,   250,  1372,    -1,   239,
    1372,    -1,   353,  1371,    -1,    -1,   173,   728,  1371,   230,
     726,   729,    -1,    67,  1371,    -1,    -1,   335,   184,    -1,
     184,    -1,  1371,    -1,   729,   613,  1371,    -1,    -1,    -1,
      -1,   731,  1082,   528,   732,   689,   733,   734,    -1,    -1,
     145,   730,    -1,   144,   689,    -1,   736,    -1,   739,    -1,
      -1,    -1,    52,   737,  1082,   738,   741,   749,   148,    52,
      -1,    -1,    52,   740,   742,   749,   148,    52,    -1,   743,
      -1,   741,   743,    -1,   746,    -1,   742,   746,    -1,    -1,
      -1,   586,   744,  1082,   745,   528,   689,    -1,    -1,    -1,
     586,   747,  1082,   748,   528,   689,    -1,    -1,   144,   689,
      -1,    -1,  1372,   620,   751,   759,   752,    -1,    -1,  1372,
      -1,    -1,  1372,   620,   754,   757,   752,    -1,    -1,   756,
     757,    -1,    -1,    30,   758,   690,   688,   148,    -1,   272,
     689,   148,   272,    -1,    -1,    -1,   588,   760,  1082,   137,
     761,   689,   148,   588,    -1,    -1,   424,   689,   562,   762,
    1082,   148,   424,    -1,    29,    -1,     8,    -1,   226,    -1,
     563,    -1,   125,    -1,   792,   794,    -1,   792,    56,   789,
     773,    -1,   792,     6,   789,   768,   777,    -1,    -1,   569,
     266,   196,  1371,    -1,   792,     6,   789,   780,    -1,   792,
     138,   789,   780,    -1,   793,   772,   783,    -1,   793,   772,
     786,    -1,     6,   790,    -1,     6,   791,    -1,    -1,   774,
     775,    -1,   776,    -1,   775,   776,    -1,   775,   613,   776,
      -1,   795,    -1,   796,    -1,   797,    -1,   778,    -1,   779,
      -1,   778,   779,    -1,   778,   613,   779,    -1,   795,    -1,
     796,    -1,   797,    -1,   798,    -1,   801,    -1,   803,    -1,
     805,    -1,   802,    -1,   781,    -1,   782,    -1,   781,   782,
      -1,   781,   613,   782,    -1,   795,    -1,   796,    -1,   797,
      -1,   803,    -1,   805,    -1,   784,    -1,   785,    -1,   784,
     785,    -1,   784,   613,   785,    -1,   795,    -1,   799,    -1,
     800,    -1,   801,    -1,   803,    -1,   805,    -1,   802,    -1,
     787,    -1,   788,    -1,   787,   788,    -1,   787,   613,   788,
      -1,   795,    -1,   803,    -1,   805,    -1,   106,  1368,    -1,
     552,  1368,    -1,   407,  1368,    -1,  1371,    -1,  1371,    -1,
     401,    -1,   403,    -1,   339,     4,    -1,   222,  1251,   806,
      -1,    24,  1251,   806,    -1,   296,  1251,   806,    -1,   168,
    1251,   806,    -1,   553,  1251,   806,    -1,   408,  1251,   806,
      -1,   336,  1251,  1200,    -1,    75,  1251,  1368,    -1,  1292,
     152,  1251,   881,    -1,    -1,   805,    -1,   583,    -1,   342,
      -1,  1202,    -1,  1367,    -1,   611,   808,    -1,   874,   813,
     810,    -1,   255,  1364,    -1,   611,   255,  1364,   612,    -1,
     887,   612,   874,   813,   810,    -1,    -1,   813,   863,   612,
     809,  1450,    -1,    -1,    -1,  1335,   866,   863,   811,  1447,
      -1,    -1,  1335,   866,   611,   863,   612,   812,  1450,    -1,
     814,    -1,    -1,   815,    -1,    -1,   373,   817,   816,   820,
      -1,    -1,    -1,   373,   819,   820,    -1,    46,   821,   831,
     832,   839,    -1,   823,   243,   824,   611,   825,   612,    -1,
      -1,   823,   200,   822,   829,    -1,   399,   829,    -1,   399,
     828,    -1,   260,   829,    -1,   260,   828,    -1,    -1,   257,
      -1,    -1,    11,   154,  1200,    -1,    -1,   826,    -1,   827,
      -1,   826,   613,   827,    -1,  1371,    -1,    72,   611,   825,
     612,    -1,   611,  1078,   837,  1079,   612,    -1,   611,  1078,
     837,  1079,   612,    -1,    -1,   372,  1200,    -1,    -1,    -1,
     507,    46,   823,   200,   830,   833,   838,    -1,    -1,   507,
      46,   823,   243,   824,   611,   835,   612,   834,   838,    -1,
     836,    -1,   835,   613,   836,    -1,  1371,    -1,  1085,    -1,
      -1,   506,  1200,    -1,    -1,   611,   840,   612,    -1,   841,
      -1,   840,   613,   841,    -1,    -1,   373,   842,   843,   844,
     860,   855,    -1,  1371,    -1,    -1,    -1,   574,   252,   527,
     845,   847,    -1,    -1,   574,   233,   846,   848,    -1,   300,
      -1,   850,    -1,   850,    -1,   611,   849,   612,    -1,   850,
      -1,   849,   613,   850,    -1,    -1,    -1,   611,   851,   853,
     852,   612,    -1,   854,    -1,   853,   613,   854,    -1,   300,
      -1,  1085,    -1,    -1,   611,   856,   612,    -1,   857,    -1,
     856,   613,   857,    -1,    -1,   507,   858,   859,   860,    -1,
    1373,    -1,    -1,   861,    -1,   861,   862,    -1,   862,    -1,
     516,  1251,  1373,    -1,  1292,   152,  1251,   881,    -1,   336,
    1251,  1200,    -1,   295,  1251,  1202,    -1,   313,  1251,  1202,
      -1,   107,   130,  1251,  1368,    -1,   219,   130,  1251,  1368,
      -1,    75,  1251,  1368,    -1,    -1,    -1,   451,   864,  1072,
    1076,   865,   885,    -1,    -1,    18,    -1,    -1,   868,    -1,
     869,    -1,   868,   869,    -1,   880,    -1,   879,    -1,    -1,
     871,    -1,   872,    -1,   872,   871,    -1,   522,    -1,    -1,
     214,  1088,   164,    -1,    -1,   876,    -1,   877,    -1,   877,
     875,    -1,   877,    -1,   877,   876,    -1,   877,   613,   876,
      -1,   152,  1251,   881,    -1,   295,  1251,  1201,    -1,   313,
    1251,  1201,    -1,    26,  1251,  1199,    -1,   374,  1251,  1368,
      -1,    75,  1251,  1368,    -1,    25,  1251,  1201,    -1,   366,
    1251,  1199,    -1,   366,  1251,   121,    -1,    61,  1251,  1199,
      -1,   520,  1251,  1199,    -1,   124,  1251,  1199,    -1,   442,
    1251,   883,    -1,    -1,   557,  1251,   878,   611,  1313,   612,
      -1,   879,    -1,   880,    -1,   227,  1251,   884,    -1,   107,
     130,  1251,  1368,    -1,   219,   130,  1251,  1368,    -1,   516,
    1371,    -1,   500,   133,    -1,   500,   305,    -1,    83,  1251,
    1368,    -1,   242,  1251,  1199,    -1,   930,   921,  1251,   923,
      -1,   930,    70,  1251,   929,    -1,  1373,    -1,  1373,    -1,
     121,    -1,   176,    -1,   142,    -1,    80,    -1,   409,    -1,
      78,    -1,   341,    -1,   175,    -1,   246,    -1,  1194,    -1,
    1071,  1075,    -1,   502,    -1,   404,    -1,   119,    -1,   231,
      -1,   888,    -1,   889,    -1,   888,   613,   889,    -1,   890,
      -1,   891,    -1,   896,   892,    -1,   896,   936,    -1,   942,
     966,   951,   611,   964,   612,   952,    -1,   948,   945,   966,
     950,   611,   964,   612,   953,    -1,   949,   945,   966,   950,
     611,   964,   612,   954,    -1,   894,   943,   966,   951,   611,
     964,   612,   952,    -1,   894,   181,   243,   966,   611,   964,
     612,   936,    -1,   894,   893,    -1,    -1,   893,    -1,    62,
     611,  1082,   612,    -1,    -1,   895,    -1,    85,   966,    -1,
      -1,  1363,   897,   898,   916,    -1,   906,   914,   910,    -1,
     907,   915,   910,    -1,   178,   908,   910,    -1,    38,    -1,
      38,   913,    -1,    43,    -1,    42,    -1,   902,   913,   933,
      -1,   902,   933,    -1,   903,   913,   934,    -1,   903,   934,
      -1,    33,   913,    -1,    33,    -1,   904,   913,   933,    -1,
     905,   913,   934,    -1,   576,   913,    -1,   600,   914,   910,
      -1,   111,    -1,   533,    -1,   530,    -1,   108,    -1,   534,
      -1,    40,   914,    -1,   901,    -1,   301,    -1,   268,    -1,
     271,   576,    -1,   271,   904,   933,    -1,   536,   933,    -1,
     526,   914,   933,    -1,   303,   933,    -1,   269,   933,    -1,
     119,   908,   910,    -1,   346,   908,   910,    -1,   176,   908,
     910,    -1,    -1,   153,   899,   611,   968,   612,   933,    -1,
      -1,   459,   900,   611,   968,   612,   933,    -1,   271,   933,
      -1,   455,    -1,   191,    -1,   190,    -1,   378,    -1,   321,
      -1,   259,    -1,   320,    -1,   379,    -1,   322,    -1,    60,
      -1,   330,    -1,   327,    60,    -1,   902,   580,    -1,   577,
      -1,   327,   577,    -1,   347,    -1,   330,   577,    -1,   327,
      60,   580,    -1,   330,   580,    -1,   231,    -1,   535,    -1,
     471,    -1,   302,    -1,    32,    -1,   404,    -1,   136,    -1,
     136,   382,    -1,    -1,   913,    -1,   909,    -1,   611,   345,
     613,   345,   612,    -1,    -1,   911,    -1,   911,   912,    -1,
     912,    -1,   467,    -1,   561,    -1,   601,    -1,   611,   270,
     612,    -1,   611,   548,   612,    -1,   611,   118,   612,    -1,
     611,   345,   612,    -1,    -1,   913,    -1,    -1,   909,    -1,
      -1,   917,    -1,   917,   918,    -1,   918,    -1,   344,    -1,
    1088,   344,    -1,   121,   920,    -1,   350,   563,   340,  1081,
      -1,    25,    -1,   455,   121,   575,    -1,   935,   243,    -1,
     558,    -1,   558,   243,    -1,    75,  1368,    -1,    70,   927,
      -1,   898,   928,    -1,   340,  1081,    -1,  1354,    -1,    60,
     459,    -1,    59,    -1,  1373,    -1,    33,    -1,   922,    -1,
     121,    -1,    -1,   921,   923,    -1,  1373,    -1,    33,    -1,
     925,    -1,   121,    -1,  1373,    -1,    -1,    70,   929,    -1,
     927,    -1,   121,    -1,    -1,   121,    -1,    20,    -1,    33,
      20,    -1,    20,    33,    -1,   555,    -1,   555,    33,    -1,
      33,   555,    -1,    -1,   931,    -1,   932,    -1,    47,    -1,
     921,   922,   934,    -1,    33,    -1,    33,   921,   922,    -1,
      -1,    33,    -1,    -1,   386,    -1,   410,  1364,   937,   939,
     940,    -1,    -1,   611,   938,   612,    -1,   938,   613,  1371,
      -1,  1371,    -1,    -1,   292,   185,    -1,   292,   370,    -1,
     292,   468,    -1,    -1,   350,   563,   941,    -1,   350,   125,
     941,    -1,   350,   563,   941,   350,   125,   941,    -1,   350,
     125,   941,   350,   563,   941,    -1,   432,    -1,    50,    -1,
     459,   344,    -1,   341,     5,    -1,   459,   121,    -1,   944,
      -1,   386,   243,    -1,   558,   945,    -1,   243,    -1,   219,
      -1,    -1,   944,    -1,   241,    -1,   219,    -1,   218,    -1,
      -1,   558,    -1,   186,    -1,   477,    -1,    -1,   950,    -1,
     950,   958,    -1,    -1,   955,    -1,    -1,   957,    -1,    -1,
     956,    -1,   960,    -1,   955,   960,    -1,   961,    -1,   956,
     961,    -1,   962,    -1,   957,   962,    -1,   570,   963,    -1,
     546,   963,    -1,   242,  1251,  1199,    -1,    75,  1368,    -1,
     959,    -1,   958,    -1,   959,    -1,   959,    -1,   589,   369,
    1367,    -1,    45,    -1,   444,    -1,   200,    -1,   964,   613,
     965,  1192,    -1,   965,  1192,    -1,  1371,    -1,  1371,   611,
     345,   612,    -1,    -1,  1363,    -1,    -1,   619,  1371,    -1,
    1352,    -1,   968,   613,  1352,    -1,    -1,    13,  1003,   518,
    1364,   970,   981,    -1,    -1,    13,   104,   980,   971,   868,
      -1,    13,   104,  1371,   564,   107,   130,   326,    -1,    -1,
      13,   388,   669,   972,   670,    -1,    -1,    13,   187,   669,
     973,   670,    -1,    -1,    13,  1473,  1468,   974,  1475,    -1,
      -1,    13,  1468,   975,  1475,    -1,    -1,    13,  1468,  1078,
     161,   669,   976,   977,   978,   659,   664,   979,    -1,    13,
     516,   769,    -1,    13,   266,   196,   771,    -1,    13,   516,
     766,    -1,    13,   516,   765,    -1,    13,   457,  1373,   355,
     611,   653,   612,    -1,    -1,   350,   446,   657,    -1,   663,
      -1,   350,   446,   657,   663,    -1,    -1,   420,   537,   669,
      -1,    -1,   137,   665,    -1,    -1,  1371,    -1,    -1,   132,
     516,    -1,   217,   516,    -1,   996,   814,    -1,   996,   985,
      -1,   985,    -1,   815,    -1,   987,    -1,   138,   373,   994,
      -1,   405,   373,  1036,   986,    -1,    -1,   354,   373,  1036,
     986,   982,  1036,    -1,    14,   373,  1036,   986,    -1,    -1,
      62,   373,   986,   983,  1031,    -1,    -1,   422,   373,  1036,
     986,   984,  1023,    -1,    68,   373,  1036,  1200,    -1,   544,
     373,   986,    -1,   990,    -1,   419,   371,    -1,    12,    -1,
     994,    -1,    -1,     6,   373,  1036,   988,   989,    -1,    -1,
     611,   840,   612,    -1,   372,  1200,    -1,    -1,   421,   373,
    1036,   991,   992,    -1,    -1,    -1,   994,   993,   230,   611,
     840,   612,    -1,   995,    -1,   994,   613,   995,    -1,  1371,
      -1,   998,    -1,   996,   613,   998,    -1,     6,  1002,    -1,
     997,   890,  1005,    -1,     6,   891,    -1,   997,   611,   887,
     612,    -1,    -1,    56,  1002,  1363,   999,   896,  1005,    -1,
      -1,    -1,   317,  1002,  1363,  1000,   898,   916,  1001,  1005,
      -1,   138,  1002,  1363,  1004,    -1,   138,   181,   243,   966,
      -1,   138,   386,   243,    -1,   138,   944,  1363,    -1,   131,
     241,    -1,   146,   241,    -1,    13,  1002,  1363,   459,   121,
    1354,    -1,    13,  1002,  1363,   138,   121,    -1,   420,  1006,
    1364,    -1,    93,   537,   921,   923,   928,    -1,   875,    -1,
     180,    -1,  1185,    -1,    -1,    73,    -1,    -1,   215,    -1,
      -1,   432,    -1,    50,    -1,    -1,     8,  1371,    -1,   175,
      -1,    -1,   537,    -1,   154,    -1,    18,    -1,    -1,   494,
     469,  1012,  1008,  1016,    -1,   499,   469,  1012,    -1,    -1,
     469,   494,  1012,  1009,  1016,    -1,   469,   499,  1012,    -1,
     494,   539,  1011,    -1,    -1,   589,    84,   472,    -1,    -1,
    1013,  1014,    -1,  1015,    -1,  1014,   613,  1015,    -1,    -1,
     490,    -1,   416,    -1,    -1,   562,  1017,    -1,   644,    -1,
    1017,   613,   644,    -1,    -1,    61,  1396,  1019,  1225,  1020,
      -1,    -1,   398,    -1,   167,    -1,    -1,   422,  1036,  1396,
    1022,  1225,  1023,    -1,    -1,  1024,    -1,  1025,    -1,  1025,
    1024,    -1,   398,    -1,   167,    -1,   568,    -1,    -1,    14,
    1036,  1396,  1027,  1225,    -1,    34,  1368,    -1,    -1,    62,
    1396,  1030,  1225,  1031,    -1,    -1,  1032,    -1,  1033,    -1,
    1033,  1032,    -1,   398,    -1,   171,    -1,   304,    -1,   167,
      -1,    57,    -1,   182,   564,    -1,    -1,   354,  1036,  1396,
    1035,  1225,    -1,    -1,   343,    -1,   262,    -1,    -1,   420,
    1396,  1038,  1040,    -1,   420,   566,   668,  1039,    -1,  1374,
     537,  1374,    -1,  1039,   613,  1374,   537,  1374,    -1,  1041,
      -1,  1040,   613,  1041,    -1,  1364,   537,  1364,    -1,    -1,
      48,   219,  1043,  1044,   233,  1048,    -1,  1045,    -1,  1047,
      -1,  1046,    -1,  1045,   613,  1046,    -1,  1364,  1057,    -1,
    1364,  1055,  1057,    -1,  1371,    -1,   121,    -1,    -1,   261,
     219,   230,    48,  1050,  1051,    -1,  1054,    -1,  1052,    -1,
    1053,    -1,  1052,   613,  1053,    -1,  1364,  1057,  1060,    -1,
    1364,  1055,  1057,  1060,    -1,    -1,   373,   817,  1056,   611,
     986,   612,    -1,    -1,  1058,  1059,    -1,    -1,   944,   611,
    1167,   612,    -1,    -1,   215,   249,    -1,  1062,    -1,   451,
    1065,    -1,   611,  1063,   612,  1450,    -1,   451,  1067,    -1,
     611,  1063,   612,    -1,   451,  1146,    -1,   611,  1064,   612,
      -1,    -1,  1067,  1066,  1447,    -1,    -1,    -1,  1068,  1072,
    1076,  1069,  1070,  1075,    -1,  1188,  1194,    -1,  1214,    -1,
    1071,    -1,  1214,  1071,    -1,  1071,  1214,    -1,   184,  1128,
    1177,  1182,  1179,  1188,  1194,  1205,    -1,   184,   139,  1177,
    1194,    -1,    -1,  1073,    -1,  1073,  1074,    -1,  1074,    -1,
    1464,    -1,   486,    -1,   487,    -1,   484,    -1,    -1,   182,
     563,    -1,   265,   233,   461,   315,    -1,  1076,   613,  1077,
      -1,  1077,    -1,   606,    -1,  1078,  1358,  1079,    -1,  1078,
    1082,  1079,  1080,    -1,    -1,    -1,    -1,    18,  1371,    -1,
      18,  1368,    -1,  1371,    -1,  1368,    -1,    -1,   611,   612,
      -1,  1082,  1086,  1082,    -1,  1082,   598,  1082,    -1,  1082,
    1087,  1082,    -1,   339,  1082,    -1,  1083,   236,   543,    -1,
    1083,   236,  1088,   543,    -1,  1083,   236,   170,    -1,  1083,
     236,  1088,   170,    -1,  1083,   236,   559,    -1,  1083,   236,
    1088,   559,    -1,  1083,    -1,  1083,   236,   344,    -1,  1083,
     236,  1088,   344,    -1,  1083,   155,  1084,    -1,  1083,  1090,
    1084,    -1,  1083,  1090,  1091,   611,  1459,   612,    -1,  1084,
      -1,  1085,   233,   611,  1459,   612,    -1,  1085,  1088,   233,
     611,  1459,   612,    -1,  1085,   233,   611,  1082,   612,    -1,
    1085,   233,   611,  1082,   613,  1121,   612,    -1,  1085,  1088,
     233,   611,  1082,   612,    -1,  1085,  1088,   233,   611,  1082,
     613,  1121,   612,    -1,  1085,    31,  1085,    16,  1084,    -1,
    1085,  1088,    31,  1085,    16,  1084,    -1,  1085,   475,   255,
    1085,    -1,  1085,   255,  1092,  1181,    -1,  1085,  1088,   255,
    1092,  1181,    -1,  1085,   411,  1085,    -1,  1085,  1088,   411,
    1085,    -1,  1085,    -1,  1085,   602,  1085,    -1,  1085,   603,
    1085,    -1,  1085,   462,  1085,    -1,  1085,   463,  1085,    -1,
    1085,   605,  1085,    -1,  1085,   604,  1085,    -1,  1085,   605,
     229,  1082,  1171,    -1,  1085,   604,   229,  1082,  1171,    -1,
    1085,   606,  1085,    -1,  1085,   607,  1085,    -1,  1085,   608,
    1085,    -1,  1085,   135,  1085,    -1,  1085,   318,  1085,    -1,
    1085,   609,  1085,    -1,  1092,    -1,   361,    -1,   358,    -1,
      16,    -1,    15,    -1,   339,    -1,   338,    -1,   614,    -1,
     338,    -1,   154,    -1,   188,    -1,   198,    -1,   247,    -1,
     274,    -1,   332,    -1,    12,    -1,    17,    -1,  1360,    -1,
    1093,    -1,  1094,    -1,  1097,    -1,  1095,    -1,  1092,    70,
    1373,    -1,  1355,    -1,  1353,    -1,  1109,    -1,  1105,    -1,
    1092,   360,  1092,    -1,   605,  1092,    -1,   604,  1092,    -1,
     610,  1092,    -1,  1089,  1092,    -1,   611,  1459,   612,    -1,
     611,  1082,   612,    -1,   611,  1082,   613,  1121,   612,    -1,
     443,   611,  1082,   613,  1121,   612,    -1,   164,   611,  1459,
     612,    -1,   615,  1371,  1082,   616,    -1,   292,  1122,     9,
     611,  1085,  1099,   612,    -1,    33,  1092,    -1,    53,   611,
    1082,    18,  1119,   612,    -1,    52,  1124,  1126,  1125,   148,
      -1,    93,   611,  1082,   613,  1119,   612,    -1,    93,   611,
    1082,   570,   922,   612,    -1,   121,   611,  1360,   612,    -1,
     574,   611,  1361,   612,    -1,   229,  1082,  1171,   605,  1082,
      -1,    60,   611,  1121,   612,    -1,    60,   611,  1121,   570,
     922,   612,    -1,   100,  1081,    -1,   111,   611,  1082,   612,
      -1,   116,   611,  1082,   612,    -1,   210,   611,  1082,   612,
      -1,   226,   611,  1082,   613,  1082,   613,  1082,   613,  1082,
     612,    -1,   229,   611,  1082,   613,  1082,   612,    -1,   229,
     611,  1082,   613,  1082,   613,  1121,   612,    -1,   251,   611,
    1082,   613,  1082,   612,    -1,   312,   611,  1082,   612,    -1,
     319,   611,  1082,   612,    -1,   437,   611,  1082,   613,  1082,
     612,    -1,   449,   611,  1082,   612,    -1,   533,   611,  1082,
     612,    -1,   530,   611,  1082,   612,    -1,   530,   611,  1082,
     613,  1082,   612,    -1,   542,   611,  1082,   612,    -1,   542,
     611,   248,  1082,   184,  1082,   612,    -1,   542,   611,   538,
    1082,   184,  1082,   612,    -1,   542,   611,    44,  1082,   184,
    1082,   612,    -1,   542,   611,   248,   184,  1082,   612,    -1,
     542,   611,   538,   184,  1082,   612,    -1,   542,   611,    44,
     184,  1082,   612,    -1,   542,   611,  1082,   184,  1082,   612,
      -1,   566,   611,   612,    -1,   600,   611,  1082,   612,    -1,
       7,   611,  1082,   613,  1082,   612,    -1,     7,   611,  1082,
     613,   229,  1082,  1171,   612,    -1,    99,  1081,    -1,   103,
    1081,    -1,   103,   611,  1082,   612,    -1,   109,   611,  1082,
     613,   229,  1082,  1171,   612,    -1,   110,   611,  1082,   613,
     229,  1082,  1171,   612,    -1,   169,   611,  1171,   184,  1082,
     612,    -1,   192,   611,  1173,   613,  1082,   612,    -1,   340,
    1081,    -1,   340,   611,  1082,   612,    -1,   381,   611,  1085,
     233,  1082,   612,    -1,   504,   611,  1082,   613,  1082,   612,
      -1,   504,   611,  1082,   613,   229,  1082,  1171,   612,    -1,
     508,   611,  1082,   613,  1082,   613,  1082,   612,    -1,   508,
     611,  1082,   613,  1082,   612,    -1,   508,   611,  1082,   184,
    1082,   182,  1082,   612,    -1,   508,   611,  1082,   184,  1082,
     612,    -1,   514,  1081,    -1,   514,   611,  1082,   612,    -1,
     531,   611,  1172,   613,  1082,   613,  1082,   612,    -1,   532,
     611,  1172,   613,  1082,   613,  1082,   612,    -1,   571,  1081,
      -1,   573,  1081,    -1,   572,  1081,    -1,    20,   611,  1082,
     612,    -1,    59,   611,  1082,   612,    -1,    68,   611,  1121,
     612,    -1,    71,   611,  1082,   612,    -1,   104,   611,   612,
      -1,   214,   611,  1082,   613,  1082,   613,  1082,   612,    -1,
     308,   611,  1082,   612,    -1,   318,   611,  1082,   613,  1082,
     612,    -1,   349,   611,  1082,   612,    -1,   374,   611,  1082,
     612,    -1,   395,   611,  1082,   612,    -1,   424,   611,  1082,
     613,  1082,   612,    -1,   425,   611,  1082,   613,  1082,   613,
    1082,   612,    -1,   544,   611,  1082,   613,  1082,   612,    -1,
     585,   611,  1082,   612,    -1,   585,   611,  1082,   613,  1082,
     612,    -1,  1096,    -1,    89,   611,  1082,   613,  1082,   612,
      -1,   190,   611,  1121,   612,    -1,   259,   611,  1121,   612,
      -1,   320,   611,  1121,   612,    -1,   321,   611,  1121,   612,
      -1,   322,   611,  1121,   612,    -1,   378,   611,  1082,   613,
    1082,   612,    -1,   379,   611,  1121,   612,    -1,    -1,  1367,
     611,  1098,  1102,   612,    -1,  1371,   619,  1371,   611,  1120,
     612,    -1,  1100,  1101,    -1,   233,    42,   315,    -1,    -1,
     233,   328,   245,   315,    -1,    -1,   589,   396,   166,    -1,
      -1,  1103,    -1,  1104,    -1,  1103,   613,  1104,    -1,  1078,
    1082,  1079,  1080,    -1,    27,   611,  1117,   612,    -1,    27,
     611,   134,  1117,   612,    -1,    36,   611,  1117,   612,    -1,
      37,   611,  1117,   612,    -1,    39,   611,  1117,   612,    -1,
      94,   611,  1176,   606,   612,    -1,    94,   611,  1117,   612,
      -1,    -1,    -1,    94,   611,   134,  1106,  1121,  1107,   612,
      -1,   314,   611,  1117,   612,    -1,   314,   611,   134,  1117,
     612,    -1,   297,   611,  1117,   612,    -1,   297,   611,   134,
    1117,   612,    -1,   498,   611,  1117,   612,    -1,   579,   611,
    1117,   612,    -1,   497,   611,  1117,   612,    -1,   581,   611,
    1117,   612,    -1,   509,   611,  1117,   612,    -1,   509,   611,
     134,  1117,   612,    -1,    -1,   197,   611,  1112,  1108,  1121,
    1114,  1113,   612,    -1,    -1,   618,  1110,  1111,    -1,  1373,
     460,  1082,    -1,  1373,    -1,   618,  1386,  1373,   967,    -1,
      -1,   134,    -1,    -1,   453,  1352,    -1,    -1,    -1,   359,
      46,  1115,  1116,    -1,  1116,   613,  1359,  1192,    -1,  1359,
    1192,    -1,    -1,  1176,  1118,  1082,    -1,    33,   914,    -1,
      60,   914,   933,    -1,   330,   914,    -1,   467,    -1,   467,
     231,    -1,   561,    -1,   561,   231,    -1,   111,    -1,   533,
      -1,   108,    -1,   119,   908,    -1,    -1,  1121,    -1,  1082,
      -1,  1121,   613,  1082,    -1,  1123,    -1,   611,  1123,   612,
      -1,  1360,    -1,  1123,   613,  1360,    -1,    -1,  1082,    -1,
      -1,   144,  1082,    -1,   586,  1082,   528,  1082,    -1,  1126,
     586,  1082,   528,  1082,    -1,  1140,    -1,  1131,    -1,  1130,
      -1,  1127,    -1,   615,  1371,  1127,   616,    -1,  1129,    -1,
    1130,   613,  1129,    -1,  1127,  1139,  1127,    -1,  1127,   501,
    1140,    -1,    -1,  1127,  1139,  1127,   350,  1132,  1082,    -1,
      -1,  1127,   501,  1140,   350,  1133,  1082,    -1,    -1,  1127,
    1139,  1127,   570,  1134,   611,  1170,   612,    -1,  1127,   328,
     240,  1140,    -1,    -1,  1127,   251,  1156,   240,  1127,   350,
    1135,  1082,    -1,    -1,  1127,   251,  1156,   240,  1140,  1136,
     570,   611,  1170,   612,    -1,  1127,   328,   251,  1156,   240,
    1140,    -1,    -1,  1127,   437,  1156,   240,  1127,   350,  1137,
    1082,    -1,    -1,  1127,   437,  1156,   240,  1140,  1138,   570,
     611,  1170,   612,    -1,  1127,   328,   437,  1156,   240,  1140,
      -1,   240,    -1,   223,   240,    -1,    97,   240,    -1,    -1,
    1141,  1364,  1175,  1165,    -1,  1155,  1154,  1151,    -1,   611,
    1154,  1142,   612,  1175,    -1,  1149,  1451,    -1,    -1,    -1,
    1142,   557,  1455,  1143,  1456,  1144,  1451,    -1,  1146,    -1,
      -1,    -1,  1147,  1462,  1076,  1148,   885,  1075,    -1,    -1,
    1154,  1150,  1130,    -1,    -1,    -1,  1152,  1072,  1076,  1153,
     885,    -1,    -1,   451,    -1,    -1,   362,    -1,    -1,   182,
     240,    -1,   182,   359,    46,    -1,   182,   196,    46,    -1,
     180,    -1,   215,    -1,    -1,  1158,   944,  1157,  1160,   611,
    1169,   612,    -1,    -1,   569,   944,  1157,  1161,   611,  1167,
     612,    -1,  1159,    -1,  1162,  1159,    -1,    -1,    -1,  1164,
    1162,    -1,    -1,  1166,  1163,    -1,    -1,  1169,    -1,  1371,
      -1,   386,    -1,  1168,    -1,  1169,   613,  1168,    -1,  1371,
      -1,  1170,   613,  1371,    -1,  1172,    -1,   112,    -1,   113,
      -1,   114,    -1,   115,    -1,   207,    -1,   208,    -1,   209,
      -1,   310,    -1,   311,    -1,   448,    -1,   599,    -1,   116,
      -1,   585,    -1,   210,    -1,   312,    -1,   319,    -1,   395,
      -1,   449,    -1,   308,    -1,   600,    -1,   111,    -1,   533,
      -1,   108,    -1,   530,    -1,    -1,    18,    -1,   154,    -1,
      -1,  1174,  1371,    -1,    -1,    12,    -1,    -1,    -1,   587,
    1178,  1082,    -1,    -1,    -1,   201,  1180,  1082,    -1,   159,
    1092,    -1,    -1,    -1,   196,    46,  1183,  1184,    -1,  1183,
     613,  1359,  1192,    -1,  1359,  1192,    -1,    -1,   590,    -1,
     591,    -1,   359,    46,  1186,    -1,  1186,   613,  1187,    -1,
    1187,    -1,  1361,  1192,    -1,    -1,  1189,    -1,    -1,   359,
      46,  1190,  1191,    -1,  1191,   613,  1359,  1192,    -1,  1359,
    1192,    -1,    -1,    19,    -1,   126,    -1,    -1,  1195,    -1,
      -1,  1195,    -1,   256,  1196,    -1,  1197,    -1,  1197,   613,
    1197,    -1,  1197,   348,  1197,    -1,  1371,    -1,  1353,    -1,
     548,    -1,   270,    -1,   345,    -1,    -1,   256,  1197,    -1,
     345,    -1,   203,    -1,   270,    -1,   548,    -1,   118,    -1,
     177,    -1,   345,    -1,   203,    -1,   270,    -1,   548,    -1,
    1203,    -1,   345,    -1,   548,    -1,   270,    -1,   118,    -1,
     177,    -1,   345,    -1,   548,    -1,   270,    -1,  1203,    -1,
    1204,    -1,   118,    -1,   177,    -1,    -1,    -1,   388,  1371,
    1206,   611,  1207,   612,    -1,    -1,  1208,    -1,  1208,   613,
    1209,    -1,  1209,    -1,  1078,  1082,  1079,    -1,    -1,  1211,
    1212,    -1,  1212,   613,  1213,    -1,  1213,    -1,   618,  1373,
      -1,  1373,    -1,    -1,   230,  1215,  1216,    -1,    -1,    -1,
     363,  1370,  1217,   924,  1218,  1336,  1339,    -1,   140,  1370,
      -1,  1210,    -1,    -1,   137,  1220,  1121,    -1,    -1,   138,
    1230,  1396,  1229,  1222,  1225,  1004,    -1,    -1,   138,   219,
    1371,   350,  1364,  1223,    -1,   138,   104,  1229,  1371,    -1,
     138,   187,  1229,  1371,   619,  1371,    -1,   138,   187,  1229,
    1371,    -1,   138,   388,  1229,   669,    -1,   138,   566,   668,
    1426,    -1,    -1,   138,   582,  1229,  1224,  1225,  1004,    -1,
     138,   161,  1229,   669,    -1,   138,   541,  1229,   669,    -1,
     138,   516,   792,   803,   804,    -1,   138,   266,   196,   793,
     803,   804,    -1,   138,   457,  1229,  1373,    -1,  1226,    -1,
    1225,   613,  1226,    -1,  1364,    -1,  1228,    -1,  1227,   613,
    1228,    -1,  1365,    -1,    -1,   214,   164,    -1,    -1,   522,
      -1,    -1,    -1,   226,  1232,  1237,  1003,  1239,  1233,  1241,
    1257,    -1,    -1,    -1,   425,  1235,  1238,  1239,  1236,  1241,
      -1,    -1,   273,    -1,   123,    -1,   204,    -1,  1266,    -1,
     123,    -1,   230,  1240,    -1,  1240,    -1,  1226,    -1,  1244,
      -1,   611,   612,  1244,    -1,   611,  1243,   612,  1244,    -1,
      -1,   459,  1242,  1248,    -1,  1243,   613,  1357,    -1,  1357,
      -1,   574,  1247,    -1,   575,  1247,    -1,    -1,   863,  1245,
    1447,    -1,    -1,   611,   863,   612,  1246,  1450,    -1,  1247,
     613,  1252,    -1,  1252,    -1,  1248,   613,  1249,    -1,  1249,
      -1,  1361,  1250,  1256,    -1,   154,    -1,   460,    -1,    -1,
    1250,    -1,    -1,   611,  1253,  1254,   612,    -1,    -1,  1255,
      -1,  1255,   613,  1256,    -1,  1256,    -1,  1082,    -1,   121,
      -1,    -1,    -1,   350,   141,  1258,   243,   563,  1264,    -1,
      -1,    -1,   563,  1260,  1266,  1003,  1128,   459,  1262,  1261,
    1177,  1188,  1198,    -1,  1262,   613,  1263,    -1,  1263,    -1,
    1361,  1250,  1256,    -1,  1264,   613,  1265,    -1,  1265,    -1,
    1361,  1250,  1256,    -1,    -1,   273,    -1,    -1,   125,  1268,
    1276,  1269,    -1,    -1,   184,  1364,  1270,  1177,  1188,  1198,
      -1,    -1,  1273,  1271,   184,  1128,  1177,    -1,    -1,   184,
    1227,  1272,   570,  1128,  1177,    -1,  1274,    -1,  1273,   613,
    1274,    -1,  1371,  1275,    -1,  1371,   619,  1371,  1275,    -1,
      -1,   619,   606,    -1,    -1,  1277,  1276,    -1,   398,    -1,
     273,    -1,   215,    -1,    -1,   544,  1280,  1279,  1226,    -1,
      -1,   518,    -1,    -1,  1282,    -1,  1283,    -1,  1282,   613,
    1283,    -1,    95,    -1,   305,    -1,    41,   234,    -1,    90,
     513,    -1,   367,   172,    -1,   235,    -1,   512,    -1,   476,
      -1,    12,    -1,    -1,   182,   396,   345,    -1,    -1,   464,
    1286,  1287,    -1,   105,  1298,    -1,  1294,   515,  1293,  1298,
      -1,  1385,   522,   515,  1293,    -1,  1294,   540,  1293,  1298,
      -1,   160,  1293,  1298,    -1,   518,   495,  1293,  1298,    -1,
     353,   515,  1293,  1298,    -1,   376,    -1,   152,   882,  1290,
      -1,   152,    12,  1290,    -1,  1294,    72,  1295,  1364,  1293,
    1298,    -1,  1291,   267,    -1,   469,   206,    -1,    -1,    34,
     160,  1296,  1297,  1288,  1193,    -1,    -1,   413,   160,  1296,
    1297,  1289,  1193,    -1,   946,  1295,  1364,  1293,  1177,    -1,
    1292,   151,    -1,    23,    -1,    92,    -1,   387,    -1,    94,
     611,   606,   612,   584,    -1,    94,   611,   606,   612,   157,
      -1,   584,  1193,    -1,   157,  1193,    -1,   392,    -1,   391,
    1281,  1284,  1193,    -1,  1385,   495,  1298,    -1,  1294,   390,
      -1,  1385,   578,  1298,    -1,   921,  1298,    -1,    71,  1298,
      -1,   195,    -1,   195,   182,  1374,    -1,    96,   104,   873,
    1371,    -1,    96,   518,  1364,    -1,    96,   582,  1364,    -1,
     289,   495,    -1,   469,   495,    -1,   469,   495,   496,    -1,
     397,  1298,    -1,    66,  1298,    -1,   567,  1298,    -1,   529,
    1298,    -1,   519,  1298,    -1,   220,  1298,    -1,    96,   388,
     669,    -1,    96,   187,   669,    -1,    96,   541,   669,    -1,
     388,   495,  1298,    -1,   187,   495,  1298,    -1,   388,    69,
     669,    -1,   187,    69,   669,    -1,    96,   161,   669,    -1,
     495,    -1,   323,    -1,   267,    -1,   289,    -1,    33,    -1,
      -1,   500,    -1,    -1,  1295,  1371,    -1,    -1,   185,    -1,
     184,    -1,   233,    -1,    -1,   233,  1368,    -1,    -1,   184,
    1201,    -1,    -1,   255,  1368,    -1,   587,  1082,    -1,    -1,
    1302,  1364,  1300,  1304,    -1,    -1,  1302,  1303,  1301,  1061,
      -1,   126,    -1,   127,    -1,    -1,   167,    -1,   372,    -1,
      -1,  1352,    -1,  1371,    -1,    -1,   179,  1036,  1306,  1307,
      -1,    -1,    -1,  1396,  1308,  1313,  1309,  1310,    -1,  1311,
      -1,    -1,   589,   402,   265,    -1,  1311,   613,  1312,    -1,
    1312,    -1,   156,   267,    -1,   152,   267,    -1,   189,   267,
      -1,   470,   267,    -1,    33,   267,    -1,   412,   267,    -1,
     396,    48,    -1,   206,    -1,   387,    -1,   267,    -1,   495,
      -1,   469,    -1,   397,    -1,    66,    -1,   567,    -1,   529,
      -1,   519,    -1,   220,    -1,   289,    -1,   128,    -1,   430,
      -1,    58,    -1,    -1,  1225,    -1,    -1,   428,  1315,  1316,
      -1,  1316,   613,  1317,    -1,  1317,    -1,    -1,   469,  1318,
    1319,    -1,   289,    -1,   396,    48,    -1,    58,    -1,    -1,
      12,    -1,    -1,   394,  1321,  1322,    -1,  1291,   267,  1323,
      -1,    58,    29,  1202,    -1,   537,  1368,    -1,    29,  1082,
      -1,   244,  1325,  1082,    -1,    -1,    83,    -1,   396,    -1,
     569,  1371,    -1,    -1,    -1,    -1,    -1,   261,  1332,  1328,
    1334,  1333,   221,  1370,  1329,  1335,   230,   518,  1364,  1330,
     924,  1331,  1342,  1336,  1339,  1343,  1345,  1348,    -1,   107,
      -1,   597,    -1,    -1,   262,    -1,    -1,    81,    -1,   273,
      -1,    -1,   425,    -1,   215,    -1,    -1,    72,  1337,    -1,
    1337,  1338,    -1,  1338,    -1,   524,    46,  1352,    -1,   357,
     147,    46,  1352,    -1,   147,    46,  1352,    -1,   158,    46,
    1352,    -1,    -1,   258,  1340,    -1,  1340,  1341,    -1,  1341,
      -1,   524,    46,  1352,    -1,   492,    46,  1352,    -1,    -1,
     441,   212,    46,  1352,    -1,    -1,   215,   345,  1344,    -1,
     258,    -1,   441,    -1,    -1,   611,  1346,   612,    -1,   611,
     612,    -1,  1346,   613,  1347,    -1,  1347,    -1,  1361,    -1,
     618,  1373,    -1,    -1,   459,  1349,    -1,  1349,   613,  1350,
      -1,  1350,    -1,  1361,  1250,  1078,  1256,  1079,    -1,   525,
      -1,   329,    -1,   551,   525,    -1,  1351,  1369,    -1,  1369,
      -1,   203,    -1,    35,    -1,   368,    -1,  1355,    -1,   605,
    1356,    -1,   604,  1356,    -1,  1351,    -1,  1356,    -1,   344,
      -1,   170,    -1,   543,    -1,   203,    -1,    35,    -1,   551,
     203,    -1,   551,    35,    -1,   111,  1351,    -1,   533,  1351,
      -1,   530,  1351,    -1,   345,    -1,   270,    -1,   548,    -1,
     118,    -1,   177,    -1,  1361,    -1,  1358,    -1,  1371,   619,
     606,    -1,  1371,   619,  1371,   619,   606,    -1,  1082,    -1,
    1371,    -1,  1362,    -1,  1371,    -1,  1362,    -1,  1371,   619,
    1371,    -1,   619,  1371,   619,  1371,    -1,  1371,   619,  1371,
     619,  1371,    -1,  1371,    -1,  1371,   619,  1371,   619,  1371,
      -1,  1371,   619,  1371,    -1,   619,  1371,    -1,  1371,    -1,
    1371,   619,  1371,    -1,   619,  1371,    -1,  1371,  1275,    -1,
    1371,   619,  1371,  1275,    -1,  1371,    -1,   211,    -1,   213,
      -1,   525,    -1,   525,    -1,   525,    -1,  1367,    -1,  1375,
      -1,  1367,    -1,  1376,    -1,  1371,    -1,  1368,    -1,   254,
      -1,  1373,    -1,  1373,   618,  1373,    -1,   100,  1081,    -1,
    1376,    -1,    20,    -1,    28,    -1,    30,    -1,    47,    -1,
      48,    -1,    59,    -1,    61,    -1,    67,    -1,    75,    -1,
      77,    -1,    89,    -1,   117,    -1,   137,    -1,   148,    -1,
     163,    -1,   179,    -1,   199,    -1,   202,    -1,   205,    -1,
     228,    -1,   245,    -1,   341,    -1,   353,    -1,   355,    -1,
     365,    -1,   369,    -1,   373,    -1,   380,    -1,   383,    -1,
     419,    -1,   422,    -1,   428,    -1,   431,    -1,   438,    -1,
     445,    -1,   450,    -1,   457,    -1,   467,    -1,   473,    -1,
     469,    -1,   474,    -1,   494,    -1,   499,    -1,   544,    -1,
     555,    -1,   556,    -1,   593,    -1,   596,    -1,   564,    -1,
       5,    -1,     7,    -1,     8,    -1,     9,    -1,    10,    -1,
      11,    -1,    17,    -1,    22,    -1,    23,    -1,    25,    -1,
      24,    -1,    26,    -1,    27,    -1,    34,    -1,    38,    -1,
      41,    -1,    43,    -1,    42,    -1,    45,    -1,    51,    -1,
      54,    -1,    55,    -1,    57,    -1,    58,    -1,    63,    -1,
      66,    -1,    65,    -1,    64,    -1,    68,    -1,    69,    -1,
      71,    -1,    74,    -1,    72,    -1,    76,    -1,    78,    -1,
      79,    -1,    80,    -1,    81,    -1,    83,    -1,    84,    -1,
      86,    -1,    88,    -1,    87,    -1,    90,    -1,    92,    -1,
      95,    -1,    98,    -1,   102,    -1,   107,    -1,   106,    -1,
     108,    -1,   111,    -1,   116,    -1,   122,    -1,   124,    -1,
     128,    -1,   130,    -1,   131,    -1,   132,    -1,   133,    -1,
     140,    -1,   141,    -1,   142,    -1,   149,    -1,   153,    -1,
     152,    -1,   151,    -1,   156,    -1,   157,    -1,   159,    -1,
     161,    -1,   160,    -1,   162,    -1,   166,    -1,   167,    -1,
     168,    -1,   172,    -1,   171,    -1,   183,    -1,   146,    -1,
     185,    -1,   174,    -1,   175,    -1,   176,    -1,   189,    -1,
     191,    -1,   190,    -1,   192,    -1,   195,    -1,   193,    -1,
     200,    -1,   206,    -1,   210,    -1,   212,    -1,   220,    -1,
     216,    -1,   232,    -1,   217,    -1,   218,    -1,   222,    -1,
     234,    -1,   235,    -1,   237,    -1,   238,    -1,   227,    -1,
     242,    -1,   246,    -1,   249,    -1,   252,    -1,   253,    -1,
     259,    -1,   260,    -1,   262,    -1,   264,    -1,   266,    -1,
     267,    -1,   295,    -1,   289,    -1,   291,    -1,   276,    -1,
     280,    -1,   277,    -1,   278,    -1,   290,    -1,   279,    -1,
     281,    -1,   275,    -1,   287,    -1,   283,    -1,   282,    -1,
     284,    -1,   285,    -1,   286,    -1,   293,    -1,   294,    -1,
     296,    -1,   298,    -1,   299,    -1,   304,    -1,   305,    -1,
     306,    -1,   307,    -1,   308,    -1,   309,    -1,   312,    -1,
     313,    -1,   317,    -1,   315,    -1,   319,    -1,   320,    -1,
     321,    -1,   322,    -1,   323,    -1,   324,    -1,   326,    -1,
     325,    -1,   327,    -1,   330,    -1,   331,    -1,   335,    -1,
     334,    -1,   342,    -1,   336,    -1,   337,    -1,   347,    -1,
     348,    -1,   349,    -1,   351,    -1,   352,    -1,   366,    -1,
     367,    -1,   370,    -1,   371,    -1,   372,    -1,   374,    -1,
     375,    -1,   377,    -1,   376,    -1,   378,    -1,   379,    -1,
     384,    -1,   385,    -1,   387,    -1,   389,    -1,   390,    -1,
     391,    -1,   392,    -1,   393,    -1,   395,    -1,   396,    -1,
     397,    -1,   398,    -1,   401,    -1,   405,    -1,   406,    -1,
     408,    -1,   407,    -1,   409,    -1,   412,    -1,   413,    -1,
     414,    -1,   415,    -1,   416,    -1,   418,    -1,   421,    -1,
     423,    -1,   426,    -1,   430,    -1,   433,    -1,   434,    -1,
     439,    -1,   440,    -1,   441,    -1,   442,    -1,   443,    -1,
     444,    -1,   446,    -1,   447,    -1,   449,    -1,   455,    -1,
     454,    -1,   456,    -1,   468,    -1,   461,    -1,   465,    -1,
     470,    -1,   472,    -1,   475,    -1,   476,    -1,   484,    -1,
     483,    -1,   486,    -1,   490,    -1,   493,    -1,   495,    -1,
     500,    -1,   502,    -1,   503,    -1,   504,    -1,   505,    -1,
     507,    -1,   506,    -1,   510,    -1,   511,    -1,   512,    -1,
     513,    -1,   519,    -1,   521,    -1,   515,    -1,   520,    -1,
     516,    -1,   522,    -1,   523,    -1,   526,    -1,   527,    -1,
     529,    -1,   539,    -1,   540,    -1,   530,    -1,   531,    -1,
     532,    -1,   533,    -1,   545,    -1,   546,    -1,   547,    -1,
     187,    -1,   549,    -1,   550,    -1,   553,    -1,   552,    -1,
     559,    -1,   562,    -1,   566,    -1,   567,    -1,   568,    -1,
     578,    -1,   582,    -1,   575,    -1,   584,    -1,   583,    -1,
     585,    -1,   592,    -1,   595,    -1,   597,    -1,   600,    -1,
      -1,   459,  1379,  1378,  1380,    -1,    -1,   356,    -1,  1381,
      -1,  1380,   613,  1381,    -1,    -1,  1382,  1387,    -1,  1384,
      -1,   193,    -1,   262,    -1,   456,    -1,    -1,   351,    -1,
      -1,   193,    -1,   262,    -1,   456,    -1,    -1,   193,   619,
      -1,   262,   619,    -1,   456,   619,    -1,  1388,    -1,  1384,
    1389,    -1,  1383,  1390,  1250,  1393,    -1,  1383,   539,   237,
     253,  1391,    -1,   618,  1373,  1250,  1082,    -1,   618,   618,
    1386,  1390,  1250,  1393,    -1,   921,   926,    -1,   325,  1250,
    1082,    -1,   325,   923,   928,    -1,   374,  1250,  1392,    -1,
     374,   182,  1374,  1250,  1392,    -1,  1371,    -1,  1371,   619,
    1371,    -1,   121,   619,  1371,    -1,   402,   549,    -1,   402,
      76,    -1,   423,   402,    -1,   454,    -1,   525,    -1,   374,
     611,   525,   612,    -1,   349,   611,   525,   612,    -1,  1082,
      -1,   121,    -1,   350,    -1,    12,    -1,    33,    -1,    -1,
     265,  1396,  1395,  1397,    -1,   518,    -1,   515,    -1,  1398,
      -1,  1397,   613,  1398,    -1,  1364,  1175,  1399,    -1,   402,
      -1,   594,    -1,   273,   594,    -1,   402,   262,    -1,    -1,
     560,  1401,  1396,    -1,   199,  1364,   353,  1175,    -1,   199,
    1366,    67,    -1,    -1,   199,  1366,   402,  1403,  1404,  1177,
    1194,    -1,  1405,    -1,  1371,  1406,    -1,   175,    -1,   335,
      -1,   175,    -1,   335,    -1,   385,    -1,   246,    -1,    -1,
    1408,  1407,   611,  1255,   612,    -1,   154,    -1,   188,    -1,
     247,    -1,   198,    -1,   274,    -1,   436,   668,  1410,    -1,
    1414,   350,  1413,  1425,   184,  1427,    -1,  1414,   350,   187,
    1425,   184,  1427,    -1,  1414,   350,   388,  1425,   184,  1427,
      -1,    12,  1415,   613,   194,   356,   184,  1427,    -1,   393,
     350,  1374,   184,  1427,    -1,   194,   668,  1412,    -1,  1414,
     350,  1413,  1425,   537,  1427,  1432,  1433,    -1,  1414,   350,
     187,  1425,   537,  1427,  1432,  1433,    -1,  1414,   350,   388,
    1425,   537,  1427,  1432,  1433,    -1,   393,   350,  1374,   537,
    1427,  1434,    -1,    -1,   518,    -1,  1416,    -1,    12,  1415,
      -1,    -1,   387,    -1,  1417,    -1,  1416,   613,  1417,    -1,
      -1,   451,  1418,  1429,    -1,    -1,   226,  1419,  1429,    -1,
      -1,   563,  1420,  1429,    -1,    -1,   410,  1421,  1429,    -1,
     125,    -1,   565,    -1,   219,    -1,    13,    -1,    96,    -1,
     138,    -1,   163,    -1,   418,    -1,   465,    -1,   389,    -1,
     174,    -1,   194,   356,    -1,   464,   105,    -1,   510,    -1,
      96,   522,   515,    -1,   265,   515,    -1,   426,   469,    -1,
     426,    65,    -1,    96,   582,    -1,   464,   582,    -1,    96,
     440,    -1,    13,   440,    -1,    96,   566,    -1,   161,    -1,
     541,    -1,    96,   516,    -1,    -1,    16,    -1,  1424,  1422,
    1423,    -1,  1424,    -1,   505,   525,    -1,   238,   525,    -1,
      63,   525,    -1,   606,    -1,  1371,   619,   606,    -1,   606,
     619,   606,    -1,  1364,    -1,  1374,    -1,  1426,   613,  1374,
      -1,  1428,    -1,  1427,   613,  1428,    -1,  1374,   212,    46,
     525,    -1,  1374,   212,    46,   374,   525,    -1,  1374,   212,
     589,  1373,    -1,  1374,   212,   589,  1373,    18,  1368,    -1,
    1374,    -1,    -1,   611,  1430,   612,    -1,  1430,   613,  1431,
      -1,  1431,    -1,  1371,    -1,    -1,   427,  1423,    -1,   427,
     491,    -1,   427,   595,    -1,   427,   337,    -1,    -1,   589,
    1435,    -1,    -1,   589,   194,   356,    -1,  1435,  1436,    -1,
    1436,    -1,   194,   356,    -1,   294,  1199,    -1,   298,  1199,
      -1,   293,  1199,    -1,   299,  1199,    -1,    -1,    30,  1438,
    1439,    -1,    -1,   592,    -1,    -1,    16,   341,    55,    -1,
      16,    55,    -1,    -1,   417,    -1,   341,   417,    -1,    -1,
     445,    -1,    77,  1439,  1440,  1441,    -1,   438,  1439,  1440,
    1441,    -1,   438,  1439,   537,  1442,  1371,    -1,   445,  1371,
      -1,   417,   445,  1371,    -1,    -1,  1448,    -1,    -1,   557,
    1455,  1449,  1062,    -1,    -1,  1448,    -1,  1452,    -1,    -1,
    1452,    -1,    -1,  1453,  1454,    -1,  1189,  1193,    -1,  1195,
      -1,    -1,   134,    -1,    12,    -1,   451,  1145,    -1,   611,
    1064,   612,    -1,  1456,  1451,    -1,    -1,  1457,   557,  1455,
    1458,  1456,  1451,    -1,  1460,  1457,  1461,    -1,    -1,    -1,
      -1,  1463,    -1,  1463,  1464,    -1,  1464,    -1,   501,    -1,
     204,    -1,   134,    -1,   488,    -1,   482,    -1,   483,    -1,
     485,    -1,    12,    -1,  1470,  1466,    -1,  1469,  1467,    -1,
    1471,  1468,  1475,    -1,  1475,    -1,  1483,    -1,  1494,    -1,
    1488,    -1,   655,    -1,  1475,    -1,  1483,    -1,  1494,    -1,
    1488,    -1,  1487,    -1,   655,    -1,  1469,    -1,  1470,    -1,
      -1,   122,   154,  1374,    -1,  1472,    -1,  1472,  1473,    -1,
    1473,    -1,   361,   425,    -1,    11,   154,   550,    -1,    11,
     154,   306,    -1,    11,   154,   523,    -1,    -1,   489,   450,
     122,    -1,   489,   450,   232,    -1,    -1,  1474,   582,  1364,
    1476,  1477,    18,  1479,    -1,    -1,   611,  1478,   612,    -1,
    1371,    -1,  1478,   613,  1371,    -1,    -1,  1480,  1481,  1482,
      -1,   451,  1065,    -1,   611,  1063,   612,  1450,    -1,    -1,
     589,    62,   356,    -1,   589,    51,    62,   356,    -1,   589,
     262,    62,   356,    -1,    -1,    -1,    -1,   541,  1078,   669,
     763,   764,   350,  1078,  1484,  1364,   182,  1078,  1485,   143,
     443,  1486,   713,    -1,    10,  1078,   187,  1371,   434,   886,
     474,  1368,    -1,  1078,   187,  1371,   434,   886,   474,  1368,
      -1,    -1,    -1,    -1,    -1,    -1,  1078,   187,   669,   611,
    1489,   680,   612,  1490,   434,  1491,   919,  1492,   671,  1493,
     713,    -1,    -1,    -1,    -1,    -1,   388,  1078,   669,  1495,
     611,  1496,   684,   612,  1497,   671,  1498,   713,    -1,   596,
    1501,  1500,  1502,    -1,   596,   148,  1500,  1504,    -1,   596,
     383,  1500,    -1,   596,    77,  1500,  1503,    -1,   596,   438,
    1500,    -1,   596,   406,    -1,  1352,    -1,  1352,   613,  1352,
      -1,  1352,   613,  1352,   613,  1199,    -1,    30,    -1,   494,
      -1,    -1,   240,    -1,   433,    -1,    -1,   352,   375,    -1,
      -1,    -1,   511,  1505,  1506,    -1,    -1,   182,   309,    -1,
     228,   377,  1371,   474,  1368,    -1,   556,   377,  1371,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1672,  1672,  1685,  1684,  1709,  1716,  1718,  1722,  1723,
    1728,  1729,  1730,  1731,  1732,  1733,  1734,  1735,  1736,  1737,
    1738,  1739,  1740,  1741,  1742,  1743,  1744,  1745,  1746,  1747,
    1748,  1749,  1750,  1751,  1752,  1753,  1754,  1755,  1756,  1757,
    1758,  1759,  1760,  1761,  1762,  1763,  1764,  1765,  1766,  1767,
    1768,  1769,  1770,  1771,  1772,  1773,  1774,  1775,  1776,  1777,
    1778,  1782,  1792,  1793,  1797,  1807,  1814,  1825,  1824,  1835,
    1837,  1841,  1842,  1846,  1859,  1858,  1878,  1877,  1891,  1892,
    1896,  1900,  1904,  1908,  1912,  1916,  1921,  1925,  1929,  1933,
    1937,  1941,  1947,  1978,  1983,  1986,  1988,  1989,  1993,  2007,
    2011,  2027,  2031,  2043,  2042,  2084,  2083,  2095,  2093,  2106,
    2104,  2116,  2115,  2128,  2127,  2135,  2139,  2143,  2147,  2154,
    2167,  2168,  2172,  2176,  2180,  2184,  2188,  2192,  2196,  2204,
    2203,  2235,  2234,  2241,  2248,  2249,  2255,  2261,  2271,  2277,
    2283,  2285,  2292,  2293,  2297,  2303,  2312,  2313,  2321,  2321,
    2379,  2380,  2381,  2382,  2383,  2384,  2385,  2386,  2387,  2388,
    2389,  2390,  2391,  2396,  2410,  2426,  2445,  2446,  2450,  2451,
    2456,  2458,  2460,  2462,  2464,  2466,  2468,  2474,  2475,  2476,
    2480,  2484,  2492,  2491,  2504,  2506,  2509,  2511,  2515,  2519,
    2526,  2528,  2532,  2533,  2538,  2557,  2583,  2585,  2589,  2590,
    2594,  2620,  2621,  2622,  2623,  2627,  2628,  2632,  2633,  2638,
    2641,  2668,  2667,  2732,  2748,  2747,  2801,  2827,  2827,  2850,
    2851,  2856,  2858,  2863,  2886,  2899,  2903,  2920,  2921,  2925,
    2929,  2938,  2945,  2952,  2962,  2977,  3000,  3006,  3007,  3013,
    3016,  3020,  3028,  3048,  3050,  3068,  3074,  3076,  3078,  3080,
    3082,  3084,  3086,  3088,  3090,  3092,  3094,  3096,  3101,  3116,
    3131,  3149,  3150,  3154,  3155,  3156,  3157,  3158,  3159,  3160,
    3161,  3162,  3163,  3164,  3165,  3166,  3171,  3170,  3177,  3177,
    3234,  3233,  3262,  3262,  3276,  3329,  3372,  3393,  3392,  3414,
    3433,  3435,  3436,  3440,  3460,  3483,  3485,  3501,  3483,  3520,
    3522,  3523,  3527,  3528,  3533,  3539,  3532,  3560,  3559,  3575,
    3576,  3580,  3581,  3586,  3590,  3585,  3611,  3615,  3610,  3634,
    3644,  3649,  3648,  3684,  3685,  3690,  3689,  3722,  3722,  3737,
    3736,  3772,  3784,  3786,  3783,  3813,  3812,  3833,  3835,  3840,
    3842,  3844,  3861,  3866,  3872,  3879,  3880,  3888,  3894,  3903,
    3909,  3915,  3916,  3920,  3920,  3925,  3926,  3927,  3931,  3932,
    3933,  3937,  3941,  3942,  3943,  3947,  3948,  3949,  3950,  3951,
    3952,  3953,  3954,  3958,  3962,  3963,  3964,  3968,  3969,  3970,
    3971,  3972,  3976,  3980,  3981,  3982,  3986,  3987,  3988,  3989,
    3990,  3991,  3992,  3996,  4000,  4001,  4002,  4006,  4007,  4008,
    4013,  4021,  4029,  4037,  4049,  4061,  4066,  4071,  4079,  4087,
    4095,  4103,  4111,  4119,  4127,  4140,  4153,  4166,  4168,  4172,
    4177,  4190,  4191,  4242,  4243,  4246,  4261,  4279,  4284,  4282,
    4289,  4291,  4290,  4294,  4293,  4299,  4336,  4337,  4342,  4341,
    4360,  4379,  4378,  4395,  4399,  4407,  4406,  4409,  4411,  4413,
    4415,  4420,  4421,  4427,  4428,  4445,  4446,  4450,  4451,  4455,
    4474,  4484,  4495,  4504,  4505,  4521,  4523,  4522,  4527,  4525,
    4536,  4537,  4541,  4559,  4575,  4576,  4592,  4607,  4629,  4630,
    4635,  4634,  4658,  4668,  4690,  4689,  4707,  4706,  4726,  4748,
    4752,  4781,  4793,  4794,  4799,  4810,  4798,  4835,  4836,  4840,
    4853,  4874,  4887,  4913,  4914,  4919,  4918,  4955,  4960,  4961,
    4965,  4966,  4970,  4972,  4978,  4980,  4982,  4984,  4986,  4988,
    4998,  5013,  4997,  5027,  5028,  5032,  5033,  5037,  5038,  5042,
    5043,  5047,  5048,  5052,  5053,  5057,  5061,  5062,  5065,  5067,
    5071,  5072,  5076,  5077,  5078,  5082,  5087,  5092,  5097,  5102,
    5107,  5112,  5117,  5132,  5138,  5143,  5148,  5153,  5159,  5158,
    5184,  5185,  5186,  5191,  5196,  5201,  5203,  5205,  5207,  5213,
    5221,  5239,  5256,  5279,  5293,  5294,  5295,  5296,  5297,  5298,
    5302,  5303,  5304,  5308,  5309,  5313,  5314,  5315,  5316,  5321,
    5328,  5329,  5333,  5334,  5338,  5339,  5346,  5351,  5357,  5363,
    5369,  5387,  5393,  5395,  5399,  5403,  5404,  5408,  5413,  5412,
    5435,  5436,  5437,  5438,  5443,  5447,  5452,  5457,  5461,  5466,
    5471,  5477,  5482,  5488,  5492,  5497,  5502,  5520,  5522,  5524,
    5537,  5539,  5544,  5549,  5561,  5566,  5571,  5576,  5578,  5580,
    5582,  5584,  5586,  5588,  5590,  5593,  5592,  5597,  5596,  5600,
    5602,  5611,  5612,  5613,  5619,  5620,  5621,  5622,  5623,  5627,
    5631,  5632,  5636,  5637,  5641,  5642,  5643,  5644,  5645,  5649,
    5650,  5651,  5652,  5653,  5657,  5662,  5664,  5670,  5671,  5673,
    5678,  5687,  5688,  5692,  5693,  5697,  5698,  5699,  5703,  5704,
    5705,  5706,  5709,  5710,  5714,  5715,  5719,  5720,  5724,  5725,
    5729,  5730,  5731,  5732,  5739,  5740,  5746,  5752,  5758,  5764,
    5765,  5782,  5803,  5809,  5814,  5815,  5819,  5827,  5831,  5832,
    5836,  5837,  5841,  5850,  5854,  5855,  5859,  5870,  5871,  5875,
    5876,  5880,  5881,  5886,  5887,  5891,  5898,  5907,  5915,  5926,
    5927,  5928,  5929,  5930,  5931,  5936,  5944,  5945,  5949,  5951,
    5955,  5967,  5968,  5972,  5979,  5992,  5993,  5995,  5997,  6003,
    6008,  6014,  6020,  6027,  6037,  6038,  6039,  6040,  6041,  6045,
    6049,  6050,  6054,  6055,  6059,  6060,  6064,  6065,  6066,  6070,
    6071,  6075,  6079,  6092,  6104,  6105,  6109,  6110,  6114,  6115,
    6119,  6120,  6124,  6125,  6129,  6130,  6134,  6135,  6139,  6140,
    6144,  6146,  6150,  6151,  6155,  6159,  6160,  6173,  6174,  6175,
    6179,  6180,  6184,  6190,  6204,  6205,  6209,  6210,  6214,  6215,
    6223,  6222,  6261,  6260,  6274,  6286,  6285,  6304,  6303,  6322,
    6321,  6340,  6334,  6354,  6353,  6392,  6397,  6402,  6407,  6412,
    6422,  6423,  6424,  6425,  6429,  6430,  6442,  6443,  6447,  6448,
    6451,  6453,  6454,  6455,  6457,  6459,  6460,  6469,  6470,  6474,
    6483,  6481,  6495,  6509,  6508,  6522,  6520,  6534,  6541,  6552,
    6556,  6563,  6567,  6572,  6571,  6587,  6589,  6594,  6602,  6601,
    6617,  6621,  6620,  6632,  6633,  6637,  6652,  6653,  6657,  6666,
    6670,  6675,  6680,  6679,  6690,  6699,  6689,  6714,  6723,  6727,
    6736,  6745,  6751,  6757,  6766,  6775,  6794,  6815,  6825,  6829,
    6837,  6838,  6842,  6843,  6847,  6848,  6849,  6853,  6854,  6855,
    6859,  6860,  6861,  6862,  6871,  6870,  6881,  6889,  6888,  6898,
    6907,  6916,  6917,  6924,  6924,  6930,  6931,  6935,  6936,  6937,
    6941,  6942,  6958,  6959,  6964,  6963,  6975,  6976,  6977,  6982,
    6981,  7003,  7004,  7008,  7009,  7013,  7014,  7015,  7020,  7019,
    7041,  7050,  7049,  7076,  7077,  7081,  7082,  7086,  7087,  7088,
    7089,  7090,  7091,  7096,  7095,  7117,  7118,  7119,  7124,  7123,
    7129,  7136,  7141,  7149,  7150,  7154,  7168,  7167,  7180,  7181,
    7185,  7186,  7190,  7200,  7210,  7211,  7216,  7215,  7226,  7227,
    7231,  7232,  7236,  7246,  7257,  7256,  7264,  7264,  7275,  7276,
    7281,  7282,  7291,  7300,  7301,  7305,  7310,  7315,  7320,  7325,
    7324,  7344,  7352,  7344,  7359,  7360,  7361,  7362,  7363,  7367,
    7374,  7381,  7383,  7394,  7395,  7399,  7400,  7428,  7432,  7462,
    7464,  7470,  7480,  7481,  7482,  7497,  7504,  7530,  7536,  7542,
    7543,  7544,  7545,  7546,  7550,  7551,  7556,  7607,  7614,  7657,
    7663,  7669,  7675,  7681,  7687,  7693,  7699,  7703,  7709,  7715,
    7721,  7727,  7733,  7737,  7743,  7753,  7759,  7767,  7773,  7783,
    7789,  7798,  7808,  7814,  7824,  7830,  7839,  7843,  7849,  7855,
    7861,  7867,  7873,  7879,  7885,  7891,  7897,  7903,  7909,  7915,
    7921,  7927,  7931,  7932,  7936,  7937,  7941,  7942,  7946,  7947,
    7951,  7952,  7953,  7954,  7955,  7956,  7960,  7961,  7965,  7966,
    7967,  7968,  7969,  7970,  7982,  7983,  7984,  7985,  7986,  7992,
    7996,  8002,  8008,  8014,  8020,  8022,  8029,  8036,  8042,  8044,
    8053,  8060,  8068,  8074,  8081,  8087,  8101,  8108,  8124,  8130,
    8136,  8144,  8150,  8156,  8162,  8168,  8183,  8195,  8201,  8207,
    8213,  8219,  8225,  8231,  8237,  8243,  8249,  8255,  8261,  8267,
    8273,  8279,  8285,  8291,  8299,  8320,  8327,  8333,  8340,  8347,
    8354,  8361,  8368,  8374,  8380,  8387,  8394,  8400,  8407,  8413,
    8419,  8425,  8431,  8437,  8455,  8465,  8471,  8477,  8484,  8491,
    8506,  8512,  8518,  8524,  8530,  8537,  8543,  8549,  8555,  8561,
    8573,  8579,  8585,  8591,  8597,  8609,  8615,  8631,  8637,  8644,
    8651,  8658,  8665,  8672,  8676,  8696,  8695,  8768,  8810,  8812,
    8817,  8818,  8822,  8823,  8827,  8828,  8832,  8839,  8847,  8873,
    8879,  8885,  8891,  8897,  8903,  8912,  8919,  8921,  8918,  8928,
    8939,  8945,  8951,  8957,  8963,  8969,  8975,  8981,  8987,  8994,
    8993,  9013,  9012,  9027,  9037,  9045,  9061,  9062,  9067,  9072,
    9075,  9078,  9077,  9094,  9096,  9102,  9101,  9118,  9120,  9122,
    9124,  9126,  9128,  9130,  9132,  9134,  9136,  9138,  9143,  9144,
    9148,  9155,  9163,  9164,  9168,  9175,  9183,  9184,  9188,  9189,
    9193,  9201,  9212,  9213,  9222,  9233,  9234,  9240,  9241,  9261,
    9263,  9267,  9265,  9282,  9280,  9298,  9296,  9303,  9312,  9310,
    9328,  9327,  9337,  9348,  9346,  9365,  9364,  9375,  9386,  9387,
    9388,  9400,  9400,  9414,  9454,  9526,  9537,  9542,  9534,  9561,
    9581,  9589,  9581,  9598,  9597,  9620,  9637,  9620,  9644,  9648,
    9674,  9675,  9680,  9683,  9684,  9685,  9689,  9690,  9695,  9694,
    9700,  9699,  9707,  9708,  9711,  9713,  9713,  9717,  9717,  9722,
    9723,  9727,  9729,  9734,  9735,  9739,  9750,  9763,  9764,  9765,
    9766,  9767,  9768,  9769,  9770,  9771,  9772,  9773,  9774,  9778,
    9779,  9780,  9781,  9782,  9783,  9784,  9785,  9786,  9790,  9791,
    9792,  9793,  9796,  9798,  9799,  9803,  9804,  9812,  9814,  9818,
    9820,  9819,  9833,  9836,  9835,  9850,  9856,  9871,  9873,  9877,
    9879,  9884,  9885,  9905,  9930,  9934,  9935,  9939,  9952,  9954,
    9959,  9958,  9993,  9995, 10000, 10001, 10002, 10007, 10013, 10017,
   10018, 10022, 10033, 10040, 10047, 10057, 10091, 10095, 10101, 10107,
   10117, 10121, 10135, 10136, 10137, 10138, 10139, 10140, 10144, 10145,
   10146, 10147, 10148, 10152, 10153, 10154, 10155, 10156, 10160, 10161,
   10162, 10163, 10167, 10172, 10173, 10176, 10179, 10178, 10209, 10210,
   10214, 10215, 10219, 10231, 10231, 10241, 10242, 10246, 10265, 10298,
   10297, 10310, 10318, 10309, 10320, 10332, 10344, 10343, 10361, 10360,
   10371, 10371, 10387, 10394, 10417, 10438, 10450, 10455, 10454, 10464,
   10470, 10477, 10482, 10487, 10497, 10498, 10502, 10513, 10514, 10518,
   10529, 10530, 10534, 10535, 10543, 10551, 10542, 10561, 10568, 10560,
   10578, 10590, 10591, 10599, 10603, 10604, 10615, 10616, 10620, 10629,
   10630, 10631, 10633, 10632, 10643, 10644, 10648, 10649, 10651, 10650,
   10654, 10653, 10659, 10660, 10664, 10665, 10669, 10679, 10680, 10684,
   10685, 10690, 10689, 10703, 10704, 10708, 10713, 10721, 10722, 10730,
   10732, 10732, 10740, 10748, 10739, 10770, 10771, 10775, 10783, 10784,
   10788, 10798, 10799, 10806, 10805, 10821, 10820, 10832, 10831, 10843,
   10842, 10856, 10857, 10861, 10874, 10890, 10891, 10895, 10896, 10900,
   10901, 10902, 10907, 10906, 10928, 10930, 10933, 10935, 10938, 10939,
   10942, 10946, 10950, 10954, 10958, 10962, 10966, 10970, 10974, 10982,
   10985, 10995, 10994, 11009, 11016, 11024, 11033, 11041, 11049, 11057,
   11065, 11072, 11074, 11076, 11085, 11089, 11094, 11093, 11099, 11098,
   11103, 11112, 11119, 11128, 11137, 11142, 11144, 11146, 11148, 11150,
   11152, 11159, 11167, 11169, 11177, 11184, 11191, 11201, 11208, 11214,
   11223, 11231, 11235, 11240, 11244, 11253, 11260, 11267, 11274, 11281,
   11288, 11295, 11302, 11308, 11315, 11322, 11327, 11332, 11340, 11342,
   11344, 11349, 11350, 11353, 11355, 11359, 11360, 11364, 11365, 11369,
   11370, 11374, 11375, 11379, 11380, 11383, 11385, 11392, 11403, 11402,
   11418, 11417, 11427, 11428, 11432, 11433, 11434, 11438, 11439, 11440,
   11455, 11454, 11467, 11476, 11466, 11478, 11482, 11483, 11497, 11498,
   11503, 11505, 11507, 11509, 11511, 11513, 11515, 11517, 11519, 11521,
   11523, 11525, 11530, 11536, 11538, 11540, 11542, 11544, 11546, 11548,
   11550, 11552, 11557, 11558, 11563, 11562, 11572, 11573, 11577, 11577,
   11579, 11580, 11581, 11586, 11587, 11592, 11591, 11602, 11603, 11613,
   11617, 11629, 11639, 11640, 11641, 11647, 11659, 11671, 11681, 11691,
   11658, 11699, 11700, 11704, 11705, 11709, 11710, 11722, 11726, 11727,
   11728, 11731, 11733, 11737, 11738, 11742, 11747, 11754, 11759, 11766,
   11768, 11772, 11773, 11777, 11782, 11790, 11791, 11794, 11796, 11804,
   11806, 11810, 11811, 11812, 11816, 11818, 11823, 11824, 11833, 11834,
   11838, 11839, 11843, 11863, 11887, 11899, 11910, 11929, 11937, 11949,
   11964, 11985, 11986, 11987, 11995, 11996, 11997, 12004, 12010, 12016,
   12022, 12028, 12057, 12085, 12086, 12087, 12091, 12101, 12111, 12117,
   12126, 12141, 12142, 12146, 12155, 12171, 12175, 12222, 12226, 12244,
   12248, 12327, 12352, 12383, 12384, 12400, 12410, 12414, 12420, 12426,
   12436, 12442, 12451, 12461, 12462, 12492, 12508, 12524, 12541, 12542,
   12553, 12554, 12565, 12566, 12567, 12571, 12588, 12610, 12625, 12626,
   12627, 12628, 12629, 12630, 12631, 12632, 12633, 12634, 12635, 12636,
   12637, 12638, 12639, 12640, 12641, 12642, 12643, 12644, 12645, 12646,
   12647, 12648, 12649, 12650, 12651, 12652, 12653, 12654, 12655, 12656,
   12657, 12658, 12659, 12660, 12661, 12662, 12663, 12664, 12665, 12666,
   12667, 12668, 12669, 12670, 12671, 12672, 12673, 12674, 12684, 12685,
   12686, 12687, 12688, 12689, 12690, 12691, 12692, 12693, 12694, 12695,
   12696, 12697, 12698, 12699, 12700, 12701, 12702, 12703, 12704, 12705,
   12706, 12707, 12708, 12709, 12710, 12711, 12712, 12713, 12714, 12715,
   12716, 12717, 12718, 12719, 12720, 12721, 12722, 12723, 12724, 12725,
   12726, 12727, 12728, 12729, 12730, 12731, 12732, 12733, 12734, 12735,
   12736, 12737, 12738, 12739, 12740, 12741, 12742, 12743, 12744, 12745,
   12746, 12747, 12748, 12749, 12750, 12751, 12752, 12753, 12754, 12755,
   12756, 12757, 12758, 12759, 12760, 12761, 12762, 12763, 12764, 12765,
   12766, 12767, 12768, 12769, 12770, 12771, 12772, 12773, 12774, 12775,
   12776, 12777, 12778, 12779, 12780, 12781, 12782, 12783, 12784, 12785,
   12786, 12787, 12788, 12789, 12790, 12791, 12792, 12793, 12794, 12795,
   12796, 12797, 12798, 12799, 12800, 12801, 12802, 12803, 12804, 12805,
   12806, 12807, 12808, 12809, 12810, 12811, 12812, 12813, 12814, 12815,
   12816, 12817, 12818, 12819, 12820, 12821, 12822, 12823, 12824, 12825,
   12826, 12827, 12828, 12829, 12830, 12831, 12832, 12833, 12834, 12835,
   12836, 12837, 12838, 12839, 12840, 12841, 12842, 12843, 12844, 12845,
   12846, 12847, 12848, 12849, 12850, 12851, 12852, 12853, 12854, 12855,
   12856, 12857, 12858, 12859, 12860, 12861, 12862, 12863, 12864, 12865,
   12866, 12867, 12868, 12869, 12870, 12871, 12872, 12873, 12874, 12875,
   12876, 12877, 12878, 12879, 12880, 12881, 12882, 12883, 12884, 12885,
   12886, 12887, 12888, 12889, 12890, 12891, 12892, 12893, 12894, 12895,
   12896, 12897, 12898, 12899, 12900, 12901, 12902, 12903, 12904, 12905,
   12906, 12907, 12908, 12909, 12910, 12911, 12912, 12913, 12914, 12915,
   12916, 12917, 12918, 12919, 12920, 12921, 12922, 12923, 12924, 12925,
   12926, 12927, 12928, 12929, 12930, 12931, 12932, 12933, 12934, 12935,
   12936, 12937, 12938, 12939, 12940, 12941, 12942, 12943, 12944, 12945,
   12946, 12947, 12948, 12949, 12950, 12951, 12952, 12953, 12954, 12955,
   12956, 12957, 12958, 12959, 12960, 12961, 12962, 12963, 12964, 12965,
   12966, 12967, 12968, 12975, 12974, 12989, 12990, 12994, 12995, 12999,
   12999, 13081, 13082, 13083, 13084, 13088, 13089, 13093, 13094, 13095,
   13096, 13100, 13101, 13102, 13103, 13107, 13108, 13112, 13154, 13173,
   13184, 13197, 13211, 13226, 13245, 13272, 13285, 13312, 13355, 13369,
   13370, 13371, 13372, 13376, 13377, 13386, 13398, 13399, 13400, 13406,
   13412, 13424, 13423, 13439, 13440, 13444, 13445, 13449, 13462, 13463,
   13464, 13465, 13470, 13469, 13489, 13501, 13514, 13513, 13546, 13547,
   13551, 13552, 13556, 13557, 13558, 13559, 13561, 13560, 13573, 13574,
   13575, 13576, 13577, 13583, 13588, 13594, 13605, 13616, 13620, 13630,
   13635, 13642, 13654, 13666, 13675, 13677, 13681, 13682, 13689, 13691,
   13695, 13696, 13701, 13700, 13704, 13703, 13707, 13706, 13710, 13709,
   13712, 13713, 13714, 13715, 13716, 13717, 13718, 13719, 13720, 13721,
   13722, 13723, 13724, 13725, 13726, 13727, 13728, 13729, 13730, 13731,
   13732, 13733, 13734, 13735, 13736, 13737, 13741, 13742, 13746, 13747,
   13751, 13761, 13771, 13784, 13799, 13812, 13825, 13837, 13842, 13850,
   13855, 13863, 13892, 13899, 13907, 13915, 13921, 13925, 13929, 13930,
   13934, 13961, 13963, 13967, 13971, 13975, 13982, 13983, 13987, 13988,
   13992, 13993, 13997, 13998, 14004, 14010, 14016, 14026, 14025, 14035,
   14036, 14041, 14042, 14043, 14048, 14049, 14050, 14054, 14055, 14059,
   14071, 14080, 14090, 14099, 14113, 14114, 14119, 14118, 14134, 14135,
   14136, 14140, 14141, 14145, 14145, 14169, 14170, 14174, 14175, 14176,
   14180, 14184, 14191, 14194, 14192, 14208, 14215, 14236, 14253, 14255,
   14259, 14260, 14264, 14265, 14273, 14274, 14275, 14276, 14282, 14288,
   14298, 14300, 14302, 14307, 14308, 14309, 14310, 14311, 14315, 14316,
   14317, 14318, 14319, 14320, 14330, 14331, 14336, 14349, 14362, 14364,
   14366, 14371, 14376, 14378, 14380, 14386, 14387, 14389, 14395, 14394,
   14412, 14413, 14417, 14422, 14430, 14430, 14455, 14456, 14461, 14462,
   14464, 14466, 14484, 14490, 14495, 14477, 14557, 14575, 14600, 14632,
   14636, 14644, 14667, 14596, 14732, 14756, 14765, 14773, 14731, 14794,
   14798, 14802, 14806, 14810, 14814, 14821, 14828, 14835, 14845, 14846,
   14850, 14851, 14852, 14856, 14857, 14862, 14864, 14863, 14869, 14870,
   14874, 14884
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM",
  "ANY_SYM", "AS", "ASC", "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM",
  "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR",
  "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM",
  "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM",
  "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM", "CATALOG_NAME_SYM",
  "CHAIN_SYM", "CHANGE", "CHANGED", "CHANGED_PAGE_BITMAPS_SYM", "CHARSET",
  "CHAR_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLIENT_STATS_SYM", "CLOSE_SYM",
  "COALESCE", "CODE_SYM", "COLLATE_SYM", "COLLATION_SYM", "COLUMNS",
  "COLUMN_SYM", "COLUMN_NAME_SYM", "COMMENT_SYM", "COMMITTED_SYM",
  "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM", "COMPRESSED_SYM",
  "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM", "CONSISTENT_SYM",
  "CONSTRAINT", "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM",
  "CONSTRAINT_SCHEMA_SYM", "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM",
  "CONTRIBUTORS_SYM", "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE",
  "CROSS", "CUBE_SYM", "CURDATE", "CURRENT_USER", "CURSOR_SYM",
  "CURSOR_NAME_SYM", "CURTIME", "DATABASE", "DATABASES", "DATAFILE_SYM",
  "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL",
  "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM",
  "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM", "DECIMAL_NUM",
  "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT", "DEFINER_SYM", "DELAYED_SYM",
  "DELAY_KEY_WRITE_SYM", "DELETE_SYM", "DESC", "DESCRIBE", "DES_KEY_FILE",
  "DETERMINISTIC_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD",
  "DISK_SYM", "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP",
  "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM",
  "ELSE", "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM",
  "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXECUTE_SYM", "EXISTS", "EXIT_SYM",
  "EXPANSION_SYM", "EXTENDED_SYM", "EXTENT_SIZE_SYM", "EXTRACT_SYM",
  "FALSE_SYM", "FAST_SYM", "FAULTS_SYM", "FETCH_SYM", "FILE_SYM",
  "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM", "FLUSH_SYM",
  "FORCE_SYM", "FOREIGN", "FOR_SYM", "FOUND_SYM", "FROM", "FULL",
  "FULLTEXT_SYM", "FUNCTION_SYM", "GE", "GENERAL", "GEOMETRYCOLLECTION",
  "GEOMETRY_SYM", "GET_FORMAT", "GLOBAL_SYM", "GRANT", "GRANTS",
  "GROUP_SYM", "GROUP_CONCAT_SYM", "GT_SYM", "HANDLER_SYM", "HASH_SYM",
  "HAVING", "HELP_SYM", "HEX_NUM", "HIGH_PRIORITY", "HOST_SYM",
  "HOSTS_SYM", "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM",
  "HOUR_SECOND_SYM", "HOUR_SYM", "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED",
  "IF", "IGNORE_SYM", "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES",
  "INDEX_SYM", "INDEX_STATS_SYM", "INFILE", "INITIAL_SIZE_SYM",
  "INNER_SYM", "INOUT_SYM", "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD",
  "INSTALL_SYM", "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM",
  "IN_SYM", "IO_SYM", "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM",
  "ITERATE_SYM", "JOIN_SYM", "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM",
  "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM", "LE", "LEADING", "LEAVES",
  "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME", "LIKE",
  "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", "LOAD",
  "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM",
  "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM",
  "LOW_PRIORITY", "LT", "MASTER_CONNECT_RETRY_SYM", "MASTER_HOST_SYM",
  "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM",
  "MASTER_PORT_SYM", "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM",
  "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM",
  "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH", "MAX_CONNECTIONS_PER_HOUR",
  "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM",
  "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMERIC_SYM", "NVARCHAR_SYM", "OFFSET_SYM",
  "OLD_PASSWORD", "ON", "ONE_SHOT_SYM", "ONE_SYM", "OPEN_SYM", "OPTIMIZE",
  "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM", "ORDER_SYM",
  "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM", "OWNER_SYM",
  "PACK_KEYS_SYM", "PAGE_SYM", "PARAM_MARKER", "PARSER_SYM", "PARTIAL",
  "PARTITIONING_SYM", "PARTITIONS_SYM", "PARTITION_SYM", "PASSWORD",
  "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM", "POINT_SYM", "POLYGON",
  "PORT_SYM", "POSITION_SYM", "PRECISION", "PREPARE_SYM", "PRESERVE_SYM",
  "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE_SYM", "PROCESS",
  "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM", "PURGE",
  "QUARTER_SYM", "QUERY_SYM", "QUERY_RESPONSE_TIME_SYM", "QUICK",
  "RANGE_SYM", "READS_SYM", "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM",
  "REAL", "REBUILD_SYM", "RECOVER_SYM", "REDOFILE_SYM",
  "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM", "REFERENCES", "REGEXP", "RELAY",
  "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM",
  "RELAY_THREAD", "RELEASE_SYM", "RELOAD", "REMOVE_SYM", "RENAME",
  "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM", "REPEAT_SYM", "REPLACE",
  "REPLICATION", "REQUIRE_SYM", "RESET_SYM", "RESIGNAL_SYM", "RESOURCES",
  "RESTORE_SYM", "RESTRICT", "RESUME_SYM", "RETURNS_SYM", "RETURN_SYM",
  "REVOKE", "RIGHT", "ROLLBACK_SYM", "ROLLUP_SYM", "ROUTINE_SYM",
  "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM", "RTREE_SYM", "SAVEPOINT_SYM",
  "SCHEDULE_SYM", "SCHEMA_NAME_SYM", "SECOND_MICROSECOND_SYM",
  "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM", "SENSITIVE_SYM",
  "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM", "SESSION_SYM",
  "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR", "SHARE_SYM",
  "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN", "SIGNAL_SYM",
  "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLOW", "SMALLINT", "SNAPSHOT_SYM",
  "SOCKET_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM", "SPATIAL_SYM",
  "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM", "SQLWARNING_SYM",
  "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CACHE_SYM",
  "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "SQL_NO_FCACHE_SYM",
  "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD", "SSL_SYM", "STARTING",
  "STARTS_SYM", "START_SYM", "STATUS_SYM", "NOLOCK_SYM", "STDDEV_SAMP_SYM",
  "STD_SYM", "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN", "STRING_SYM",
  "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM", "SUBPARTITIONS_SYM",
  "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM",
  "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE", "TABLES", "TABLESPACE",
  "TABLE_REF_PRIORITY", "TABLE_SYM", "TABLE_STATS_SYM",
  "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM",
  "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM",
  "THREAD_STATS_SYM", "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF",
  "TIME_SYM", "TINYBLOB", "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING",
  "TRANSACTION_SYM", "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", "TRUE_SYM",
  "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM",
  "ULONGLONG_NUM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM",
  "UNICODE_SYM", "UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNSIGNED", "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM",
  "USAGE", "USER", "USER_STATS_SYM", "USE_FRM", "USE_SYM", "USING",
  "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VALUES",
  "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES", "VARIANCE_SYM",
  "VARYING", "VAR_SAMP_SYM", "VIEW_SYM", "WAIT_SYM", "WARNINGS",
  "WEEK_SYM", "WHEN_SYM", "WHERE", "WHILE_SYM", "WITH", "WITH_CUBE_SYM",
  "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM", "WRITE_SYM", "X509_SYM",
  "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL",
  "'|'", "'&'", "'-'", "'+'", "'*'", "'/'", "'%'", "'^'", "'~'", "'('",
  "')'", "','", "'!'", "'{'", "'}'", "';'", "'@'", "'.'", "':'", "$accept",
  "query", "$@1", "opt_end_of_input", "verb_clause", "statement",
  "deallocate", "deallocate_or_drop", "prepare", "prepare_src", "execute",
  "$@2", "execute_using", "execute_var_list", "execute_var_ident", "help",
  "$@3", "change", "$@4", "master_defs", "master_def",
  "ignore_server_id_list", "ignore_server_id", "master_file_def", "create",
  "$@5", "$@6", "$@7", "$@8", "$@9", "$@10", "server_def",
  "server_options_list", "server_option", "event_tail", "$@11",
  "ev_schedule_time", "$@12", "opt_ev_status", "ev_starts", "ev_ends",
  "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@13", "ev_sql_stmt_inner", "clear_privileges",
  "sp_name", "sp_a_chistics", "sp_c_chistics", "sp_chistic",
  "sp_c_chistic", "sp_suid", "call", "$@14", "opt_sp_cparam_list",
  "opt_sp_cparams", "sp_cparams", "sp_fdparam_list", "sp_fdparams",
  "sp_init_param", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1",
  "sp_decls", "sp_decl", "$@15", "$@16", "sp_cursor_stmt", "$@17",
  "sp_handler_type", "sp_hcond_list", "sp_hcond_element", "sp_cond",
  "sqlstate", "opt_value", "sp_hcond", "signal_stmt", "signal_value",
  "opt_signal_value", "opt_set_signal_information",
  "signal_information_item_list", "signal_allowed_expr",
  "signal_condition_information_item_name", "resignal_stmt",
  "sp_decl_idents", "sp_opt_default", "sp_proc_stmt", "sp_proc_stmt_if",
  "$@18", "sp_proc_stmt_statement", "$@19", "sp_proc_stmt_return", "$@20",
  "sp_proc_stmt_unlabeled", "$@21", "sp_proc_stmt_leave",
  "sp_proc_stmt_iterate", "sp_proc_stmt_open", "sp_proc_stmt_fetch",
  "$@22", "sp_proc_stmt_close", "sp_opt_fetch_noise", "sp_fetch_list",
  "sp_if", "$@23", "$@24", "$@25", "sp_elseifs", "case_stmt_specification",
  "simple_case_stmt", "$@26", "$@27", "searched_case_stmt", "$@28",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@29", "$@30", "searched_when_clause", "$@31",
  "$@32", "else_clause_opt", "sp_labeled_control", "$@33", "sp_opt_label",
  "sp_labeled_block", "$@34", "sp_unlabeled_block", "$@35",
  "sp_block_content", "$@36", "sp_unlabeled_control", "$@37", "$@38",
  "$@39", "trg_action_time", "trg_event", "change_tablespace_access",
  "change_tablespace_info", "tablespace_info", "opt_logfile_group_name",
  "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@40", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create2",
  "create2a", "$@41", "create3", "$@42", "$@43", "opt_create_partitioning",
  "opt_partitioning", "partitioning", "$@44", "have_partitioning",
  "partition_entry", "$@45", "partition", "part_type_def", "$@46",
  "opt_linear", "opt_key_algo", "part_field_list", "part_field_item_list",
  "part_field_item", "part_column_list", "part_func", "sub_part_func",
  "opt_num_parts", "opt_sub_part", "$@47", "$@48", "sub_part_field_list",
  "sub_part_field_item", "part_func_expr", "opt_num_subparts", "part_defs",
  "part_def_list", "part_definition", "$@49", "part_name",
  "opt_part_values", "$@50", "$@51", "part_func_max", "part_values_in",
  "part_value_list", "part_value_item", "$@52", "$@53",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@54", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@55", "$@56", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "$@57", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "opt_check_constraint", "check_constraint", "opt_constraint",
  "constraint", "field_spec", "$@58", "type", "$@59", "$@60",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "field_options",
  "field_opt_list", "field_option", "field_length", "opt_field_length",
  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now_or_signed_literal", "charset",
  "charset_name", "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "ascii", "unicode", "opt_binary", "opt_bin_mod",
  "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext", "spatial",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "spatial_key_options", "normal_key_opts",
  "spatial_key_opts", "fulltext_key_opts", "key_using_alg", "all_key_opt",
  "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident", "opt_component",
  "string_list", "alter", "$@61", "$@62", "$@63", "$@64", "$@65", "$@66",
  "$@67", "ev_alter_on_schedule_completion", "opt_ev_rename_to",
  "opt_ev_sql_stmt", "ident_or_empty", "alter_commands", "$@68", "$@69",
  "$@70", "remove_partitioning", "all_or_alt_part_name_list",
  "add_partition_rule", "$@71", "add_part_extra", "reorg_partition_rule",
  "$@72", "reorg_parts_rule", "$@73", "alt_part_name_list",
  "alt_part_name_item", "alter_list", "add_column", "alter_list_item",
  "$@74", "$@75", "$@76", "opt_column", "opt_ignore", "opt_restrict",
  "opt_place", "opt_to", "slave", "$@77", "$@78", "start",
  "start_transaction_opts", "slave_thread_opts", "$@79",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "checksum", "$@80", "opt_checksum_type", "repair",
  "$@81", "opt_mi_repair_type", "mi_repair_types", "mi_repair_type",
  "analyze", "$@82", "binlog_base64_event", "check", "$@83",
  "opt_mi_check_type", "mi_check_types", "mi_check_type", "optimize",
  "$@84", "opt_no_write_to_binlog", "rename", "$@85", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "$@86",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "$@87",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "$@88", "cache_keys_spec", "$@89",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_paren_derived", "select_init2", "$@90",
  "select_part2", "$@91", "$@92", "select_into", "select_from",
  "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_alias", "optional_braces", "expr", "bool_pri",
  "predicate", "bit_expr", "or", "and", "not", "not2", "comp_op",
  "all_or_any", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "geometry_function", "function_call_generic", "@93", "fulltext_options",
  "opt_natural_language_mode", "opt_query_expansion", "opt_udf_expr_list",
  "udf_expr_list", "udf_expr", "sum_expr", "$@94", "$@95", "$@96",
  "variable", "$@97", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "$@98", "gorder_list",
  "in_sum_expr", "$@99", "cast_type", "opt_expr_list", "expr_list",
  "ident_list_arg", "ident_list", "opt_expr", "opt_else", "when_list",
  "table_ref", "join_table_list", "esc_table_ref", "derived_table_list",
  "join_table", "$@100", "$@101", "$@102", "$@103", "$@104", "$@105",
  "$@106", "normal_join", "table_factor", "$@107", "select_derived_union",
  "$@108", "$@109", "select_init2_derived", "select_part2_derived",
  "$@110", "$@111", "select_derived", "$@112", "select_derived2", "$@113",
  "$@114", "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@115",
  "$@116", "index_hints_list", "opt_index_hints_list", "$@117",
  "opt_key_definition", "$@118", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@119", "having_clause", "$@120", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@121", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "delete_limit_clause", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "procedure_clause", "$@122", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@123",
  "select_var_list", "select_var_ident", "into", "$@124",
  "into_destination", "$@125", "$@126", "do", "$@127", "drop", "$@128",
  "$@129", "$@130", "table_list", "table_name", "table_alias_ref_list",
  "table_alias_ref", "if_exists", "opt_temporary", "insert", "$@131",
  "$@132", "replace", "$@133", "$@134", "insert_lock_option",
  "replace_lock_option", "insert2", "insert_table", "insert_field_spec",
  "$@135", "fields", "insert_values", "$@136", "$@137", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "no_braces",
  "$@138", "opt_values", "values", "expr_or_default", "opt_insert_update",
  "$@139", "update", "$@140", "$@141", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@142", "single_multi", "$@143", "$@144", "$@145", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "$@146", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@147", "show_param",
  "$@148", "$@149", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@150", "$@151", "describe_command",
  "opt_extended_describe", "opt_describe_column", "flush", "$@152",
  "flush_options", "$@153", "$@154", "opt_with_read_lock",
  "flush_options_list", "flush_option", "opt_table_list", "reset", "$@155",
  "reset_options", "reset_option", "$@156", "slave_reset_options", "purge",
  "$@157", "purge_options", "purge_option", "kill", "kill_option", "use",
  "load", "$@158", "$@159", "$@160", "$@161", "data_or_xml", "opt_local",
  "load_data_lock", "opt_duplicate", "opt_field_term", "field_term_list",
  "field_term", "opt_line_term", "line_term_list", "line_term",
  "opt_xml_rows_identified_by", "opt_ignore_lines", "lines_or_rows",
  "opt_field_or_var_spec", "fields_or_vars", "field_or_var",
  "opt_load_data_set_spec", "load_data_set_list", "load_data_set_elem",
  "text_literal", "text_string", "param_marker", "signed_literal",
  "literal", "NUM_literal", "insert_ident", "table_wild", "order_ident",
  "simple_ident", "simple_ident_nospvar", "simple_ident_q", "field_ident",
  "table_ident", "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident", "label_ident", "ident_or_text", "user", "keyword", "keyword_sp",
  "set", "$@162", "opt_option", "option_value_list", "option_type_value",
  "$@163", "option_type", "option_type2", "opt_var_type",
  "opt_var_ident_type", "ext_option_value", "sys_option_value",
  "option_value", "internal_variable_name", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "$@164",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "$@165", "handler", "$@166", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "$@167",
  "handler_rkey_mode", "revoke", "revoke_command", "grant",
  "grant_command", "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@168", "$@169", "$@170",
  "$@171", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "grant_user",
  "opt_column_list", "column_list", "column_list_id", "require_clause",
  "grant_options", "opt_grant_option", "grant_option_list", "grant_option",
  "begin", "$@172", "opt_work", "opt_chain", "opt_release",
  "opt_savepoint", "commit", "rollback", "savepoint", "release",
  "union_clause", "union_list", "$@173", "union_opt",
  "opt_union_order_or_limit", "union_order_or_limit", "$@174",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@175", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@176",
  "view_list_opt", "view_list", "view_select", "$@177", "view_select_aux",
  "view_check_option", "trigger_tail", "$@178", "$@179", "$@180",
  "udf_tail", "sf_tail", "$@181", "$@182", "$@183", "$@184", "$@185",
  "sp_tail", "$@186", "$@187", "$@188", "$@189", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@190", "opt_migrate", "install", "uninstall", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   124,    38,    45,    43,    42,    47,    37,    94,
     126,    40,    41,    44,    33,   123,   125,    59,    64,    46,
      58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   621,   622,   623,   622,   622,   624,   624,   625,   625,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   627,   628,   628,   629,   630,   630,   632,   631,   633,
     633,   634,   634,   635,   637,   636,   639,   638,   640,   640,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   642,   642,   642,   643,   644,
     644,   644,   644,   646,   645,   647,   645,   648,   645,   649,
     645,   650,   645,   651,   645,   645,   645,   645,   645,   652,
     653,   653,   654,   654,   654,   654,   654,   654,   654,   656,
     655,   658,   657,   657,   659,   659,   659,   659,   660,   660,
     661,   661,   662,   662,   663,   663,   664,   664,   666,   665,
     667,   667,   667,   667,   667,   667,   667,   667,   667,   667,
     667,   667,   667,   668,   669,   669,   670,   670,   671,   671,
     672,   672,   672,   672,   672,   672,   672,   673,   673,   673,
     674,   674,   676,   675,   677,   677,   678,   678,   679,   679,
     680,   680,   681,   681,   682,   683,   684,   684,   685,   685,
     686,   687,   687,   687,   687,   688,   688,   689,   689,   690,
     690,   692,   691,   691,   693,   691,   691,   695,   694,   696,
     696,   697,   697,   698,   699,   699,   700,   701,   701,   702,
     702,   702,   702,   702,   703,   704,   704,   705,   705,   706,
     706,   707,   707,   708,   708,   708,   709,   709,   709,   709,
     709,   709,   709,   709,   709,   709,   709,   709,   710,   711,
     711,   712,   712,   713,   713,   713,   713,   713,   713,   713,
     713,   713,   713,   713,   713,   713,   715,   714,   717,   716,
     719,   718,   721,   720,   722,   723,   724,   726,   725,   727,
     728,   728,   728,   729,   729,   731,   732,   733,   730,   734,
     734,   734,   735,   735,   737,   738,   736,   740,   739,   741,
     741,   742,   742,   744,   745,   743,   747,   748,   746,   749,
     749,   751,   750,   752,   752,   754,   753,   756,   755,   758,
     757,   759,   760,   761,   759,   762,   759,   763,   763,   764,
     764,   764,   765,   766,   767,   768,   768,   769,   769,   770,
     771,   772,   772,   774,   773,   775,   775,   775,   776,   776,
     776,   777,   778,   778,   778,   779,   779,   779,   779,   779,
     779,   779,   779,   780,   781,   781,   781,   782,   782,   782,
     782,   782,   783,   784,   784,   784,   785,   785,   785,   785,
     785,   785,   785,   786,   787,   787,   787,   788,   788,   788,
     789,   790,   791,   792,   793,   794,   794,   794,   795,   796,
     797,   798,   799,   800,   801,   802,   803,   804,   804,   805,
     805,   806,   806,   807,   807,   807,   807,   808,   809,   808,
     810,   811,   810,   812,   810,   813,   814,   814,   816,   815,
     817,   819,   818,   820,   821,   822,   821,   821,   821,   821,
     821,   823,   823,   824,   824,   825,   825,   826,   826,   827,
     828,   829,   830,   831,   831,   832,   833,   832,   834,   832,
     835,   835,   836,   837,   838,   838,   839,   839,   840,   840,
     842,   841,   843,   844,   845,   844,   846,   844,   847,   847,
     848,   848,   849,   849,   851,   852,   850,   853,   853,   854,
     854,   855,   855,   856,   856,   858,   857,   859,   860,   860,
     861,   861,   862,   862,   862,   862,   862,   862,   862,   862,
     864,   865,   863,   866,   866,   867,   867,   868,   868,   869,
     869,   870,   870,   871,   871,   872,   873,   873,   874,   874,
     875,   875,   876,   876,   876,   877,   877,   877,   877,   877,
     877,   877,   877,   877,   877,   877,   877,   877,   878,   877,
     877,   877,   877,   877,   877,   877,   877,   877,   877,   877,
     879,   880,   881,   882,   883,   883,   883,   883,   883,   883,
     884,   884,   884,   885,   885,   886,   886,   886,   886,   887,
     888,   888,   889,   889,   890,   890,   891,   891,   891,   891,
     891,   891,   892,   892,   893,   894,   894,   895,   897,   896,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   899,   898,   900,   898,   898,
     898,   901,   901,   901,   901,   901,   901,   901,   901,   902,
     903,   903,   904,   904,   905,   905,   905,   905,   905,   906,
     906,   906,   906,   906,   907,   907,   907,   908,   908,   908,
     909,   910,   910,   911,   911,   912,   912,   912,   913,   913,
     913,   913,   914,   914,   915,   915,   916,   916,   917,   917,
     918,   918,   918,   918,   918,   918,   918,   918,   918,   918,
     918,   919,   920,   920,   921,   921,   922,   922,   923,   923,
     924,   924,   925,   925,   926,   926,   927,   928,   928,   929,
     929,   930,   930,   931,   931,   931,   932,   932,   932,   933,
     933,   933,   933,   933,   933,   933,   934,   934,   935,   935,
     936,   937,   937,   938,   938,   939,   939,   939,   939,   940,
     940,   940,   940,   940,   941,   941,   941,   941,   941,   942,
     943,   943,   944,   944,   945,   945,   946,   946,   946,   947,
     947,   948,   949,   950,   951,   951,   952,   952,   953,   953,
     954,   954,   955,   955,   956,   956,   957,   957,   958,   958,
     959,   959,   960,   960,   961,   962,   962,   963,   963,   963,
     964,   964,   965,   965,   966,   966,   967,   967,   968,   968,
     970,   969,   971,   969,   969,   972,   969,   973,   969,   974,
     969,   975,   969,   976,   969,   969,   969,   969,   969,   969,
     977,   977,   977,   977,   978,   978,   979,   979,   980,   980,
     981,   981,   981,   981,   981,   981,   981,   981,   981,   981,
     982,   981,   981,   983,   981,   984,   981,   981,   981,   981,
     985,   986,   986,   988,   987,   989,   989,   989,   991,   990,
     992,   993,   992,   994,   994,   995,   996,   996,   997,   998,
     998,   998,   999,   998,  1000,  1001,   998,   998,   998,   998,
     998,   998,   998,   998,   998,   998,   998,   998,   998,   998,
    1002,  1002,  1003,  1003,  1004,  1004,  1004,  1005,  1005,  1005,
    1006,  1006,  1006,  1006,  1008,  1007,  1007,  1009,  1007,  1007,
    1010,  1011,  1011,  1013,  1012,  1014,  1014,  1015,  1015,  1015,
    1016,  1016,  1017,  1017,  1019,  1018,  1020,  1020,  1020,  1022,
    1021,  1023,  1023,  1024,  1024,  1025,  1025,  1025,  1027,  1026,
    1028,  1030,  1029,  1031,  1031,  1032,  1032,  1033,  1033,  1033,
    1033,  1033,  1033,  1035,  1034,  1036,  1036,  1036,  1038,  1037,
    1037,  1039,  1039,  1040,  1040,  1041,  1043,  1042,  1044,  1044,
    1045,  1045,  1046,  1047,  1048,  1048,  1050,  1049,  1051,  1051,
    1052,  1052,  1053,  1054,  1056,  1055,  1058,  1057,  1059,  1059,
    1060,  1060,  1061,  1062,  1062,  1063,  1063,  1064,  1064,  1066,
    1065,  1068,  1069,  1067,  1070,  1070,  1070,  1070,  1070,  1071,
    1071,  1072,  1072,  1073,  1073,  1074,  1074,  1074,  1074,  1075,
    1075,  1075,  1076,  1076,  1076,  1077,  1077,  1078,  1079,  1080,
    1080,  1080,  1080,  1080,  1081,  1081,  1082,  1082,  1082,  1082,
    1082,  1082,  1082,  1082,  1082,  1082,  1082,  1083,  1083,  1083,
    1083,  1083,  1083,  1084,  1084,  1084,  1084,  1084,  1084,  1084,
    1084,  1084,  1084,  1084,  1084,  1084,  1084,  1085,  1085,  1085,
    1085,  1085,  1085,  1085,  1085,  1085,  1085,  1085,  1085,  1085,
    1085,  1085,  1086,  1086,  1087,  1087,  1088,  1088,  1089,  1089,
    1090,  1090,  1090,  1090,  1090,  1090,  1091,  1091,  1092,  1092,
    1092,  1092,  1092,  1092,  1092,  1092,  1092,  1092,  1092,  1092,
    1092,  1092,  1092,  1092,  1092,  1092,  1092,  1092,  1092,  1092,
    1092,  1092,  1092,  1092,  1092,  1092,  1092,  1092,  1093,  1093,
    1093,  1093,  1093,  1093,  1093,  1093,  1093,  1093,  1093,  1093,
    1093,  1093,  1093,  1093,  1093,  1093,  1093,  1093,  1093,  1093,
    1093,  1093,  1093,  1093,  1093,  1094,  1094,  1094,  1094,  1094,
    1094,  1094,  1094,  1094,  1094,  1094,  1094,  1094,  1094,  1094,
    1094,  1094,  1094,  1094,  1094,  1094,  1094,  1094,  1094,  1094,
    1095,  1095,  1095,  1095,  1095,  1095,  1095,  1095,  1095,  1095,
    1095,  1095,  1095,  1095,  1095,  1095,  1095,  1096,  1096,  1096,
    1096,  1096,  1096,  1096,  1096,  1098,  1097,  1097,  1099,  1099,
    1100,  1100,  1101,  1101,  1102,  1102,  1103,  1103,  1104,  1105,
    1105,  1105,  1105,  1105,  1105,  1105,  1106,  1107,  1105,  1105,
    1105,  1105,  1105,  1105,  1105,  1105,  1105,  1105,  1105,  1108,
    1105,  1110,  1109,  1111,  1111,  1111,  1112,  1112,  1113,  1113,
    1114,  1115,  1114,  1116,  1116,  1118,  1117,  1119,  1119,  1119,
    1119,  1119,  1119,  1119,  1119,  1119,  1119,  1119,  1120,  1120,
    1121,  1121,  1122,  1122,  1123,  1123,  1124,  1124,  1125,  1125,
    1126,  1126,  1127,  1127,  1128,  1129,  1129,  1130,  1130,  1131,
    1131,  1132,  1131,  1133,  1131,  1134,  1131,  1131,  1135,  1131,
    1136,  1131,  1131,  1137,  1131,  1138,  1131,  1131,  1139,  1139,
    1139,  1141,  1140,  1140,  1140,  1142,  1143,  1144,  1142,  1145,
    1147,  1148,  1146,  1150,  1149,  1152,  1153,  1151,  1154,  1155,
    1156,  1156,  1157,  1157,  1157,  1157,  1158,  1158,  1160,  1159,
    1161,  1159,  1162,  1162,  1163,  1164,  1163,  1166,  1165,  1167,
    1167,  1168,  1168,  1169,  1169,  1170,  1170,  1171,  1171,  1171,
    1171,  1171,  1171,  1171,  1171,  1171,  1171,  1171,  1171,  1172,
    1172,  1172,  1172,  1172,  1172,  1172,  1172,  1172,  1173,  1173,
    1173,  1173,  1174,  1174,  1174,  1175,  1175,  1176,  1176,  1177,
    1178,  1177,  1179,  1180,  1179,  1181,  1181,  1182,  1182,  1183,
    1183,  1184,  1184,  1184,  1185,  1186,  1186,  1187,  1188,  1188,
    1190,  1189,  1191,  1191,  1192,  1192,  1192,  1193,  1193,  1194,
    1194,  1195,  1196,  1196,  1196,  1197,  1197,  1197,  1197,  1197,
    1198,  1198,  1199,  1199,  1199,  1199,  1199,  1199,  1200,  1200,
    1200,  1200,  1200,  1201,  1201,  1201,  1201,  1201,  1202,  1202,
    1202,  1202,  1203,  1204,  1204,  1205,  1206,  1205,  1207,  1207,
    1208,  1208,  1209,  1211,  1210,  1212,  1212,  1213,  1213,  1215,
    1214,  1217,  1218,  1216,  1216,  1216,  1220,  1219,  1222,  1221,
    1223,  1221,  1221,  1221,  1221,  1221,  1221,  1224,  1221,  1221,
    1221,  1221,  1221,  1221,  1225,  1225,  1226,  1227,  1227,  1228,
    1229,  1229,  1230,  1230,  1232,  1233,  1231,  1235,  1236,  1234,
    1237,  1237,  1237,  1237,  1238,  1238,  1239,  1239,  1240,  1241,
    1241,  1241,  1242,  1241,  1243,  1243,  1244,  1244,  1245,  1244,
    1246,  1244,  1247,  1247,  1248,  1248,  1249,  1250,  1250,  1251,
    1251,  1253,  1252,  1254,  1254,  1255,  1255,  1256,  1256,  1257,
    1258,  1257,  1260,  1261,  1259,  1262,  1262,  1263,  1264,  1264,
    1265,  1266,  1266,  1268,  1267,  1270,  1269,  1271,  1269,  1272,
    1269,  1273,  1273,  1274,  1274,  1275,  1275,  1276,  1276,  1277,
    1277,  1277,  1279,  1278,  1280,  1280,  1281,  1281,  1282,  1282,
    1283,  1283,  1283,  1283,  1283,  1283,  1283,  1283,  1283,  1284,
    1284,  1286,  1285,  1287,  1287,  1287,  1287,  1287,  1287,  1287,
    1287,  1287,  1287,  1287,  1287,  1287,  1288,  1287,  1289,  1287,
    1287,  1287,  1287,  1287,  1287,  1287,  1287,  1287,  1287,  1287,
    1287,  1287,  1287,  1287,  1287,  1287,  1287,  1287,  1287,  1287,
    1287,  1287,  1287,  1287,  1287,  1287,  1287,  1287,  1287,  1287,
    1287,  1287,  1287,  1287,  1287,  1287,  1287,  1287,  1290,  1290,
    1290,  1291,  1291,  1292,  1292,  1293,  1293,  1294,  1294,  1295,
    1295,  1296,  1296,  1297,  1297,  1298,  1298,  1298,  1300,  1299,
    1301,  1299,  1302,  1302,  1303,  1303,  1303,  1304,  1304,  1304,
    1306,  1305,  1308,  1309,  1307,  1307,  1310,  1310,  1311,  1311,
    1312,  1312,  1312,  1312,  1312,  1312,  1312,  1312,  1312,  1312,
    1312,  1312,  1312,  1312,  1312,  1312,  1312,  1312,  1312,  1312,
    1312,  1312,  1313,  1313,  1315,  1314,  1316,  1316,  1318,  1317,
    1317,  1317,  1317,  1319,  1319,  1321,  1320,  1322,  1322,  1323,
    1323,  1324,  1325,  1325,  1325,  1326,  1328,  1329,  1330,  1331,
    1327,  1332,  1332,  1333,  1333,  1334,  1334,  1334,  1335,  1335,
    1335,  1336,  1336,  1337,  1337,  1338,  1338,  1338,  1338,  1339,
    1339,  1340,  1340,  1341,  1341,  1342,  1342,  1343,  1343,  1344,
    1344,  1345,  1345,  1345,  1346,  1346,  1347,  1347,  1348,  1348,
    1349,  1349,  1350,  1351,  1351,  1351,  1351,  1352,  1352,  1352,
    1353,  1354,  1354,  1354,  1355,  1355,  1355,  1355,  1355,  1355,
    1355,  1355,  1355,  1355,  1355,  1355,  1356,  1356,  1356,  1356,
    1356,  1357,  1357,  1358,  1358,  1359,  1360,  1360,  1361,  1361,
    1362,  1362,  1362,  1363,  1363,  1363,  1363,  1364,  1364,  1364,
    1365,  1365,  1366,  1367,  1367,  1368,  1369,  1370,  1371,  1371,
    1372,  1372,  1373,  1373,  1373,  1374,  1374,  1374,  1375,  1375,
    1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,
    1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,
    1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,
    1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,
    1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,  1376,
    1376,  1376,  1376,  1378,  1377,  1379,  1379,  1380,  1380,  1382,
    1381,  1383,  1383,  1383,  1383,  1384,  1384,  1385,  1385,  1385,
    1385,  1386,  1386,  1386,  1386,  1387,  1387,  1388,  1388,  1389,
    1389,  1389,  1389,  1389,  1389,  1389,  1390,  1390,  1390,  1391,
    1391,  1391,  1391,  1392,  1392,  1392,  1393,  1393,  1393,  1393,
    1393,  1395,  1394,  1396,  1396,  1397,  1397,  1398,  1399,  1399,
    1399,  1399,  1401,  1400,  1402,  1402,  1403,  1402,  1404,  1404,
    1405,  1405,  1406,  1406,  1406,  1406,  1407,  1406,  1408,  1408,
    1408,  1408,  1408,  1409,  1410,  1410,  1410,  1410,  1410,  1411,
    1412,  1412,  1412,  1412,  1413,  1413,  1414,  1414,  1415,  1415,
    1416,  1416,  1418,  1417,  1419,  1417,  1420,  1417,  1421,  1417,
    1417,  1417,  1417,  1417,  1417,  1417,  1417,  1417,  1417,  1417,
    1417,  1417,  1417,  1417,  1417,  1417,  1417,  1417,  1417,  1417,
    1417,  1417,  1417,  1417,  1417,  1417,  1422,  1422,  1423,  1423,
    1424,  1424,  1424,  1425,  1425,  1425,  1425,  1426,  1426,  1427,
    1427,  1428,  1428,  1428,  1428,  1428,  1429,  1429,  1430,  1430,
    1431,  1432,  1432,  1432,  1432,  1432,  1433,  1433,  1434,  1434,
    1435,  1435,  1436,  1436,  1436,  1436,  1436,  1438,  1437,  1439,
    1439,  1440,  1440,  1440,  1441,  1441,  1441,  1442,  1442,  1443,
    1444,  1444,  1445,  1446,  1447,  1447,  1449,  1448,  1450,  1450,
    1450,  1451,  1451,  1453,  1452,  1454,  1454,  1455,  1455,  1455,
    1456,  1456,  1457,  1458,  1457,  1459,  1460,  1461,  1462,  1462,
    1463,  1463,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1465,  1465,  1465,  1466,  1466,  1466,  1466,  1466,  1467,  1467,
    1467,  1467,  1467,  1467,  1468,  1468,  1469,  1470,  1471,  1471,
    1471,  1472,  1473,  1473,  1473,  1474,  1474,  1474,  1476,  1475,
    1477,  1477,  1478,  1478,  1480,  1479,  1481,  1481,  1482,  1482,
    1482,  1482,  1484,  1485,  1486,  1483,  1487,  1487,  1489,  1490,
    1491,  1492,  1493,  1488,  1495,  1496,  1497,  1498,  1494,  1499,
    1499,  1499,  1499,  1499,  1499,  1500,  1500,  1500,  1501,  1501,
    1502,  1502,  1502,  1503,  1503,  1504,  1505,  1504,  1506,  1506,
    1507,  1508
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     1,     1,     4,     1,     2,     0,     4,     0,
       2,     3,     1,     2,     0,     3,     0,     5,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     5,     1,     0,     1,     3,     1,     3,
       3,     3,     3,     0,     7,     0,    12,     0,    12,     0,
      12,     0,     6,     0,     3,     4,     4,     3,     2,    10,
       1,     3,     2,     2,     2,     2,     2,     2,     2,     0,
      13,     0,     6,     2,     0,     1,     3,     1,     0,     2,
       0,     2,     0,     1,     3,     4,     0,     2,     0,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     3,     1,     0,     2,     0,     2,
       2,     2,     2,     2,     3,     3,     1,     1,     1,     2,
       3,     3,     0,     4,     0,     3,     0,     1,     3,     1,
       0,     1,     3,     1,     0,     3,     0,     1,     3,     1,
       4,     0,     1,     1,     1,     0,     3,     2,     3,     0,
       3,     0,     5,     5,     0,     7,     5,     0,     2,     1,
       1,     1,     3,     1,     1,     1,     3,     0,     1,     1,
       1,     1,     2,     1,     3,     1,     1,     0,     1,     0,
       2,     3,     5,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       3,     0,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     5,     0,     2,
       0,     3,     0,     2,     2,     2,     2,     0,     6,     2,
       0,     2,     1,     1,     3,     0,     0,     0,     7,     0,
       2,     2,     1,     1,     0,     0,     8,     0,     6,     1,
       2,     1,     2,     0,     0,     6,     0,     0,     6,     0,
       2,     0,     5,     0,     1,     0,     5,     0,     2,     0,
       5,     4,     0,     0,     8,     0,     7,     1,     1,     1,
       1,     1,     2,     4,     5,     0,     4,     4,     4,     3,
       3,     2,     2,     0,     2,     1,     2,     3,     1,     1,
       1,     1,     1,     2,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     3,     1,     1,     1,
       1,     1,     1,     1,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     3,     1,     1,     1,
       2,     2,     2,     1,     1,     1,     1,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     4,     0,     1,     1,
       1,     1,     1,     2,     3,     2,     4,     5,     0,     5,
       0,     0,     5,     0,     7,     1,     0,     1,     0,     4,
       0,     0,     3,     5,     6,     0,     4,     2,     2,     2,
       2,     0,     1,     0,     3,     0,     1,     1,     3,     1,
       4,     5,     5,     0,     2,     0,     0,     7,     0,    10,
       1,     3,     1,     1,     0,     2,     0,     3,     1,     3,
       0,     6,     1,     0,     0,     5,     0,     4,     1,     1,
       1,     3,     1,     3,     0,     0,     5,     1,     3,     1,
       1,     0,     3,     1,     3,     0,     4,     1,     0,     1,
       2,     1,     3,     4,     3,     3,     3,     4,     4,     3,
       0,     0,     6,     0,     1,     0,     1,     1,     2,     1,
       1,     0,     1,     1,     2,     1,     0,     3,     0,     1,
       1,     2,     1,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     0,     6,
       1,     1,     3,     4,     4,     2,     2,     2,     3,     3,
       4,     4,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     1,     1,     1,     1,     1,
       1,     3,     1,     1,     2,     2,     7,     8,     8,     8,
       8,     2,     0,     1,     4,     0,     1,     2,     0,     4,
       3,     3,     3,     1,     2,     1,     1,     3,     2,     3,
       2,     2,     1,     3,     3,     2,     3,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     2,     3,     2,     3,
       2,     2,     3,     3,     3,     0,     6,     0,     6,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     1,     2,     1,     2,     3,     2,     1,
       1,     1,     1,     1,     1,     1,     2,     0,     1,     1,
       5,     0,     1,     2,     1,     1,     1,     1,     3,     3,
       3,     3,     0,     1,     0,     1,     0,     1,     2,     1,
       1,     2,     2,     4,     1,     3,     2,     1,     2,     2,
       2,     2,     2,     1,     2,     1,     1,     1,     1,     1,
       0,     2,     1,     1,     1,     1,     1,     0,     2,     1,
       1,     0,     1,     1,     2,     2,     1,     2,     2,     0,
       1,     1,     1,     3,     1,     3,     0,     1,     0,     1,
       5,     0,     3,     3,     1,     0,     2,     2,     2,     0,
       3,     3,     6,     6,     1,     1,     2,     2,     2,     1,
       2,     2,     1,     1,     0,     1,     1,     1,     1,     0,
       1,     1,     1,     0,     1,     2,     0,     1,     0,     1,
       0,     1,     1,     2,     1,     2,     1,     2,     2,     2,
       3,     2,     1,     1,     1,     1,     3,     1,     1,     1,
       4,     2,     1,     4,     0,     1,     0,     2,     1,     3,
       0,     6,     0,     5,     7,     0,     5,     0,     5,     0,
       5,     0,     4,     0,    11,     3,     4,     3,     3,     7,
       0,     3,     1,     4,     0,     3,     0,     2,     0,     1,
       0,     2,     2,     2,     2,     1,     1,     1,     3,     4,
       0,     6,     4,     0,     5,     0,     6,     4,     3,     1,
       2,     1,     1,     0,     5,     0,     3,     2,     0,     5,
       0,     0,     6,     1,     3,     1,     1,     3,     2,     3,
       2,     4,     0,     6,     0,     0,     8,     4,     4,     3,
       3,     2,     2,     6,     5,     3,     5,     1,     1,     1,
       0,     1,     0,     1,     0,     1,     1,     0,     2,     1,
       0,     1,     1,     1,     0,     5,     3,     0,     5,     3,
       3,     0,     3,     0,     2,     1,     3,     0,     1,     1,
       0,     2,     1,     3,     0,     5,     0,     1,     1,     0,
       6,     0,     1,     1,     2,     1,     1,     1,     0,     5,
       2,     0,     5,     0,     1,     1,     2,     1,     1,     1,
       1,     1,     2,     0,     5,     0,     1,     1,     0,     4,
       4,     3,     5,     1,     3,     3,     0,     6,     1,     1,
       1,     3,     2,     3,     1,     1,     0,     6,     1,     1,
       1,     3,     3,     4,     0,     6,     0,     2,     0,     4,
       0,     2,     1,     2,     4,     2,     3,     2,     3,     0,
       3,     0,     0,     6,     2,     1,     1,     2,     2,     8,
       4,     0,     1,     2,     1,     1,     1,     1,     1,     0,
       2,     4,     3,     1,     1,     3,     4,     0,     0,     0,
       2,     2,     1,     1,     0,     2,     3,     3,     3,     2,
       3,     4,     3,     4,     3,     4,     1,     3,     4,     3,
       3,     6,     1,     5,     6,     5,     7,     6,     8,     5,
       6,     4,     4,     5,     3,     4,     1,     3,     3,     3,
       3,     3,     3,     5,     5,     3,     3,     3,     3,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     1,     1,     3,     2,
       2,     2,     2,     3,     3,     5,     6,     4,     4,     7,
       2,     6,     5,     6,     6,     4,     4,     5,     4,     6,
       2,     4,     4,     4,    10,     6,     8,     6,     4,     4,
       6,     4,     4,     4,     6,     4,     7,     7,     7,     6,
       6,     6,     6,     3,     4,     6,     8,     2,     2,     4,
       8,     8,     6,     6,     2,     4,     6,     6,     8,     8,
       6,     8,     6,     2,     4,     8,     8,     2,     2,     2,
       4,     4,     4,     4,     3,     8,     4,     6,     4,     4,
       4,     6,     8,     6,     4,     6,     1,     6,     4,     4,
       4,     4,     4,     6,     4,     0,     5,     6,     2,     3,
       0,     4,     0,     3,     0,     1,     1,     3,     4,     4,
       5,     4,     4,     4,     5,     4,     0,     0,     7,     4,
       5,     4,     5,     4,     4,     4,     4,     4,     5,     0,
       8,     0,     3,     3,     1,     4,     0,     1,     0,     2,
       0,     0,     4,     4,     2,     0,     3,     2,     3,     2,
       1,     2,     1,     2,     1,     1,     1,     2,     0,     1,
       1,     3,     1,     3,     1,     3,     0,     1,     0,     2,
       4,     5,     1,     1,     1,     1,     4,     1,     3,     3,
       3,     0,     6,     0,     6,     0,     8,     4,     0,     8,
       0,    10,     6,     0,     8,     0,    10,     6,     1,     2,
       2,     0,     4,     3,     5,     2,     0,     0,     7,     1,
       0,     0,     6,     0,     3,     0,     0,     5,     0,     1,
       0,     1,     0,     2,     3,     3,     1,     1,     0,     7,
       0,     7,     1,     2,     0,     0,     2,     0,     2,     0,
       1,     1,     1,     1,     3,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     1,     1,     0,     2,     0,     1,     0,
       0,     3,     0,     0,     3,     2,     0,     0,     4,     4,
       2,     0,     1,     1,     3,     3,     1,     2,     0,     1,
       0,     4,     4,     2,     0,     1,     1,     0,     1,     0,
       1,     2,     1,     3,     3,     1,     1,     1,     1,     1,
       0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     0,     6,     0,     1,
       3,     1,     3,     0,     2,     3,     1,     2,     1,     0,
       3,     0,     0,     7,     2,     1,     0,     3,     0,     7,
       0,     6,     4,     6,     4,     4,     4,     0,     6,     4,
       4,     5,     6,     4,     1,     3,     1,     1,     3,     1,
       0,     2,     0,     1,     0,     0,     8,     0,     0,     6,
       0,     1,     1,     1,     1,     1,     2,     1,     1,     1,
       3,     4,     0,     3,     3,     1,     2,     2,     0,     3,
       0,     5,     3,     1,     3,     1,     3,     1,     1,     0,
       1,     0,     4,     0,     1,     3,     1,     1,     1,     0,
       0,     6,     0,     0,    11,     3,     1,     3,     3,     1,
       3,     0,     1,     0,     4,     0,     6,     0,     5,     0,
       6,     1,     3,     2,     4,     0,     2,     0,     2,     1,
       1,     1,     0,     4,     0,     1,     0,     1,     1,     3,
       1,     1,     2,     2,     2,     1,     1,     1,     1,     0,
       3,     0,     3,     2,     4,     4,     4,     3,     4,     4,
       1,     3,     3,     6,     2,     2,     0,     6,     0,     6,
       5,     2,     1,     1,     1,     5,     5,     2,     2,     1,
       4,     3,     2,     3,     2,     2,     1,     3,     4,     3,
       3,     2,     2,     3,     2,     2,     2,     2,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     1,
       1,     1,     1,     0,     1,     0,     2,     0,     1,     1,
       1,     0,     2,     0,     2,     0,     2,     2,     0,     4,
       0,     4,     1,     1,     0,     1,     1,     0,     1,     1,
       0,     4,     0,     0,     5,     1,     0,     3,     3,     1,
       2,     2,     2,     2,     2,     2,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     1,     0,     3,     3,     1,     0,     3,
       1,     2,     1,     0,     1,     0,     3,     3,     3,     2,
       2,     3,     0,     1,     1,     2,     0,     0,     0,     0,
      21,     1,     1,     0,     1,     0,     1,     1,     0,     1,
       1,     0,     2,     2,     1,     3,     4,     3,     3,     0,
       2,     2,     1,     3,     3,     0,     4,     0,     3,     1,
       1,     0,     3,     2,     3,     1,     1,     2,     0,     2,
       3,     1,     5,     1,     1,     2,     2,     1,     1,     1,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     2,     2,     2,     1,     1,     1,     1,
       1,     1,     1,     3,     5,     1,     1,     1,     1,     1,
       3,     4,     5,     1,     5,     3,     2,     1,     3,     2,
       2,     4,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     4,     0,     1,     1,     3,     0,
       2,     1,     1,     1,     1,     0,     1,     0,     1,     1,
       1,     0,     2,     2,     2,     1,     2,     4,     5,     4,
       6,     2,     3,     3,     3,     5,     1,     3,     3,     2,
       2,     2,     1,     1,     4,     4,     1,     1,     1,     1,
       1,     0,     4,     1,     1,     1,     3,     3,     1,     1,
       2,     2,     0,     3,     4,     3,     0,     7,     1,     2,
       1,     1,     1,     1,     1,     1,     0,     5,     1,     1,
       1,     1,     1,     3,     6,     6,     6,     7,     5,     3,
       8,     8,     8,     6,     0,     1,     1,     2,     0,     1,
       1,     3,     0,     3,     0,     3,     0,     3,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     1,     3,     2,     2,     2,     2,     2,
       2,     2,     2,     1,     1,     2,     0,     1,     3,     1,
       2,     2,     2,     1,     3,     3,     1,     1,     3,     1,
       3,     4,     5,     4,     6,     1,     0,     3,     3,     1,
       1,     0,     2,     2,     2,     2,     0,     2,     0,     3,
       2,     1,     2,     2,     2,     2,     2,     0,     3,     0,
       1,     0,     3,     2,     0,     1,     2,     0,     1,     4,
       4,     5,     2,     3,     0,     1,     0,     4,     0,     1,
       1,     0,     1,     0,     2,     2,     1,     0,     1,     1,
       2,     3,     2,     0,     6,     3,     0,     0,     0,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     3,     1,     2,
       1,     2,     3,     3,     3,     0,     3,     3,     0,     7,
       0,     3,     1,     3,     0,     3,     2,     4,     0,     3,
       4,     4,     0,     0,     0,    16,     8,     7,     0,     0,
       0,     0,     0,    15,     0,     0,     0,     0,    12,     4,
       4,     3,     4,     3,     2,     1,     3,     5,     1,     1,
       0,     1,     1,     0,     2,     0,     0,     3,     0,     2,
       5,     3
};

/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,  2456,   975,  2387,     0,     0,     0,     0,     0,     0,
    2389,   113,    62,  1583,  1702,  1703,  1496,  1522,     2,     0,
     975,   163,     0,    74,  1524,     0,  1762,     0,     0,   975,
     441,     0,  1755,     0,     0,   975,  1527,  1744,   237,   163,
    2389,     0,  1021,  2215,  1621,     0,     0,     0,     0,  1604,
       0,  2272,  1572,     0,     0,     0,     0,     3,     8,    19,
       0,    38,    24,    28,    14,    18,    13,    51,    45,    36,
      10,    53,    54,    16,    42,    11,    12,    15,    34,    41,
      35,    37,    49,  1012,    22,    23,    29,    43,    58,    20,
      55,    52,    21,  1704,    25,    44,    39,    31,    59,    32,
      50,    33,    57,    27,    46,    26,     9,    17,    47,    48,
      40,    60,    30,    56,     0,   848,     0,     0,   913,     0,
       0,     0,     0,     0,   831,  2454,  2455,  2456,   977,   976,
       0,  2389,  1865,   960,   986,  1928,  1929,  1930,  1931,  1932,
    1933,  1934,  1879,  1935,  1936,  1938,  1937,  1939,  1940,  1880,
    1881,  1941,  1942,  1943,  1945,  1944,  1946,  1882,  1883,  1947,
    1948,  1949,  1950,  1951,  1884,  1885,  1952,  1955,  1954,  1953,
    1886,  1956,  1957,  1958,  1960,  1959,  1887,  1961,  1888,  1962,
    1963,  1964,  1965,  1966,  1967,  1968,  1970,  1969,  1889,  1971,
    1972,  1973,  1974,  1975,  1977,  1976,  1978,  1979,  1980,  1890,
    1981,  1982,  1983,  1984,  1985,  1986,  1987,  1891,  1988,  1989,
    1990,  2007,  1892,  1991,  1994,  1993,  1992,  1995,  1996,  1997,
    1999,  1998,  2000,  1893,  2001,  2002,  2003,  2005,  2004,  2009,
    2010,  2011,  1894,  2006,  2008,  2193,  2012,  2014,  2013,  2015,
    2017,  2016,  1895,  2018,  1896,  1897,  2019,  2020,  1863,  2021,
    1864,  2023,  2025,  2026,  2022,  2027,  2032,  1898,  2024,  2028,
    2029,  2030,  2031,  2033,  1899,  2034,  2035,  2036,  2037,  2038,
    2039,  2040,  2041,  2042,  2043,  2054,  2047,  2049,  2050,  2052,
    2048,  2053,  2057,  2056,  2058,  2059,  2060,  2055,  2045,  2051,
    2046,  2061,  2062,  2044,  2063,  2064,  2065,  2066,  2067,  2068,
    2069,  2070,  2071,  2072,  2073,  2075,  2074,  2076,  2077,  2078,
    2079,  2080,  2081,  2083,  2082,  2084,  2085,  2086,  2088,  2087,
    2090,  2091,  1900,  2089,  2092,  2093,  2094,  2095,  2096,  1901,
    1902,  1903,  2097,  2098,  1904,  2099,  2100,  2101,  1905,  2102,
    2103,  2105,  2104,  2106,  2107,  1906,  1907,  2108,  2109,  2110,
    2111,  2112,  2113,  2114,  2115,  2116,  2117,  2118,  2119,  2120,
    2121,  2122,  2124,  2123,  2125,  2126,  2127,  2128,  2129,  2130,
    2131,  1908,  2132,  1909,  2133,  2134,  1910,  2135,  1911,  2136,
    2137,  1912,  2138,  2139,  2140,  2141,  2142,  2143,  1913,  2144,
    2145,  2146,  1914,  2148,  2147,  2149,  1915,  2151,  2152,  1916,
    2150,  1918,  2153,  2154,  1917,  1919,  2155,  2156,  2158,  2157,
    2159,  2160,  2161,  1920,  2162,  1921,  2163,  2164,  2165,  2166,
    2167,  2169,  2168,  2170,  2171,  2172,  2173,  2176,  2178,  2174,
    2177,  2175,  2179,  2180,  2181,  2182,  2183,  2186,  2187,  2188,
    2189,  2184,  2185,  1922,  2190,  2191,  2192,  2194,  2195,  2197,
    2196,  1923,  1924,  2198,  2199,  1927,  2200,  2201,  2202,  2205,
    2203,  2204,  2207,  2206,  2208,  2209,  1925,  2210,  1926,  2211,
    2212,   182,  1868,   165,  1869,  1878,     0,  2264,  2263,   944,
     961,  2390,  2391,   536,   781,     0,     0,   782,     0,   535,
     780,   163,  2456,   118,     0,   532,   533,     0,     0,     0,
    1597,     0,  1520,  1520,  1520,     0,     0,  1520,  1520,     0,
    1523,  1520,   163,  1520,     0,    67,  1710,     0,     0,     0,
       0,  1862,     0,  1530,     0,  1763,  1764,     0,  1771,     0,
    1772,  1766,  2261,     0,     0,     0,     0,     0,   163,   978,
       0,  1581,     0,   227,   236,   238,   239,   235,     0,  2391,
    2402,  1013,  1019,  1031,  2216,  2213,  1687,   239,   933,   933,
     933,   931,   933,  1605,  1602,     0,     0,  1581,  1765,  2508,
       0,     0,     0,  2504,     0,  2509,     0,  1021,     0,     0,
       1,     5,     0,     0,  2002,  2101,  1700,  1698,  1857,     0,
     822,   849,     0,   827,     0,   825,  1874,  1873,  1872,     0,
     838,   837,   835,     0,   403,     0,  2465,     0,   829,   958,
    2388,     0,   184,     0,    76,     0,     0,     0,  2394,     0,
       0,     0,     0,   117,     0,     0,     0,   114,  1047,  1047,
    2456,  2458,  2460,   536,   534,     0,     0,     0,  1601,  1600,
    1599,     0,  1597,  1929,  1879,  1940,     0,  1830,     0,     0,
       0,  1296,     0,  1884,     0,  1956,  1958,  1889,     0,     0,
    1054,  1054,  1054,     0,     0,     0,  1979,  1980,  1839,     0,
       0,     0,  1827,  1840,  2014,  2015,     0,  1829,  2020,     0,
       0,     0,     0,  2038,  1837,     0,     0,  2070,  2072,     0,
       0,  2076,  2077,  2078,  2079,  1814,  1109,     0,  1054,  1826,
    1836,  2094,  1820,  2102,  2106,  2107,     0,  2116,     0,     0,
       0,  2142,  2146,     0,     0,  2166,     0,     0,  1054,  1813,
    2186,  2187,  2188,  2189,     0,  1828,  1922,  1838,     0,  2200,
    1054,  1054,  1054,     0,     0,     0,  2208,  2212,     0,     0,
       0,  2426,  1108,     0,  1261,     0,  1290,  1066,  1072,  1086,
       0,  1101,  1119,  1120,  1122,  1216,  1121,  1127,  1126,  1497,
    1824,  1125,  1124,  1825,  1118,  1847,  1868,  1846,     0,     0,
       0,     0,     0,     0,     0,     0,  1683,     0,     0,  1507,
    1520,    69,     0,  2308,  2323,  2324,  2320,  2325,  2343,  2326,
    2330,     0,  2322,  2314,     0,  2329,     0,  2318,  2327,     0,
    2312,     0,  2328,  2333,  2344,  2316,  2321,  2299,     0,  2306,
    2310,  1859,  1402,  2275,  2276,     0,    75,  1532,  1533,  1531,
     912,     0,  1761,     0,  1775,     0,   973,   451,   442,     0,
    1682,     0,  1681,     0,  1756,  2403,     0,     0,   949,  1535,
    1582,     0,  1534,  1752,  1750,     0,  1748,  1745,  1747,   228,
       0,     0,   258,  2308,     0,  2293,     0,  2397,  2394,  2404,
    2439,  2434,  2433,  2436,  2437,  1038,  2438,  1036,  1037,  2435,
    2432,  1047,  1032,  1034,  1035,  2219,  1642,     0,   715,     0,
    1695,  1695,  1643,     0,     0,  1695,     0,  1437,  1685,  1688,
       0,  2228,  1656,   778,   777,  1695,   776,  2229,  1681,     0,
    1630,  1644,     0,  1606,  1649,  1695,     0,  2230,     0,  1684,
       0,  1695,  1695,  1695,  1437,  1695,     0,  1622,     0,     0,
       0,     0,   234,   927,   937,   929,   924,     0,   930,   926,
       0,  2521,  2273,   912,  1819,  1818,  1866,  2505,  1817,  2513,
    2515,  2501,  2503,  2510,  1015,     0,  2408,     6,    61,     0,
    1707,  2463,  2464,  2462,   731,     0,  1054,  1875,  2457,   166,
     836,     0,   404,   166,     0,     0,     0,     0,     0,   405,
     406,   342,   820,     0,     0,   832,     0,  2465,     0,     0,
     988,   990,   989,  1006,   186,   183,   164,     0,   946,  1514,
    1516,   963,  2393,     0,     0,  2395,  2399,  1107,  1106,     0,
     111,   116,     0,     0,     0,  2365,   115,  2359,  2461,  1047,
    1047,  1047,  2453,     0,  2441,  2448,  2449,  2452,  2451,  2450,
    2447,     0,  2440,  2443,  2444,  2446,  2445,  2465,  2459,     0,
     783,   783,   783,     0,  1584,  1587,  1591,  1595,  1598,     0,
       0,  1407,  1140,  1407,  1407,  1407,  1297,     0,     0,     0,
       0,     0,     0,     0,     0,  1407,     0,  1177,  1150,     0,
    1178,     0,     0,     0,     0,     0,  1833,     0,     0,  2426,
       0,     0,     0,  1266,     0,     0,     0,  2426,     0,     0,
       0,     0,     0,  1292,  1294,  1846,  1407,     0,     0,  1407,
       0,     0,     0,     0,     0,  1059,     0,  1184,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1407,
    1407,     0,     0,  1407,     0,  1193,     0,  1835,     0,     0,
       0,  1834,     0,     0,  1832,  1831,  1815,     0,  1197,  1199,
    1198,     0,  1407,  1407,     0,     0,  1130,  1129,  1131,     0,
       0,     0,     0,     0,     0,  1105,  1104,  1103,  1102,     0,
       0,     0,  1110,     0,  1111,  1112,     0,  1113,  1114,  1115,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1132,
       0,     0,     0,  1816,  1225,     0,  1521,  1502,  1509,  1504,
       0,  1683,  1505,  1513,   417,     0,  1510,  2357,  1506,     0,
    1498,     0,    68,     0,  1741,  1733,  1739,     0,     0,     0,
    1727,  1737,  1729,  1738,  1728,     0,  1732,     0,  1740,  1731,
       0,  1730,  1736,  1735,  1734,  1711,  1715,  1719,  1712,  2309,
    2307,  2341,  2340,  2345,     0,  2342,  2338,  2331,  2366,  2335,
       0,  2366,  2337,  2336,  2366,  2332,  2339,  2366,  2304,     0,
    1403,  1404,     0,  2274,     0,  1858,     0,     0,   996,  1776,
    1777,  1773,  1402,  2262,  2265,     0,   452,     0,     0,   463,
       0,     0,    64,    65,     0,     0,   980,     0,   979,   983,
       0,     0,     0,  1538,  1528,  1537,  1751,  1753,     0,   226,
     251,   246,   254,   248,   250,   249,   255,   256,   257,   252,
     247,   253,   240,     0,  2307,     0,  2304,  2398,     0,  2400,
    2417,  1020,  2405,  1044,  1022,  1043,     0,  1033,  2214,  2217,
    2225,  1691,   714,     0,     0,  1665,  1655,     0,   536,     0,
       0,     0,     0,     0,     0,  1623,     0,     0,   573,     0,
    1648,  1438,  1689,  1690,  1695,     0,     0,  1695,     0,  1669,
    1661,  1685,     0,  1695,  1618,     0,     0,  1610,  1615,  1611,
       0,  1617,  1616,  1619,  1607,  1608,  1664,  1691,  1635,  1662,
    1685,  1668,  1667,  1666,  1647,  1654,     0,  1634,  1641,     0,
    1652,  1685,  1685,  1695,     0,  1695,   940,   939,   938,   934,
     935,   940,     0,  1603,  1331,     0,     0,  2502,  2516,  2500,
    2511,  2512,  2499,  1016,  2409,  1014,  2410,     0,     7,     4,
    1701,  1699,  1708,  1709,   732,   731,   527,   530,   529,     0,
       0,  1877,     0,   828,     0,  1683,   826,     0,     0,  1683,
     353,  1683,   407,   731,     0,     0,   833,   830,   959,     0,
       0,   440,  1006,   992,  1008,     0,   187,   189,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    77,    78,    94,   948,
     947,     0,   945,   971,   970,   968,     0,   969,   967,   962,
     964,   965,  2392,  2396,   537,   731,  1683,     0,   345,     0,
       0,     0,     0,     0,   536,     0,     0,  2442,   103,   784,
       0,     0,     0,  1589,  1517,  1585,  1519,  1857,     0,     0,
       0,  1593,     0,     0,  1408,  1407,     0,  1275,     0,     0,
       0,     0,  1298,     0,     0,     0,     0,     0,     0,     0,
    1246,     0,  1275,  1055,     0,  1204,     0,     0,     0,     0,
       0,     0,  1378,  1379,  1380,  1381,  1389,  1382,  1383,  1384,
    1391,  1396,  1385,  1386,  1392,  1393,  1394,  1387,  1395,  1390,
    1388,  1397,     0,  1377,     0,  1400,  1398,  1401,  1399,     0,
    1267,  1259,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1407,     0,     0,     0,  1407,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1407,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1173,     0,  1849,  1848,     0,     0,     0,     0,
    1134,     0,  1133,  1340,     0,  2411,  2427,     0,  2231,  1262,
    1264,     0,  1057,  1056,  1058,  1069,  1062,  1067,  1060,  1064,
       0,  1116,  1934,  1070,     0,     0,  1098,  2426,  1416,  1099,
    1084,  1089,  1090,     0,  1087,  1088,     0,  1092,     0,  1091,
    1095,  1096,  1097,  1100,     0,     0,     0,     0,  1123,  1128,
    1291,  1047,  1850,     0,  1500,   417,   420,   419,  1511,   418,
    1559,     0,   914,     0,     0,    70,    72,  1724,  1721,  1720,
    1722,  1726,  1725,  1723,     0,  1742,  2334,     0,  2315,     0,
    2319,  2313,  2317,     0,     0,  2305,     0,  2311,  1406,  2010,
    2087,     0,  1409,  2278,  1525,  2520,     0,  1774,     0,     0,
       0,   974,     0,  1047,   450,   449,   448,   447,     0,   465,
     445,   453,    66,  1473,  1474,  1470,  1468,  1469,  1758,  1471,
    1472,     0,     0,  1757,     0,     0,     0,     0,   951,  1536,
       0,  1754,  1749,  1746,     0,     0,     0,     0,     0,     0,
       0,  2401,  2419,  2418,  2406,  1047,  1428,  1048,  1048,  1846,
    2219,  2222,  2223,  2226,  2224,     0,  2221,  2220,  2235,     0,
    1693,  1696,  1697,     0,     0,  1677,  1671,  1670,  1659,  1672,
    1660,  1680,  1679,  1678,  1632,  1631,  1448,  1449,  1447,  1441,
    1442,  1446,  1445,  1627,  1686,  1676,  1674,  1657,  1695,  1675,
    1673,  1612,  1613,  1614,     0,  1437,     0,  1693,  1663,  1695,
    1685,     0,  1695,  1695,  1651,  1685,  1653,     0,   928,   937,
     925,   932,  1349,  1348,     0,  1305,     0,  1307,  1304,  1303,
    1302,     0,  1348,  2506,  2514,  2518,     0,  1437,  2416,  2414,
     528,  1559,  1559,     0,  1876,     0,     0,     0,     0,     0,
       0,     0,   167,   176,     0,     0,   351,   352,  1559,   350,
     393,   394,   397,   398,   399,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   400,  1559,  1559,   347,   373,   374,
     377,   378,   379,   380,   381,   343,     0,   348,   910,   910,
       0,  1559,  1559,   910,  1559,     0,     0,  1559,  1559,     0,
       0,  1559,     0,     0,   910,     0,  1559,   908,     0,     0,
    1559,  1559,  1559,  1559,   910,     0,     0,  1559,   440,  1559,
       0,     0,   920,     0,     0,  1559,     0,     0,  1559,     0,
    1559,   856,   907,   540,   560,   561,   821,   855,   857,   869,
     436,     0,   886,   909,  2466,  2467,  2468,   840,   995,   987,
     994,   991,  1006,  1004,   993,   773,   772,     0,  1007,   185,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1515,   972,   966,   112,   731,  1559,  1559,  1559,  1559,   349,
     382,   383,   386,   387,   388,   389,   392,   390,   391,     0,
       0,  1683,     0,     0,  2360,     0,  2494,     0,     0,     0,
     165,   538,     0,     0,   785,     0,     0,     0,     0,     0,
    1409,     0,  1860,  1592,  1331,  1596,  1595,     0,  1200,     0,
    1239,     0,  1241,  1242,  1243,     0,     0,     0,     0,     0,
    1201,     0,  1148,  1202,  1203,     0,     0,     0,     0,  1245,
       0,  1179,     0,     0,  1151,  1152,  1145,  1137,     0,  1218,
       0,     0,  1153,     0,     0,     0,     0,     0,  1219,  1293,
       0,  1295,  1850,     0,  1251,  1206,  1158,     0,  1249,     0,
    1159,  1220,  1221,  1222,  1185,  1208,  1209,     0,  1224,     0,
    1210,     0,     0,     0,     0,  1161,  1255,  1253,     0,     0,
       0,     0,  1257,  1194,  1163,     0,     0,     0,  1162,     0,
       0,     0,     0,     0,     0,     0,  1165,     0,  1146,  1254,
    1256,  1214,     0,  1174,     0,  2420,  1339,  2428,  1340,     0,
       0,  2422,  2412,  2417,  2425,  1138,     0,     0,     0,     0,
       0,  1851,  1063,  1068,  1061,  1065,  2426,     0,     0,     0,
       0,  1082,  1081,     0,     0,     0,  2426,  1416,  1085,     0,
       0,  1235,  1236,  1288,     0,  1503,  1501,  1512,  1557,  1558,
    1560,     0,  2358,   916,   915,  1508,   914,    73,     0,  1718,
    1743,  1713,  2370,     0,  2369,     0,  2353,  2356,  1857,     0,
       0,     0,  2288,  2282,  2289,  2291,  2285,  2290,  2292,  2283,
    2284,  2279,  2286,  1410,  1439,     0,   997,   999,  1000,   998,
    1006,     0,     0,  2268,  2269,  2267,  2266,   455,     0,  1459,
    1460,  1458,  1461,   464,  1462,     0,   476,     0,     0,     0,
    1760,  1759,     0,   981,   984,   985,   956,   955,   957,   950,
     952,   953,   520,  1542,     0,     0,     0,  1548,  1529,  1539,
       0,  1979,  2186,  2189,   241,   244,   243,   245,     0,     0,
       0,     0,     0,     0,  1042,  1331,  1489,  1039,  1026,  1439,
    1429,  1025,  1049,  1045,     0,  2218,     0,  2184,  2246,     0,
       0,     0,     0,     0,  2236,  1692,     0,  1636,     0,  1658,
       0,     0,  1629,     0,  1650,  1609,  1638,  1628,  1409,  1685,
    1624,  1626,  1625,   942,   941,   936,  1348,  1331,     0,     0,
    1328,  1350,     0,  1350,  1331,  1331,     0,  1331,  1402,  1345,
       0,     0,  2517,  1430,  2415,     0,     0,   824,   170,   173,
     171,     0,   172,     0,     0,   402,   401,     0,  1683,   395,
     124,   123,   125,   126,  1456,  1457,  1453,  1454,  1452,  1455,
     128,   127,   122,   839,     0,     0,     0,  1683,   375,   354,
     355,   358,   359,   360,   911,   814,   975,   890,     0,   606,
     814,   769,   774,   774,   888,     0,   975,     0,     0,     0,
       0,     0,   975,     0,     0,     0,  1559,     0,   901,   851,
       0,     0,     0,     0,     0,   902,     0,   852,  1559,     0,
       0,     0,     0,     0,   975,     0,     0,   438,     0,   975,
     870,   923,   922,   921,     0,   975,   975,     0,   566,   567,
     565,     0,     0,   558,   541,   731,   853,   437,   854,   605,
       0,   917,   602,   608,  1853,  2470,     0,   842,   844,     0,
    1369,   188,    95,    84,    80,    99,  1466,  1467,  1465,  1463,
    1464,   100,    82,    83,    87,    86,    88,    89,    90,    85,
      91,    81,    92,   101,   102,    79,     0,     0,     0,     0,
    1683,   384,     0,     0,  1559,   344,   361,   362,   365,   366,
     367,   368,   369,   372,   370,   371,     0,  2361,  2363,     0,
       0,   338,   337,     0,   129,  2488,     0,     0,   605,   104,
     436,   539,   542,   807,   809,   808,   799,   798,   105,   107,
     109,  1518,  1595,  1331,  1428,  1858,  1409,     0,  1594,     0,
       0,  1240,  1276,     0,  1299,     0,  1142,   692,   692,  1286,
    1284,   677,   692,  1280,  1285,  1282,     0,   717,     0,   716,
       0,     0,     0,  1247,  1244,     0,     0,     0,     0,  1270,
       0,     0,     0,  1147,     0,  1230,  1252,  1250,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1258,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1135,  1047,  2429,  2431,  1017,     0,  2421,  2423,
    2232,  2233,  2234,   816,  1263,     0,  1079,  1075,     0,  1073,
    1415,  1094,  1093,     0,     0,     0,  1083,  1048,  1226,  1047,
       0,  1289,  1852,   416,   572,  1499,    71,  1716,  2367,     0,
    2378,     0,     0,     0,     0,     0,     0,     0,  2277,  1440,
    1569,     0,  1006,  1010,  1867,  1767,  2270,  2271,     0,   456,
     457,   459,  1048,   473,   451,     0,   443,   446,     0,   455,
       0,   954,  1031,     0,  1561,  1546,  1553,  1547,     0,     0,
       0,  1545,  1842,  1841,  1848,  2404,     0,     0,  2298,     0,
       0,     0,  2407,  1409,  1409,  1483,     0,     0,  1023,  1028,
    1024,  1027,     0,  1046,  1053,  1052,  1843,  1850,     0,     0,
       0,     0,   719,   718,   727,     0,     0,     0,  2231,     0,
     723,   725,   724,  2241,   722,  1694,  1437,  1646,  1645,  1444,
    1443,  1620,  1437,  1640,  1695,     0,     0,  2411,  1343,     0,
    1330,  1329,  1351,     0,  1331,  1350,  1350,     0,  1310,  1309,
    1573,  1576,     0,  1308,  1367,  1333,  1031,  2507,  2519,     0,
     730,   729,   571,   726,   570,   175,   174,   180,   181,   408,
     421,   422,   396,   121,   409,   410,   376,     0,   356,   607,
     815,   873,     0,     0,     0,   774,   601,   814,   783,   775,
     814,   814,     0,     0,   551,   548,   892,   554,   871,   863,
     872,   883,   885,     0,   550,   568,     0,     0,   556,   814,
     858,   899,   900,   914,   545,     0,   581,   582,   580,   562,
     569,   546,   547,   894,     0,  1424,  1426,  1434,   553,   552,
       0,   549,     0,   905,   878,     0,   579,   577,   574,   576,
     575,   578,   557,   555,   868,     0,   910,   910,   887,     0,
     589,   590,   592,   593,  1856,     0,   919,   889,     0,   594,
     603,   595,     0,     0,     0,     0,     0,     0,     0,   134,
       0,  1372,     0,  1373,  1370,  1371,     0,    96,    98,   415,
     414,   413,   412,   385,     0,     0,     0,  1683,   363,  2362,
       0,     0,  2495,   341,   339,   340,     0,     0,   190,   587,
     588,   586,   585,     0,   425,     0,  1905,   423,     0,   435,
       0,  1778,   731,   543,     0,     0,     0,     0,  1409,  1450,
    1861,  1588,     0,  1175,  1300,     0,     0,   693,  1277,   739,
       0,  1287,   679,   678,  1279,  1281,  1283,  1141,  1149,  1217,
    1144,  1143,     0,     0,     0,  1182,  1183,     0,  1268,     0,
       0,  1155,     0,  1157,     0,     0,  1232,  1207,  1223,  1186,
    1211,     0,  1160,  1136,     0,  1187,     0,  1192,  1190,     0,
    1164,     0,     0,  1171,     0,  1169,     0,  1170,     0,  1172,
    1213,  1215,  1341,  2430,  1018,     0,     0,  1265,  1071,     0,
    1080,  1077,     0,  1074,  1049,  1237,  1227,     0,  1714,  2368,
       0,  2303,  2355,  2354,  2371,  2371,  2371,     0,  1411,     0,
    1526,  1001,  1006,  1010,     0,  1002,  1778,   460,     0,     0,
       0,   480,     0,   478,   454,     0,   982,  1047,  1543,  1555,
       0,  1563,     0,     0,  1540,  1550,     0,     0,     0,  1549,
     242,     0,  2295,  2296,  2294,  1439,  1417,     0,     0,  1495,
       0,  1490,  1040,     0,  1051,  1050,     0,  2248,     0,  2247,
    2259,  2260,  2257,  2258,  2256,  2237,     0,  2243,  2242,     0,
       0,     0,  2253,  2244,     0,     0,  1637,  1639,  1633,   943,
    2417,  1402,  1335,  1331,  1306,  1331,  1317,     0,     0,  1331,
    1313,  1311,  1315,     0,  1409,     0,  1332,  1364,  1047,  1845,
    1431,  1434,   357,   875,     0,   814,   770,   771,   783,     0,
     783,   783,     0,     0,   862,     0,   963,     0,   867,   727,
     563,   898,   897,   564,     0,   860,     0,  1435,  1436,  1427,
     439,   859,   880,   865,  1742,   891,   605,   918,   751,   673,
     622,   613,   692,   616,   615,   659,   630,   627,   677,   675,
     645,   677,   677,   652,   651,   669,   655,   635,   739,   739,
     634,   672,   739,   656,   654,   658,     0,   660,   677,   665,
     653,   657,   674,   650,   647,   671,   692,   629,   628,   631,
     670,   739,     0,   663,   692,   696,   633,   739,   746,     0,
       0,   692,   694,  1855,  2472,     0,  2474,     0,   144,     0,
       0,   841,     0,   137,   135,   146,     0,  1009,     0,    93,
       0,     0,   346,   411,   364,  2364,     0,   201,  1047,     0,
       0,   191,   193,   194,     0,     0,     0,   538,  1780,  1779,
     424,   523,   544,     0,     0,     0,  1595,  1590,     0,  1586,
       0,  1301,     0,     0,     0,     0,   733,   744,   742,   736,
       0,   740,   741,  1278,     0,  1248,     0,     0,  1271,     0,
       0,     0,     0,     0,     0,     0,  1139,     0,  1228,     0,
       0,     0,     0,     0,     0,  1168,  1166,  1167,  1439,  2411,
     817,  1076,     0,  1238,     0,     0,     0,  2376,  2376,  2376,
    1568,  1567,     0,  1566,  1570,  1003,  1011,     0,   458,   461,
       0,   453,     0,   477,     0,   444,   521,     0,     0,     0,
    1564,  1552,  2408,  1541,  1544,  1850,  2297,  1030,     0,  1412,
    1494,  1491,     0,  1484,  1486,  1488,     0,  1844,     0,     0,
    2252,  2238,   728,     0,     0,     0,     0,  2239,  1336,  1334,
    1344,     0,  1302,  1331,  1331,     0,  1302,     0,     0,     0,
    1575,  1428,  1577,  1368,     0,  1346,     0,  1433,     0,     0,
     874,     0,     0,     0,     0,     0,     0,   904,     0,   917,
     864,   884,   906,   696,   975,  1425,   879,   881,   951,     0,
     591,     0,   755,   621,   614,   632,   681,   676,     0,   681,
     681,   641,   659,   636,     0,   739,   649,   640,   661,   664,
     666,   668,   681,     0,   739,   638,   625,   681,   704,     0,
       0,     0,   700,     0,   749,     0,   707,   609,   697,   699,
       0,     0,   662,   739,   618,   747,   746,   620,   739,   746,
     681,     0,   695,   681,     0,  2471,     0,  2469,     0,   145,
     133,     0,     0,   843,   845,     0,     0,   846,  1005,  1374,
      97,     0,     0,   204,   202,   203,     0,   197,   199,   194,
    2482,     0,  2489,     0,     0,  2487,   426,   428,   436,   524,
       0,     0,  1434,   812,     0,     0,  1451,  1176,   690,   688,
     691,   689,   735,   734,   738,     0,   737,   746,     0,  1180,
    1181,     0,  1269,  1260,  1205,     0,  1156,  1229,     0,     0,
    1212,  1188,  1191,  1189,  1195,  1196,  1039,  1039,   583,  2424,
    1078,  1717,  2379,     0,     0,  2375,  2373,     0,  2374,  2372,
    2346,     0,  2301,  2302,  2300,  2287,     0,     0,     0,  1047,
     466,     0,   483,   482,   479,  1439,  1554,  1556,  1562,  1551,
       0,  1413,  1428,   720,  1487,     0,  1041,  2250,  2249,  2251,
    2245,     0,     0,     0,     0,  1318,     0,  1322,  1327,  1323,
       0,  1314,  1312,     0,  1450,  1356,  1357,     0,     0,  1362,
    1366,  1439,  1434,   877,     0,   604,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   903,  1821,   893,   895,
     861,     0,   866,   559,     0,   754,     0,   759,   685,   686,
     687,   642,   682,   684,     0,   644,   612,   637,   667,   643,
       0,   639,   626,   710,   709,  1054,   702,   713,     0,     0,
     708,   698,   706,   701,   617,   619,   623,   624,   610,     0,
     611,  1854,  2473,  1021,     0,  2478,   131,   136,   147,   148,
     834,   119,  2486,  2496,   201,     0,     0,   142,     0,   192,
     727,   195,  2408,  1778,     0,   431,   786,     0,   811,     0,
     788,   790,   745,   743,     0,  1272,  1434,     0,  1231,  1233,
    1342,   584,  2352,  2351,  2350,  2347,     0,     0,     0,     0,
       0,     0,  2377,  2381,  1565,     0,     0,     0,   474,     0,
       0,   508,   522,  1421,  1434,     0,  1439,     0,  1492,  1485,
    2255,  2254,  2240,  1337,     0,     0,     0,     0,     0,  1375,
    1574,  1352,  1352,  1363,  1347,  1432,   876,     0,     0,   786,
       0,     0,  1823,  1822,   917,     0,   752,     0,   756,   757,
     758,     0,   750,   683,     0,   818,     0,   712,  1054,   705,
    2476,     0,     0,  2475,   138,   847,   278,   168,   198,     0,
       0,   134,   143,  2490,   711,   429,   427,     0,  2404,     0,
    1559,   106,   787,   803,   802,   792,  1434,     0,     0,   108,
     789,   805,   796,   110,   791,   804,   794,   680,     0,  1274,
    1154,  2348,  2382,  2385,  2383,  2384,  2386,  2380,     0,  1768,
    1048,     0,   467,     0,   470,   472,   486,     0,  1559,     0,
       0,  1559,  1559,  1559,  1559,   501,   509,   511,     0,  1422,
    1423,     0,  1418,  1420,  1414,  1475,   721,  1781,  2411,  1319,
       0,  1324,     0,  1316,     0,     0,  1360,  1358,     0,   786,
     596,   788,   790,   896,     0,   753,     0,     0,   739,     0,
     739,   703,  2408,     0,     0,     0,     0,   140,   304,     0,
     290,   276,     0,     0,     0,   280,   149,   152,   150,     0,
     151,   157,     0,   158,   159,   160,   161,   162,   153,   302,
     303,   156,   154,   155,     0,  1870,     0,  1871,  2497,   200,
    1047,   146,     0,   433,   432,   801,     0,   793,   810,   813,
       0,   797,   795,  1434,  1571,  1579,     0,   720,     0,   475,
     468,     0,     0,   484,     0,  1559,  1559,     0,     0,     0,
       0,     0,   481,   510,  1559,  1434,     0,  1029,     0,  1789,
    1338,     0,     0,  1376,     0,  1353,     0,     0,     0,   600,
     599,   597,   598,     0,   765,     0,   764,     0,   761,   760,
     646,   819,   648,  2477,     0,  2479,     0,   139,     0,   132,
       0,     0,   289,   292,     0,     0,   295,   285,   284,   286,
       0,   279,   278,   278,   332,   283,   329,   328,   321,   178,
     177,   169,     0,   278,  2483,     0,  2491,  2408,   800,   806,
    1273,     0,     0,  1769,   462,   474,   471,   494,   487,   490,
       0,   519,     0,     0,   515,   516,   514,   512,   505,     0,
     503,     0,  1419,  1476,     0,     0,     0,     0,  1782,  1784,
       0,  1493,  1321,  1326,  1355,  1354,  1369,     0,   882,   767,
     768,   766,     0,     0,  2480,  2481,   141,   305,   316,   319,
     311,   291,     0,     0,     0,   281,   278,     0,   265,   263,
     264,   270,   271,   272,   273,   274,   275,   266,   269,   267,
     268,   278,     0,   209,     0,     0,   179,  2498,     0,   148,
     168,   434,  1578,  1580,  1795,   469,   494,     0,   492,     0,
     488,   485,   489,   517,   518,     0,   502,     0,   513,     0,
       0,     0,     0,     0,  1783,     0,     0,  1790,  1792,     0,
       0,     0,     0,     0,     0,   278,   312,     0,   287,     0,
       0,     0,     0,   207,   335,     0,   205,   323,   323,     0,
     130,  2492,     0,  1781,   491,     0,   499,   495,   497,   500,
     508,   507,   504,  1047,  1787,  1788,     0,  1785,     0,     0,
    1791,  1361,  1359,   763,   762,   313,   319,   309,   317,   278,
       0,     0,   277,   296,   331,   208,     0,   333,     0,   278,
       0,   322,   324,   326,  2484,   278,     0,  1789,   493,     0,
       0,   506,     0,     0,  1479,  1481,  1786,  1794,  1793,     0,
     310,     0,     0,   308,   288,   293,   278,     0,   278,   220,
     219,     0,   211,   259,   330,     0,   210,   278,  2493,     0,
    1797,   498,   496,  1048,  1477,  1047,   314,     0,   278,     0,
     278,     0,   278,     0,     0,     0,     0,     0,   206,  2485,
    1796,     0,  1801,  1482,  1480,     0,   306,   278,   294,   299,
     336,     0,   214,   260,   261,     0,   217,     0,     0,  1808,
     278,   278,   295,   298,   334,     0,     0,   212,   213,   225,
     224,   216,     0,  1799,  1800,  1798,  1803,     0,     0,  1805,
    1806,     0,  1770,   278,   278,   300,   233,   231,   278,   221,
     229,   223,     0,   230,   262,   218,  1807,  1802,     0,  1809,
    1811,     0,     0,   215,   232,  1804,     0,  1047,   222,  1810,
       0,  1048,  1812
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    56,   582,  1409,    57,    58,    59,    60,    61,  1272,
      62,   781,  1202,  1695,  1696,    63,   522,    64,   987,  1466,
    1467,  2876,  2877,  1468,    65,  2031,  2914,  2915,  2916,  1485,
     492,   493,  1892,  1893,  1012,  2897,  3201,  3744,  3205,  3847,
    3949,  3751,  2457,  3447,  3745,  3746,  3856,   517,  2029,  1423,
    3878,  1872,  3971,  1873,    66,   612,   985,  1445,  1446,  3220,
    3221,  3464,  3222,  3456,  3457,  3458,  3459,  4149,  4036,  4106,
    4150,  4205,  4235,  4241,  4242,  4181,  4258,  4259,  4260,  4239,
     850,  4261,    67,   545,   546,   852,  1302,  2274,  1303,    68,
    4182,  4237,  4037,  4038,  3956,  4039,  3859,  4040,  3960,  4041,
    3862,  4042,  4043,  4044,  4045,  4141,  4046,  3955,  4174,  4033,
    4034,  4176,  4219,  4233,  4047,  3869,  3950,  4093,  3870,  3951,
    4136,  4029,  4137,  4169,  4215,  4030,  4094,  4172,  4097,  4048,
    4054,  4151,  4049,  4055,  4050,  3874,  3967,  4053,  3965,  4052,
    4178,  4146,  2513,  2896,   600,   601,   623,  2021,   602,  1001,
     960,  1425,  1905,  1906,  2379,  2380,  2495,  2496,  2497,  1897,
    1898,  1899,  2009,  2010,  2011,  1879,  1880,  1881,  1429,  1876,
    1877,   603,   961,   971,  1900,  1901,  1902,  2501,  2013,  2014,
    2015,  2016,  1903,  1688,  1904,  2769,  2519,  2907,  3652,  3230,
    3758,  3977,  2908,  2909,  2447,  2830,  2427,    69,   534,   828,
    1269,  2247,  1270,  2249,  2658,  2659,  2660,  1734,  1735,  3530,
    1739,  2246,  3688,  3985,  3793,  3794,  2662,  3792,  2666,  3022,
    3023,  3302,  3532,  3691,  3990,  3902,  4071,  3988,  4067,  3989,
    4069,  4160,  4117,  4118,  3912,  3999,  4000,  4075,  4120,  3805,
    3806,  3807,  2267,  2672,  3535,  3470,  2003,  1415,  1416,   494,
     495,   496,   620,  2520,  1952,  2521,  2522,  2845,  1954,  1955,
    2633,  1337,  2842,  2819,  3506,  2903,  2849,  2850,  2851,  2852,
    2853,  2859,  2786,  2388,  2389,  2452,  2862,  3650,  3388,  3403,
    3186,  3187,  3188,  3189,  3190,  3191,  3192,  2931,  2932,  3601,
    3602,  3603,  2927,  2928,  3433,  3417,  3418,  3419,  3651,  3616,
    3250,  2713,  2714,  3698,  2722,  2723,  2761,  3067,  2762,  1419,
    3251,  3252,  3253,  3427,  3420,  2861,  3382,  3594,  3597,  3732,
    3938,  2390,  2787,  2391,  2790,   916,   497,  2392,  2393,  1499,
    1500,  3761,  3769,  3773,  3762,  3774,  3770,  3763,  3764,  3765,
    3776,  3772,  2526,  3471,  3472,  2779,  2987,  3734,    70,  1433,
     954,   963,   959,   977,   606,  1967,  2458,  2869,  3640,   590,
    1956,  3374,  3116,  3378,  1957,  2799,  1958,  3103,  3360,  1959,
    3132,  3376,  3591,  2800,  2801,  1960,  1961,  1962,  3115,  3124,
    3724,  2394,   123,  2195,  2857,  2434,    71,  1391,  1386,    72,
     928,   923,   924,  1389,  1390,  1838,  2324,    73,   615,  1472,
      74,  1281,  2259,  2260,  2261,    75,   978,    76,    77,   616,
    1479,  1480,  1481,    78,  1265,   130,    79,   837,  1276,  1278,
    1279,    80,   611,   979,   980,   981,   982,  1969,    81,  1726,
    2226,  2227,  2228,  2229,  1442,  2459,  1443,  1444,  1978,  3015,
      82,    83,   579,  2150,   551,   859,   552,   553,  1776,  2287,
    3507,   871,   872,   873,  2698,  1314,  1315,  1316,  2292,  2703,
    1057,   746,   747,   748,   749,  1150,  1151,  3421,   750,  1160,
    1654,   751,   752,   753,   754,   755,   756,  1681,  2955,  2956,
    3268,  2180,  2181,  2182,   757,  2068,  2942,  2081,   758,  1143,
    1639,  1571,  3260,  2948,  3491,  3665,  1516,  2051,  2556,  2630,
    2144,  1082,  1083,  1047,  2058,  1522,  1845,  1846,  1847,  1848,
    1849,  3348,  3347,  3349,  3704,  3556,  3706,  3560,  2335,  1850,
    1851,  2736,  3554,  3818,  2145,  2146,  2147,  3278,  2737,  3083,
    2755,  2756,  3571,  2326,  1852,  2743,  3826,  3568,  3569,  3928,
    3927,  3570,  3353,  3354,  3096,  3097,  2872,  2873,  2874,  3708,
    1562,  1563,  1569,  1252,  1253,  1517,  2224,  2647,  3542,  3695,
    2171,  3319,  3693,  3812,  1963,  2825,  2826,  2289,  2290,  2759,
    3100,  3129,  1340,  3508,  2649,  1809,  1810,  3239,  4240,  2243,
    2471,  2770,  1749,  1750,  3917,  4079,  4163,  4164,  4165,  3049,
    3050,  3323,  3324,  2291,  2695,  3051,  3543,  3817,    84,   501,
      85,  1693,  2186,  1199,  2200,   989,  1503,  1504,   769,   514,
      86,   523,  2225,    87,   541,  1760,   820,   841,  1284,  1285,
    2268,  2673,  2680,  2269,  2685,  3312,  2675,  3028,  3029,  2190,
    2191,  2676,  3031,  3309,  3292,  3293,  3010,  3527,    88,   567,
    3094,  2750,  2751,  3894,  3895,   842,    89,   500,  1034,  2040,
    1509,  2039,  1035,  1036,  2042,   641,   642,    90,   930,   564,
    1363,  1364,  1365,  1825,    91,   556,   917,  2726,  2732,  1804,
     833,  1195,  1344,   920,  1345,  1790,  2307,  1325,    92,   950,
     949,    93,   586,  1411,    94,   782,  1225,  1705,  2637,  2998,
    1226,  1227,  2201,    95,   542,   847,   848,  1287,  1762,    96,
     536,   834,  1753,    97,   527,    98,    99,   824,  3016,  3897,
    4064,   531,  1728,  1261,  3231,  3919,  4008,  4009,  4011,  4087,
    4088,  4113,  4212,  4245,  4229,  4248,  4249,  4252,  4269,  4270,
     760,   937,   761,  3586,   762,   763,  2681,  2682,  3101,   764,
    2683,   765,  2780,   990,  1506,   520,   472,   597,   938,  2655,
     767,  3876,   957,  1005,   474,   475,   100,   875,   555,  1318,
    1319,  1320,  1785,  1786,   921,  2159,  1787,  1788,  2304,  2299,
    3331,  3073,  3065,   101,   825,   479,  1263,  1264,  2235,   102,
     566,   103,  1254,  1722,  1723,  2221,  2646,  2222,   104,   855,
     105,   807,  1716,   808,  1230,   809,   810,  1244,  1238,  1247,
    1241,  3676,  3519,  3520,  2209,  1198,  1006,  1007,  1708,  2203,
    2204,  3287,  3522,  3001,  3682,  3683,   106,   131,   482,   618,
     996,  1308,   107,   108,   109,   110,  1311,  1404,  2283,  1405,
    2151,  1406,  1407,  1859,  1774,  1635,  1636,  2985,  1140,  1141,
    2154,  2603,  2604,   874,   627,  1022,  1014,   124,   125,   126,
     630,   631,   127,   974,   975,  2455,  2865,  3195,  3437,  3438,
    3635,  3743,  1016,  3646,  4058,  4187,  1017,  1018,  2898,  3648,
    3882,  4060,  4155,  1019,  2510,  3217,  3747,  3973,   111,   939,
     576,  1402,  1397,  1399,  1855,  2342,   112,   113
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3592
static const int yypact[] =
{
    4952,  2075,   140, -3592,  -178,   145, 43197,    81,   660,   660,
    -216,  2344, -3592, -3592, -3592, -3592, -3592,  3286, -3592, 43197,
     140, -3592, 23570, -3592, -3592,    10,   173,    65,   660,   140,
   -3592, 43197, -3592,   485,   904,   140, -3592, -3592, 38445, -3592,
    -216, 43197, -3592,   578, -3592, 38445,  1108,   386,   515,   486,
     706, -3592, -3592, 43197,  2352,   503,  1141,  1003, -3592, -3592,
     858, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, 24168, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592,  1115, 43197,  1352, 43197, -3592,  1098,
   43197, 36663, 43197,   861,  1282, -3592, -3592,  1325, -3592, -3592,
     660,  -216, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592,   897, -3592, -3592,   989, -3592, -3592, -3592,
   -3592, -3592,  1624,  1366, -3592,  1595, 36663, -3592, 43197, -3592,
   -3592, -3592,  1122, -3592,  1263, -3592,  1294,  1609,  1625,  1627,
    1273, 11432,  1590,  1590,  1590, 43197,  1679,  1590,  1590, 43197,
   -3592,  1590, -3592,  1590,   660, -3592, -3592,  3395, 43197,  1527,
     154,  -117, 36663,  1417, 43197, -3592, -3592, 11432, -3592,  1654,
   -3592, -3592, -3592,   660,  1863,  1741,   235, 43197, -3592, -3592,
     660,   916,   811,  1313, -3592, -3592,  1485, -3592,  3568,   155,
   -3592, -3592, -3592,  2354, -3592, -3592,  4344,  1485, -3592, -3592,
   -3592,  1358, -3592, -3592, -3592, 43197,   660,  1685, -3592, -3592,
     293,   293,   293, -3592,   293, -3592,   293, -3592,   503,  1357,
   -3592, -3592,  1347, 43197,   545,   571, -3592, -3592,  1370,   596,
   -3592,  1416, 33693, -3592, 43197, -3592, -3592, -3592, -3592,  1638,
   -3592, -3592, -3592,  1014, -3592, 23570,  1511,  1835, -3592, -3592,
   -3592, 23570,  1409, 43197, -3592, 23570, 23570,   186,   799,  1342,
   43197, 43197,  1825, -3592,  2017, 33693,  1600, -3592,   610,   899,
    1325,  2029, -3592,  1366, -3592, 43197, 43197, 43197, -3592, -3592,
   -3592, 39039,  1273,  1438,  1441,  1460, 15737, -3592,  1463,  1467,
    1470, 11432,  1474,  1481,  1487,  1494,  1501,  1515,  1526,  1528,
    1531,  1531,  1536,  1543,  1545,  1548,   911,  1560, -3592,  1578,
    1581,  1599, -3592, -3592,  1602,  1605,  1614, -3592,  1631,  1636,
    1646, 12047,  1650,  1660, -3592, 20576,  1672,  1678,  1680,  1684,
    1700,  1716,  1718,  1725,  1743, -3592, -3592, 11432,  1748, -3592,
   -3592,  1751, -3592,  1754,  1763,  1766,  1772,  1785,  1789,  1802,
    1807,  1816,  1823,  1831,  1836,  1839,  1841,  1861,  1874, -3592,
    1288,  1876,  1880,  1518,  1914, -3592,  1918, -3592,   298,  1922,
    1531,  1531,  1531,  1928,  1939,  1955,  1957,  1959, 15737, 15737,
   15737, 11432, -3592, 43197, -3592, 43197,  1504,  2947, -3592,  2470,
   15737,   213, -3592, -3592, -3592, -3592, -3592, -3592, -3592,  1415,
    1648, -3592, -3592, -3592, -3592, -3592,  1961,  1542,  2056, 43197,
   43197, 43197,  1888, 43197, 43197, 36663,  1974, 43197, 33693, -3592,
    1590,  2009,  3558,  2194,  2147,  2062, -3592, -3592, -3592, -3592,
   -3592,  2246, -3592, -3592,  2089, -3592,  2257, -3592, -3592,   159,
   -3592,    99, -3592, -3592, -3592, -3592, -3592, -3592,  2264,  2011,
   -3592, -3592,   135, -3592, -3592, 43197, -3592, -3592, -3592, -3592,
    2412,  2160,  1504,  2595,   885, 23570, -3592,  1406, -3592,  -206,
   -3592,  2617, -3592,  2391, -3592, -3592, 33693, 23570, -3592, -3592,
   -3592, 21174, -3592, -3592, -3592,  2621, -3592,  2052, -3592, -3592,
    1648,  3381, -3592,  2194,  2322, -3592,  2328,  2234,   799,  2130,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592,  2083,  2354, -3592, -3592, -3592, -3592,  2530, -3592,  2236,
     -29,   -29, -3592,  2095,  1395,   -29, 34287,  2443,  1147, -3592,
     118, -3592,  2526, -3592, -3592,   -29, -3592, -3592,  2217,  2204,
   -3592, -3592,   210,  2032, -3592,   -29,  2563, -3592,    37, -3592,
    2232,   -29,   -29,   -29,  2443,   -29,  1147, -3592,  2461,  2578,
     470,  -111, -3592, -3592,   -50, -3592, -3592,  2654, -3592, -3592,
   23570, -3592, -3592,  2412, -3592, -3592, -3592,  2127, -3592,  2390,
    2233, -3592, -3592,    52, -3592,  2139,   790,  2602, -3592,   575,
   34881, -3592, -3592, -3592,  2634,  2649,  1531,  2141, -3592, -3592,
   -3592,  2754, -3592, -3592,  2150,  2659,  2659,  2659,  2762, -3592,
   -3592, -3592, -3592,  2321,  2190, -3592, 43197,  1511, 23570,  2540,
    2162, -3592, -3592,  2409, 11432, -3592, -3592,  4178,    23, -3592,
   -3592,  1140, -3592,  2736,  2378, -3592, -3592, -3592, -3592,  2632,
   -3592, -3592,  2754,  2690,  2659,  2586,  2189, -3592, -3592, -3592,
   -3592, -3592, -3592,   208, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592,  1042, -3592, -3592, -3592, -3592, -3592,  1511, -3592, 23570,
   -3592, -3592, -3592, 23570, -3592,  2191, -3592,  2180, -3592, 11432,
   11432,  1047,  2737,  2794,  2794,  2794,  1504,  2224, 11432, 11432,
   11432, 11432, 11432, 11432, 11432,  1155,  2199, -3592, -3592,  8972,
   -3592,  2202, 11432, 11432,  2290, 11432,  1648, 11432, 24766, -3592,
    4199, 11432,   979,  2682, 11432, 11432, 11432, 11432,  2422, 11432,
   11432, 24766,  2810,  2207, -3592,  2203,  1248, 11432, 11432,  1261,
   11432, 11432, 11432, 11432, 11432, -3592,  8972, -3592, 11432, 11432,
   11432, 11432, 15737, 11432, 11432, 11432, 11432, 11432, 11432,  2794,
    2794, 11432, 11432,  1266,  8972, -3592, 11432,  1648,  2154,  2154,
   11432,  1648,  7742, 11432, -3592, -3592, -3592,  2211, -3592, -3592,
   -3592, 24766,  2794,  2794, 11432, 11432,  2737,  2737,  2737,   204,
    2212,   621, 11432, 25962,  2208, -3592, -3592, -3592, -3592, 11432,
   11432, 11432, -3592, 15737, -3592, -3592,  1954, -3592, -3592, -3592,
   12662, 15737, 15737,  2219, 15737, 15737, 15737, 15737, 15737,  2573,
   15737, 15737, 16352, 16967, 15737, 15737, 15737, 15737,  1175,  2737,
   36663, 15737, 11432, -3592, -3592, 43197, -3592, -3592, -3592,  2214,
   23570,  1974, -3592, -3592,   561,  2691, -3592, -3592,  2231, 23570,
   -3592,  2227, -3592,  2581, -3592, -3592, -3592,  2583,  2594,  2598,
   -3592, -3592, -3592, -3592, -3592,  2805, -3592,  2600, -3592, -3592,
    2601, -3592, -3592, -3592, -3592, -3592,  2256, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592,  2357, -3592, -3592, -3592,  2266, -3592,
   33693,  2266, -3592, -3592,  2266, -3592, -3592,  2266,    82,  3648,
   -3592, -3592, 43197, -3592, 43791, -3592, 21174,  -178, -3592, -3592,
   -3592,  2613,   150,  2265, -3592, 23570, -3592,    90,    90,  2511,
    1225, 36663, -3592, -3592,  1506,   184,  2271,  2348,  2273, -3592,
    2350, 23570, 23570, -3592, -3592, -3592, -3592,  2876,   811, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592,  2278,  2740,  2284, 33693,   827, -3592, 43197, -3592,
    1594, -3592, -3592, -3592,  2285, -3592, 11432, -3592,  2292, -3592,
    1777,  2674, -3592,  -178, 11432, -3592, -3592,  2302,  1366, 43197,
   43197, 43197, 23570, 43197, 23570, -3592,   871,   871, -3592, 31911,
   -3592, -3592, -3592, -3592,   -29, 43197, 43197,   -29, 33693, -3592,
   -3592,  1147, 43197,   -29, -3592,  2678,  2400, -3592, -3592, -3592,
    2742, -3592, -3592,  2733,  2304, -3592, -3592,  2674, -3592,  2423,
    1147, -3592, -3592, -3592, -3592, -3592, 23570, -3592, -3592,  1147,
   -3592,  1147,  1147,   -29,  2407,   -29,  2361, -3592, -3592,  2316,
   -3592,  2361,  2458, -3592,  -174,   293,  2560, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592,  1283, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592,   102, -3592, -3592, -3592,  1987,
    2813, -3592, 36663,  2370,   -80,  1143,  2370,  1349,  -178,   146,
   -3592,   146, -3592,  3143,   216, 23570, -3592, -3592,  2324, 39633,
   23570, -3592, -3592, -3592,  1430,  2334,  2327,  1504,  2795,  2796,
    2797,  2798,  2799,  2800,  2802,  2804,  2812,  2814,  2816,  2817,
    2819,  2822,  2825,  2828,  2829,  2832,  2346, -3592, -3592, -3592,
   -3592, 23570, -3592, -3592, -3592, -3592,  2403, -3592, -3592, -3592,
   -3592,  2597, -3592, -3592, -3592,   138,  2209,  2371,  2420,    67,
   33693,  2803, 43197, 43197,  1366, 43197, 43197, -3592, -3592,  1170,
    2642,  2643,  2646,  2384, -3592, -3592, -3592,  1303, 43197,  2815,
   28347, -3592,   345,   324, -3592,  2794,  2388, -3592,  2389,  2393,
    2396, 11432,    32,   420,   365,  1289,  1363,   789,   392,   319,
   -3592,  2398,  2397, -3592,   884, -3592,   399,   434,   945,  1020,
    2399,  2401, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592,  2818, -3592,  1425, -3592, -3592, -3592, -3592,  2402,
   -3592, -3592,  1025,   440,   445,   284,  2411,   450,  1491,  1519,
    2406, 24766, 43197,  2794,  2413,  1036,  1062,  2794,  2416,   471,
    1066,  1521,  1552,  1564,  1070,  1081,  1113,   475,  1570,  2556,
    1119,   518,   645,   655,   699,  1149,  2424,  2425,   743,   292,
    2794,  2426,  1157,   328,  2428,  2429,  1172,  9587, 10202, 10817,
     297,   805, -3592,  2427, -3592,  2203,  2435,  2437,   333,  1184,
   -3592, 11432, -3592, -3592,   681,  1413,  2457,   164,   775, -3592,
    2591, 43197,  2172,   176, -3592, -3592, -3592, -3592, -3592, -3592,
    1060, -3592,  2441, -3592,  2442,  1673,  2446, 11432,  1132,  2446,
    2728,  1948,  1948, 15737,  2651,  2476, 12047,   711, 12047,   711,
    2446,  2446,  2446, -3592, 15737,  2445, 15737, 15737, -3592,  2737,
    1504,  2449,   795, 43197, -3592,   561, -3592, -3592, -3592, -3592,
     108, 33693,   157, 23570, 36663,  2444, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592,  2186, 23570, -3592, 43197, -3592,  2521,
   -3592, -3592, -3592, 21772, 21772, -3592, 21772, -3592, -3592,   207,
     304,  3119,  2475, -3592, -3592, -3592, 23570, -3592,  2845,   -44,
   23570,  2324,  2456, -3592, -3592, -3592, -3592, -3592,  2195,  2564,
   -3592,  3059, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, 11432,  -178, -3592, 33693, 33693, 23570, 23570,    28, -3592,
     962, -3592, -3592, -3592,  3381, 17582,  2894,  2905, 21772, 21772,
   21772, -3592, -3592, -3592, -3592, -3592,  1397,  1504, -3592,  2471,
   -3592, -3592, -3592, -3592, -3592, 40227,   143, -3592, -3592,  -178,
    2907, -3592,  1504,  2480, 43197, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
     -98, -3592, -3592, -3592, -3592, -3592, -3592, -3592,   -29, -3592,
   -3592, -3592, -3592, -3592,  2697,  2443,  2032,  2907, -3592,   -29,
    1147, 23570,   -29,   -29, -3592,  1147, -3592,  1418, -3592,   -50,
   -3592, -3592, -3592, -3592, 43197,  2419,  2635, -3592,  2483, -3592,
   -3592, 23570, -3592,  2484, -3592,  2918,  3057,  2443, -3592, -3592,
   -3592,   108,   108,  2779, -3592,  -178,  2615,  2623,  2626,  2627,
    2628,  2656, -3592, -3592,  -178,  -178, -3592, -3592,   108, -3592,
     958, -3592, -3592, -3592, -3592,  -178,  -178,  -178,  -178,  2201,
    -178,  -178,  1592, -3592, -3592,   108,   108, -3592,  1443, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592,  1071, -3592,  2507,  3037,
    2746,   108,   108,  3037,   108,  2751,  2758,   108,   108,  2590,
    3002,   108,  2893,  2624,  2015,  2901,   108, -3592,  2630,  3013,
     108,   108,   108,   108,  3037,  2775,  3104,   108, -3592,   108,
    2781,  2780,   136,  2782,  2793,   108,   172, 43197,   108,  2801,
     108, -3592, -3592,  4690, -3592, -3592, -3592, -3592, -3592, -3592,
     636, 22372, -3592, -3592, -3592, -3592, -3592,  2821, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592,  2541, -3592, -3592,
   11432,  2561,  2201,  -178,  -178,  1647,  -178,  2201,  -178,  -178,
    -178,  -178,  -178,  2201,  2201,  -178,  1898,  -178,  2201,  4178,
   -3592, -3592, -3592, -3592,   196,   108,   108,   108,   108, -3592,
    2088, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, 36663,
    2909,  1873,   555, 36663, -3592, 43197, -3592,   381, 43197,  2562,
    -140,  3280,   830,   830, -3592, 23570, 23570, 23570, 43197,  2607,
    2475, 28347, -3592, -3592,  -174, -3592,  2548, 13277, -3592,  2566,
   -3592, 11432, -3592, -3592, -3592,  1344, 11432, 11432,  3031,  1982,
   -3592, 35475, -3592, -3592, -3592, 11432, 35475,  1982, 11432, -3592,
    2568, -3592,  2952,  2959, -3592, -3592, -3592, -3592, 11432, -3592,
   11432, 11432, -3592, 11432, 11432, 11432, 11432, 11432, -3592, -3592,
   15737, -3592,  2570,  2580, -3592, -3592, -3592,  2596, -3592, 11432,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, 11432, -3592, 11432,
   -3592, 11432, 11432, 11432, 11432, -3592, -3592, -3592, 13892, 11432,
   11432,  2604, -3592, -3592, -3592, 11432, 11432, 11432, -3592, 11432,
     314, 11432,   388, 11432,  1348, 11432, -3592, 11432, -3592, -3592,
   -3592, -3592, 11432, -3592,  1611, -3592, -3592,  1875, -3592,   681,
    2605, -3592, -3592,  1594, -3592, -3592,  2579,  2587,  2593, 36663,
   11432, -3592, -3592, -3592, -3592, -3592, -3592, 15737,   335,  2608,
   15737, -3592,  2728,  2422,  2422,  1744, 11432,  1132,  2728, 11432,
    2610,  2606, -3592, 11432, 43197, -3592, -3592, -3592, -3592, -3592,
   -3592, 36663, -3592, -3592, -3592, -3592,   157, -3592,  2227, -3592,
    2324, -3592, -3592,  1616, -3592, 33693,  2611, -3592,  2612,  2672,
    2673,  2677, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592,  2443,   962, -3592,  2620, -3592, -3592,
    2409,  2698,  2631,  2962, -3592, -3592, -3592, 43197, 15737, -3592,
   -3592, -3592, -3592, -3592, -3592,  3188,  2637,  2638,  3084,  2640,
    1504, -3592,  2702, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592,   717, -3592, -3592,  2641,  2641, 19378, -3592, -3592, -3592,
    3087,   -54,   -54,   -54, -3592, -3592, -3592, -3592,  2886, 33693,
    3062,  3063,  3078,   575, -3592,   396, -3592,  1419,  3033,  2443,
   -3592,  3081, 37257, -3592, 28941, -3592,  2647,  3006,  2652,   108,
   31317,   939, 26559, 32505, -3592, -3592,  1647, -3592,    24, -3592,
   31911, 31911, -3592,  2927, -3592, -3592, -3592, -3592,  2475,  1147,
   -3592, -3592, -3592, -3592,  2664, -3592, -3592,   762,  3038,  3042,
   -3592,  2921,    55,  2921,   762,   762, 24766,  -174,  2105, -3592,
    2201,  2975, -3592, -3592, -3592, 36069, 33099, -3592, -3592, -3592,
   -3592,  3178, -3592,  3179,   220, -3592, -3592,  1708,  1143, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592,  1349,  1708,  1708,   146, -3592,   104,
   -3592, -3592, -3592, -3592, -3592, 25364,   140, -3592,   241, -3592,
   25364, -3592,  1430,  1430, -3592, 25364,   140,  1647,  2201, 25364,
    2201, 40821,   140,  -178,  -178,  2240,   108,  2201, -3592, -3592,
    3044, 43197,  3045, 25364, 25364, -3592, 36663, -3592,   108,  1404,
    2201,  1647,  1647, 25364,   140, 24766,  1978, -3592,  -178,   140,
   -3592, -3592, -3592, -3592, 23570,   140,   140,  2636, -3592, -3592,
   -3592,  2201, 40821, -3592, -3592,  4025, -3592, -3592, -3592, 18780,
   43197,   303,   160, -3592,  2671,  2680,   130, -3592,  2872,  2687,
   41415,  1504,  2201, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592,  -178,  2195,  1708,  1708,
    2209, -3592,  2949,  3106,   108, -3592,  1130, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592,  2784, -3592,  3294,  2880,
    2704, -3592, -3592,   348, -3592, -3592,  1057, 23570, 18182, -3592,
    2945, -3592,  2902, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592,  2700,  -174,  2963,  1384,  2475,  2718, -3592, 12047,
    1194, -3592,  1504, 11432,  1504,  1610, -3592,  2714,  2714, -3592,
   -3592,  2716,  2714,  3097, -3592,  3107,  2730, -3592,  2731, -3592,
    1203,  2734,  2739,  1415, -3592, 11432, 11432,  1209,  1211,   -85,
     837,   843,   337, -3592,  1236,  2807, -3592, -3592,  1251,  1280,
    1293,  1300,   850,  1333,  1690, 12047,  1339,   923,   367, -3592,
    1361,   856,   862,  1369, 11432,  1374, 11432,  1376, 11432,  1396,
    1436,  1479, -3592,  2083,  1875, -3592, -3592,  2741, -3592, -3592,
   -3592, -3592, -3592,  2726,  1504,  2745, -3592, -3592, 11432, -3592,
     213, -3592, -3592, 15737,   375,  2749, -3592,  1504, -3592, -3592,
    2752,  1415, -3592, -3592, -3592, -3592, -3592,  2760, -3592, 43197,
    1177,  2748, 29535, 33693, 33693, 33693,  2756, 11432, -3592, -3592,
    3019, 23570, -3592,  3137, -3592, -3592, -3592, -3592,  2759,  2761,
   -3592, -3592, -3592,  2728,  3116,  3004, -3592, -3592,  2195, 43197,
   33693, -3592,  2354, 24766, -3592,  2765, -3592,  2765,  -142,  2768,
    1696, -3592, -3592, -3592,  2767,  2130, 17582,  3197,  2189, 33693,
   33693, 33693, -3592,  2475,  2475,   705,  2826,  3151, -3592, -3592,
   -3592, -3592, 42009, -3592, -3592, -3592, -3592,  1127, 43197,  3135,
   43197,  8357, -3592, -3592,  3321, 11432, 33693,   796,   775,   108,
   -3592, -3592, -3592, -3592, -3592, -3592,  2443, -3592, -3592, -3592,
   -3592, -3592,  2443, -3592,   -29,  1418,   757,  1413, -3592,  1452,
   -3592, -3592, -3592,  3152,   762,  2921,  2921,  3154,  3046,   -32,
    2785, -3592,   108, -3592, -3592, -3592,  2354, -3592, -3592, 11432,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592,  1071, -3592, -3592,
   -3592, -3592,  2786,  3156,  3157,  1430, -3592, 25364, -3592, -3592,
   25364, 25364,   120, 40821, -3592, -3592, -3592, -3592, -3592, -3592,
    2806, -3592, -3592,  2195, -3592, -3592, 33099,  -178, -3592, 25364,
    2806, -3592, -3592,   926, -3592,  -178, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, 40821,  2808, -3592,   317, -3592, -3592,
    1863, -3592, 40821, -3592, -3592, 40821, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592,  2809,  2550,  1932, -3592,  2783,
    2811, -3592, -3592, -3592, -3592, 43197, -3592, -3592, 23570, -3592,
   -3592, -3592,  5728, 43197, 43197,  3399,  1221,  1206,  2888,  1524,
   40821, -3592,  2827, -3592,  2820, -3592,  1704, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592,  2823, 43197,  1708,  1873, -3592, -3592,
    -178,  1057, -3592, -3592, -3592, -3592,  3076,  3079, 43197, -3592,
   -3592, -3592, -3592,  2966, -3592, 23570,  3391, -3592,  2992, -3592,
    2836,   170,  4459, -3592,  2833,  2840,  2842, 28347,  2475,  3205,
   -3592, -3592,  2422, -3592,  1504, 11432,   824, -3592, -3592,   185,
     890, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592,  2846,  2422,  2422, -3592, -3592,  3416,  3010, 11432,
   11432, -3592, 11432, -3592,   209,  2853,  2877, -3592, -3592, -3592,
   -3592, 11432, -3592, -3592,  2422, -3592, 11432, -3592, -3592, 11432,
   -3592, 11432, 11432, -3592,  1509, -3592,  1513, -3592,  1532, -3592,
   -3592, -3592,  2285, -3592, -3592,   621, 43197, -3592, -3592,  1709,
   -3592, -3592, 11432, -3592, 37257, -3592, -3592,  3068, -3592, -3592,
    3277, -3592, -3592, -3592,  -154,  -154,  -154, 14507,  1504,  3333,
   -3592, -3592, -3592,  3137,  3226, -3592,    50, -3592, 43197,  2864,
    1368, -3592,  1713, -3592, -3592,  2865, -3592,  2083,  2867, -3592,
     108, 14507,  2641,  2992, -3592, -3592,  -142, 24766, 28941, -3592,
   -3592, 33693,  2189,  2189,  2189,  2443,  3282,  2698,  2698, -3592,
   27156, -3592, -3592,  3020, -3592, -3592, 30129, -3592,  1453, -3592,
   -3592, 15737,  1578, -3592,  1504, -3592, 36069, -3592,  1504,   108,
    2871,  2873, -3592, -3592, 42603, 11432, -3592, -3592, -3592, -3592,
    1594,  2417, -3592,  -174, -3592,   762, -3592,  3246,  3247,   762,
   -3592, -3592, -3592, 24766,  2475, 14507, -3592,   383,  2083,  1504,
    2875,   317, -3592,  -101, 11432, 25364, -3592, -3592, -3592,  2878,
   -3592, -3592,  3369,  3371, -3592, 25364,  2597, 43197, -3592,  3321,
   -3592, -3592, -3592, -3592,  5728, -3592, 24766, -3592, -3592, -3592,
   -3592, -3592, 43197, -3592, 23570, -3592, 18780, -3592,  2882, -3592,
    2714,  2714,  2714, -3592, -3592, -3592, -3592, -3592,  2716,  3113,
   -3592,  2716,  2716, -3592, -3592, -3592, -3592, -3592,   185,   398,
   -3592, -3592,   185, -3592, -3592, -3592,   141,  1156,  2716, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592,  2714, -3592, -3592, -3592,
   -3592,   185,  2714, -3592,  2714,  2142, -3592,   312,   101,  2714,
    2714,  2714,  2885,  2879, -3592,  1719, -3592,  3117, -3592, 11432,
   11432,  3150, 43197,  3153, -3592,  3431,  2896, -3592, 41415, -3592,
    2201,  1349, -3592, -3592, -3592, -3592,  3036,   893, -3592,  3066,
    2906,  2900, -3592, -3592,  -178,  2912,  2914,  4690, -3592, -3592,
   -3592,  3496, -3592, 43197, 43197, 43197,  2548, -3592, 31911, -3592,
     449,  1504,  2916,  2917,  2920,  2924,  3486,   180, -3592,  3497,
   35475, -3592, -3592, -3592,  1721, -3592,  2925,  2926, -3592,   293,
    2928,  1550,   878,  1731,  3227,  3296, -3592,  3147, -3592,  1562,
    1166,  1568,  1572,  1574,  1629, -3592, -3592, -3592,   178,  1413,
   -3592, -3592,  1756, -3592,  3284,  3195,  1207,  2964,  2964,  2964,
    1578,  1504,  1778, -3592, -3592, -3592, -3592,  3324, -3592, -3592,
    2944,  3059, 43197, -3592,  3004, -3592,  2285, 24766, 14507,  2948,
    2946, -3592,   790, -3592, -3592,  2942,  2189, -3592,  3520,  3367,
   -3592, -3592, 36663,  2970, -3592, -3592,  3257, -3592,   234,  3174,
   -3592, -3592, -3592,   796,  3054,  3061,   108,  1504, -3592, -3592,
    2483,  2497,  3014,   762,   762,  2523,  3017, 11432, 11432,  2979,
   -3592,  2963, -3592, -3592,   942,  2285, 11432, -3592,  2195,  3004,
   -3592,  1637,  2981,  2983, 43197,  2985,  2987, -3592,  3202,   303,
   -3592, -3592, -3592,  2142,   140, -3592, -3592,  2806,   717,  2989,
   -3592, 43197,  3307, -3592, -3592, -3592,   990, -3592,  2991,   990,
     990, -3592,  2236, -3592,  3023,   185, -3592, -3592,  3024, -3592,
   -3592, -3592,   990,  2994,   185, -3592, -3592,   990, -3592, 36663,
    -178,  2778, -3592,  3043, -3592,  3487,  3364, -3592,  2142, -3592,
    3366,  3266, -3592,   185, -3592, -3592,  3578, -3592,   185,  3578,
     990,  3268, -3592,   990, 43197, -3592, 43197, -3592,   835, -3592,
    1504,  2422,  3536, -3592, -3592,  3148,  -178,  3482, -3592, -3592,
   -3592,  1790,  -178, -3592, -3592, -3592,  3008,  3009, -3592, -3592,
   -3592,  1206, -3592, 43197,  5728, -3592, -3592, -3592,  2945, -3592,
     920,  1799,   317,  3012,  1803,  1810, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, 35475, -3592,  3578,  3281, -3592,
   -3592, 11432, -3592, -3592, -3592, 11432, -3592, -3592,  3310,  3461,
   -3592, -3592, -3592, -3592, -3592, -3592,  1419,  1419, -3592, -3592,
   -3592, -3592, -3592,  3105,  3108, -3592, -3592,  3109, -3592, -3592,
     110,  1952, -3592, -3592, -3592, -3592, 14507,  3386,  3114, -3592,
   -3592,  3025,  3064, -3592, -3592,   178, -3592, -3592, -3592, -3592,
   11432, -3592,  2963,  2240, -3592, 27156, -3592, -3592, -3592, -3592,
   -3592,  3029,  3030,  8357,   621, -3592,  3065, -3592, -3592, -3592,
    3067,  1504,  1504, 43197,  3205, -3592, -3592,  1430,  1430, -3592,
     942,   178,   317, -3592,  1813, -3592, 43197, 43197,  1845, 43197,
   43197,   -54,   -54,   -54,  1898,  1898, -3592, -3592, -3592, -3592,
   -3592,  3401, -3592, -3592,  1848, -3592,   728,  3295, -3592, -3592,
   -3592, -3592,   990, -3592,   293, -3592, -3592, -3592, -3592, -3592,
     293, -3592, -3592, -3592, -3592,  1531, -3592, -3592,  3312,  3072,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,  3049,
   -3592, -3592, -3592, -3592,   503,  3069, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592,   915, 43197, 23570,  3150,  3216, -3592,
    3321, -3592,   790,   170,  2992, -3592,   311, 43197, -3592,  3311,
     121,   279, -3592, -3592,  3053,  3055,   317,  1641, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592,   346,  3301,  2201,  2201,
    2201,  2201,  1952, -3592, -3592,  3103, 23570, 15737,  3161, 43197,
    1226,  3128, -3592,  1305,   317, 11432,  2443, 33099, -3592, -3592,
   -3592, -3592, -3592, -3592, 11432,  3060, 11432,  3070,  1855, -3592,
   -3592,  3488,  3488, -3592, -3592, -3592, -3592,  1857,  1864,   311,
    1870,  1882, -3592, -3592,   303,  3071, -3592, 43197, -3592, -3592,
   -3592,   305, -3592, -3592,  1886, -3592,  1892, -3592,  1531, -3592,
   -3592,  3077,  1239, -3592,  3180, -3592, 49137, -3592, -3592,  5728,
    3490,  1524, -3592, -3592, -3592, -3592, -3592,  3080,  2130,  -178,
     108, -3592,   311, -3592, -3592, -3592,   317,  3082,  3306, -3592,
     121, -3592, -3592, -3592,   279, -3592, -3592, -3592, 11432, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, 24766, -3592,
   -3592,  2195, -3592,  1897, -3592, -3592, -3592,  3149,   108,  3547,
    3548,   108,   108,   108,   108,  3073,  3128, -3592,  3527, -3592,
   -3592, 11432, -3592, -3592,  1504,  3302, -3592,  3623,  1413,  1504,
   43197,  1504, 43197, -3592, 43197,  1134, -3592, -3592,  3287,   311,
   -3592,   121,   279, -3592,  3004, -3592,  1068,  1068,   185,   293,
     185, -3592,   790,  3634,  3342,  3637, 11432,  3552,  3118, 43197,
     833, -3592, 50325, 50325, 43197, -3592, -3592, -3592, -3592,  5392,
   -3592, -3592,     4, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592,  3672, -3592,  3083, -3592,  3111, -3592,
   -3592,  3431,  5728, -3592, -3592, -3592,  2201, -3592, -3592, -3592,
    1601, -3592, -3592,   317,  3094, -3592,   108,  2240,  3096, -3592,
   -3592, 43197,  3098, -3592,  -178,   108,   108,  1506,  1506,  2195,
   36663,  3206, -3592, -3592,   108,   317, 43197, -3592,  1075,  3454,
   -3592,  1905,  1910, -3592,  3669, -3592,  3670,  3112,  3115, -3592,
   -3592, -3592, -3592,  1935, -3592,  3712, -3592,   149,  3368,  3370,
   -3592, -3592, -3592, -3592,  3372, -3592,  3374,  1504, 11432, -3592,
   11432,  3138, -3592, -3592,  3541, 43197, -3592, -3592, -3592, -3592,
   11432, -3592, 49137, 49137, -3592, -3592, -3592, -3592,  3703, -3592,
   -3592, -3592,  3605, 49137, -3592,  3599, -3592,   790, -3592, -3592,
   -3592, 24766, 14507, -3592, -3592,  3161, -3592,  3126, -3592, -3592,
     -65, -3592,  -178,  -178, -3592, -3592, -3592, -3592, -3592,  1947,
   -3592, 36663, -3592, -3592,  3692,  3693,  3593,  3695,  1075, -3592,
    -104, -3592, -3592, -3592, -3592, -3592, 41415, 41415, -3592, -3592,
   -3592, -3592,  3183,  3624, -3592, -3592,  1504,  1504, -3592,    54,
   -3592, -3592,  3518,  3603, 11432,  1504, 46167,  3139, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, 49731, 11432, -3592,     4,  3672, -3592, -3592,  3609, -3592,
   -3592, -3592, -3592, -3592,  3313, -3592, -3592,  1962, -3592, 15122,
   -3592, -3592, -3592, -3592, -3592, 36663, -3592,  3206, -3592,  3144,
     293,   293,  3715,   293, -3592,  3717,  3719,  -104, -3592,  3146,
    1964,  1068,  1068,  3181, 11432, 49137, -3592,  3618, -3592,  3554,
    1726,  3498,  3155, -3592,  3159,  1842,  3649, 50325, 50325,  3328,
   -3592,  3111,  3562,  3623, -3592,  3126, -3592,  3162, -3592,  2728,
    3128, -3592, -3592,  3164, -3592, -3592,   293, -3592,   293,   293,
   -3592, -3592, -3592, -3592, -3592, -3592,   221, -3592,  1504, 46761,
    3725, 43197, -3592, -3592, -3592, -3592, 11432, -3592, 37851, 47355,
    3166, -3592, -3592, -3592, -3592, 49137,  3735,  3454, -3592, 15122,
    3173, -3592, 11432,  3177,  3182, -3592, -3592, -3592, -3592, 11432,
   -3592,  3642,  3263, -3592,  3185, -3592, 49137,  1853, 49137, -3592,
   -3592,  3594,  3186,  1585, -3592,  3175, -3592, 49137, -3592,   293,
    3582, -3592, -3592,  1504, -3592, -3592,  1504,  3751, 49137, 43197,
   44385,  3380, 47949,  3628, 43197,  5728,  3630,  3633, -3592, -3592,
   -3592,  3472,  3208, -3592, -3592,  3292, -3592, 44979, -3592,  2451,
   -3592,  3235, -3592, -3592,  3705,  1541, -3592,    43, 19976,  3365,
   49137, 49137, -3592, -3592, -3592, 30723, 11432, -3592, -3592, -3592,
   -3592, -3592,   575, -3592, -3592, -3592, -3592, 36663,  1988, -3592,
   -3592, 24766, -3592, 45573, 48543, -3592, -3592, -3592, 27753, -3592,
   -3592, -3592,  3646, -3592,  1504, -3592, -3592, -3592, 22970,  3218,
   -3592,   108, 30723, -3592, -3592, -3592, 24766, -3592, -3592, -3592,
   14507, -3592, -3592
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3592, -3592, -3592, -3592, -3592,   -27, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592,  1640, -3592, -3592, -3592, -3592, -3592,
    1837, -3592,   629, -1733, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592,   630,  1466,  3215, -3592,   384, -3592,    98, -3592,
   -3592, -3592, -2804,   -31,  -208, -3592, -3592,   336,     5,  2890,
    -205, -3591, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592,   395,   393, -3592, -3592,   214, -3592, -3592,  -653, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592,  -415,  -364,  1889,
   -3592, -3592, -3592,  3817, -3592,  3309, -3592,  1178,  2099, -3592,
   -3592, -3592,  -605,   123, -3592,   125, -3592,   126, -3592,   127,
   -3592,   129,   131,   132,   133, -3592,   134, -3592, -3592,  -362,
   -3592, -3592, -3592, -3592,   137, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592,  -260, -3592, -3592,  -147, -3592, -3592,  -251,   142,
   -3592,  -222,   144, -3592,   147, -3592,  -168, -3592,  -165, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592,  2892, -3592, -3592, -3592, -2173, -3592, -3592, -2281,  2465,
   -3592, -1714, -3592, -3592, -1843, -3592, -3592, -1715,  -588, -3592,
   -3592,  1322,  -284, -3592, -1313, -1822, -1813, -3592, -3592, -3592,
   -1918, -1916,  -738,  2213, -1094, -2095, -3592, -3592, -3592,   244,
   -3592, -3592, -2435,  1940,  2466, -3592,  2460, -3592, -3592,  1073,
   -3592, -3592,  1242,   606,  1240, -3592,   894,  2648, -1198, -3592,
   -3592, -3592, -3592, -3592, -3592,     7,   224,   -71, -3592, -3044,
     611, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -2394,
   -3592, -3592, -3592,  -242, -3592, -3592,  -159, -3592, -3592,  -201,
   -3592,   114, -2199, -3592, -3592, -3592, -3592,  2436, -1272, -3592,
    3430, -3592,  -532,   700,  1975, -2011, -1356, -3592,  -874,  -868,
   -2370, -3592, -3592, -3592, -1899,  1038,  1412, -3592,   797,  1970,
   -1825, -3592,  1480, -3592, -3592,   820, -3592, -2537, -3592, -3592,
   -3592,   778, -3592,   779, -3592, -3592, -3592, -1141,   747,  -486,
   -3592,   338, -2326, -2391, -3592,   568, -3592,   524, -3408, -3592,
    -549, -2012, -2287,    46, -3592, -3592,   535, -2950,   880, -3592,
   -3592, -3592, -2999, -1652, -3592,   119, -3592, -3592, -3592, -3592,
   -2787, -3592, -3592, -1410, -1947, -3592, -3592,  3937,  3939,  -995,
   -2557, -2608,   122,   139, -3592, -3592, -3592,  2452, -1893,   190,
     182,   189,  1929,  -745,   306, -2261, -3592,   354, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592,  2005,  -438, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -2304,   851, -3592, -3592,  1522, -3592, -3592,
   -3592, -1803,  -506, -2059, -3153, -3592, -3592, -3592, -3592, -3592,
   -3592,  -161, -3592, -3592,  2133,  2582, -3592, -3592, -3592, -3592,
   -3592, -3592,   591,  1715, -3592, -3592, -3592, -3592, -3592, -3592,
     864,  2493, -3592, -3592, -3592,   -15, -3592, -3592, -3592, -3592,
    2221, -3592, -3592, -3592, -3592,  2542, -3592, -3592, -3592, -3592,
   -3592, -3592,  1330, -3592,  1753, -3592, -1390, -3592, -3592,   971,
    -945,  1702,  -570,  1838,   356, -3592,  3413, -3592, -3592, -3592,
   -1659, -2317, -3592,  3120,  -885, -2178,  2216,  -123, -1754,   999,
    -640,  3576, -3592, -1100, -1026, -3592, -3592,  -617, -3592, -3592,
   -3592,  -620, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592,  1367, -3592, -3592, -3592, -3592, -1671, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592,  1476, -3592,  1930, -3592,
    -468, -3592,  2922, -3592, -3592, -3592, -2171, -1777,  1661,   918,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -2235,
   -3592, -3592, -3592, -3592, -3592,  1851, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -1677, -3592, -2144,   290, -3592,   435, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592,   -12,   798,   -10, -2047,
   -1061,  1507, -3592, -3592, -1231,  2953, -1951, -3592, -3592, -3592,
    1832, -3592, -3592, -3592, -3592, -3592,   886, -2466,  2609, -3592,
   -3592, -2978,  -866, -2162,  -826, -3592, -2214,   451, -1696, -2430,
    -602, -1259, -1711, -3592, -3592, -3592, -3592, -3592,  -182, -3592,
   -3592, -3592,   469,  1729, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592,  -534,  -733, -3592,  1980,  1761, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,  2764,  2743,
    1796, -3592, -3592, -2461, -3592, -3592,  1757, -3592,   716, -2257,
   -1684,   992, -3592, -3592,   995, -3026, -3592, -3592, -3592, -3592,
   -3592, -3592,   936, -3592,    49,  3467, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592,  2527, -1018,  3394, -3592, -3592, -3592, -3592,
   -3592, -3592,  2215, -3592, -3592, -3592, -3592, -3592, -3592,  2703,
    3483,  -553, -1196, -3592,  -542,  2675,  2218,  -840, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592,  2339,   910, -3592, -3592, -3592,  2766, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592, -3592, -3592,  1030,   -66, -3592,    40,  -108, -3592,
     -35, -3592, -3592, -3592, -3592, -3592,  -213, -3592, -3592,  -220,
    -657,  -944, -1310,   646, -1735, -1956,  1022,  2744, -2449,  -662,
   -1075, -1081, -1859,    73, -3592, -3592,  3184,    75,   487,  -397,
      -6, -2290,  -109,  -564, -3592,   855, -3592, -3592, -3592, -3592,
    2281, -3592, -3592, -3592, -3592,  1345, -3592, -3592, -3592,   988,
   -3592,   731,   512, -3592, -3592,   124, -3592,  2340, -3592, -3592,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592,  2769,  3523,  3229, -3592,  2830, -3592, -3592, -3592,
   -3592, -3592,   404, -3592,    84, -3592, -2022,  2599,   853, -3592,
    1444,  -353,  -612, -3592, -3592,   402, -3592, -3592,   316,  3539,
    3232, -3592, -3592, -3592, -3592, -3592, -2634,  -849, -3592, -3188,
   -2663, -1617, -3592, -3592, -2055, -2847, -3592, -3592, -1005, -3592,
   -3592, -3592, -3592, -1884, -3592, -3592, -3592,    83,  3600,  3601,
   -3592, -3592,  -214, -3592,   366, -3592, -3592, -3592, -3592, -3592,
   -3592, -3592,  3456, -3592, -3592, -3592, -3592,  3462, -3592, -3592,
   -3592, -3592, -3592,  3465, -3592, -3592, -3592, -3592, -3592,  1569,
   -3592, -3592, -3592, -3592, -3592, -3592, -3592, -3592
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2466
static const yytype_int16 yytable[] =
{
     473,   607,   999,   919,  1410,   516,  1412,   915,   945,  1066,
    1312,   471,   599,   515,   533,  1748,   521,  1576,  2152,  1511,
     540,  1058,  1060,  1084,  2293,   535,  1042,  2244,   958,  1811,
    2276,  1729,   547,   759,  1977,   550,  1501,  1502,  1194,   547,
    2482,  1326,  2711,  2715,  2717,  1335,  2814,   568,  1374,  2558,
    1624,  3039,  1974,  1645,  2561,  1349,  1623,  2880,  1097,  2764,
    1653,  1341,  2648,  1117,  1541,  1366,  1121,  2679,  2919,  3352,
    1737,  1371,  1372,  1373,  3082,  1375,  1599,  1953,  1115,   133,
    1417,   988,   991,  2387,  2382,  2911,  1418,   588,  1341,  2534,
    1128,  1129,  1130,  2383,  2275,   519,  2729,  2730,  2609,  2748,
    1689,  1029,  2453,  2502,  2323,  2503,  2395,  2810,  1283,   591,
    2399,   473,  1882,  2022,   473,   598,   604,  2288,  1136,  1137,
    1138,  2414,   593,  3357,  3539,   595,  3675,  2700,  1895,  2788,
    1179,  2423,  1178,   480,  3425,  1655,  1656,  2635,  3279,  1659,
    1660,  1661,  1662,  1860,  1664,  1665,  1667,  1669,  1670,  1671,
    1672,  1673,   532,  1250,  2431,  1818,  2739,  2929,   539,  3391,
    3396,  2934,  1732,  3397,  2749,  2359,   587,  2491,  1250,  3372,
    1895,   617,   528,  2012,  1829,  2339,  2056,  2345,  2346,  1145,
    1146,  2727,  3405,  2640,  2378,  1832,  1833,  1346,  3424,  2747,
    1469,  1145,  1146,  2370,  2357,  2256,  3759,  1393,  4095,  2499,
    3483,  3398,   878,   879,  1245,  3246,  2778,  2193,  2500,  2866,
     608,  2375,  2376,  1751,  1197,  2888,  3588,  3034,  3247,  1145,
    1146,   813,  2782,  1414,  1242,  2933,  1323,  2397,  2398,  2232,
    2400,  3109,  3248,  2403,  2404,  4070, -1857,  2407,  3024,   878,
     879,   992,  2416,  1368,   878,   879,  2419,  2420,  2421,  2422,
    2310,  3264,  -823,  2426,   609,  2428,   525,  2688,  3112,  1414,
   -2349,  2437,  2188,  2605,  2441,  3228,  2443,  2536,   830,  1713,
    4020,  3358,  1277,  3286,  2947,   695,  3962,  1842,   632,  1352,
    2774,  2775,  3537,  1180,   529, -1405,  2463,  3970,  -525,  1251,
    2432,  2473,  1400,   831,  2516,  2744,  2332,  2479,  2480,  1145,
    1146,  4243,  2484,  2782,  1251,  2438,  2745,  1145,  1146,  2262,
    3547,  2855,  1145,  1146,  1256,  3574,  1421,  1414,  3091,   132,
    -430,  2486,  2487,  2488,  2489,  3185,  1878,  1874,   934,  1145,
    1146,  1884,  3246,  1124,  1145,  1146,  3127,  1002,  1964,  1145,
    1146,  3879,  2767,  1145,  1146,  3247,  -526,   132,  1145,  1146,
    1145,  1146,  1145,  1146,  3759,  3027,   549, -2280,  2233,  3248,
    1145,  1146,  2285,  3760,   134,  4095,  1387,  2733,  1878,  1494,
     476,   878,   879,  3118,  1376,   548,   481,   622,  1430,  1431,
    1145,  1146,  1145,  1146,  1383,  3228,  3759,   524,  4085,  2511,
    1145,  1146,  2018,  2881,  2882,  1495,  3607,  3443,   925,   926,
    1896,   929,   128,  1145,  1146,  3611,  1540,  1145,  1146,  3513,
    2512,  1384,  1271,   816,  1145,  1146,  1488,  1028,  3246,  1084,
    4086,  1470,  2783, -1405,  3624,  2982,  2257,  1394,  3963,  3626,
    3836,  3247,  2264,  2265,  1339,  1145,  1146,  1843,  2059,  3098,
    1388,  1844,  1896,  3128,  1438,  3248,  2791,   610,  1965,  1145,
    1146,  1853,  2768,  1685, -2281,  1145,  1146,   878,  3392,  1490,
    1145,  1146,  3075, -2280,  3755,  1145,  1146,  1385,  2300,  3033,
    1714,   719,  1875,  2893,  3976,  3229,  2119,  2439,  2856,   613,
     598,  2135,   604,   129,  4244,  1401,  1145,  1146,  1686,  1191,
    1145,  1146,  2746,  4021,  3658,  3095,   935,  1064,  2594,   772,
    3684,  1125,   815,   604,  1813,  1013,  1021,  1816,  2694,  3086,
    3359,  2913,   811,  1820,  2413,  2311,   598,  2301,   821,  3119,
    3970,  3760,  1147,  1283,   832,  1148,  3108,   993,  1182,  3110,
    3111,   835,  1369,  1145,  1146,  2693,  2792,  3265,  3092,  1650,
    2796,  1417,  1379,  1834,  1658,  1836,  4066,  1418,  3121,  1283,
    2234,  3363, -1405,  3760,  2812,  2813,   814,  2382,  1324,   931,
   -2281,  1679,  1147, -1365,  2823,  1148,  2383,  1882,  2189,   526,
    2858,  3833,  2596,  1181,  2894,  3313,  2867,   948,  2502,  3113,
    2503,  1858,  1525,  1526,  3514,  2921,   598,  3373,   962,  2194,
    2453,  1689,  3964,  2381,  3715,  3229,  2258,  1953, -1365,   588,
    1715,  3087,  3088,  1564,  3102,   588,  3214,   986,  2728,   588,
     588,  1417,  1578,  1347,  1000,   962,  3509,  1418,  2057,   598,
    1009,  3004,  3005,  3006,  1591,  1592,  1593,  2784,  1243,  1030,
    1031,  1032,  2701,  1598,  2318,  1037,  1471,  2172,   780,  2322,
    4028,  1471,  1147,  2772,  2757,  1148,   909,  2883,  2175,  2738,
    1147,  2178,  2169,  1148,  3943,  1147,  2023,   826,  1148,  2453,
    1145,  1146,   530,  2776,   838,  1692,  1193,  3042,  3043,  3044,
    1145,  1146,  1147,  2433,  2499,  1148,  1709,  1147,   972,  1085,
    1148,  1246,  1147,  2500,   983,  1148,  1147,  1883,  3779,  1148,
     932,  1147,   857,  1147,  1148,  1147,  1148,  2012,  1148, -2349,
    3754,  1733,  2795,  1147,  2797,  1353,  1148,  3703,  2498,  3226,
    3768,  2808,  2926,  1027,  1145,  1146,  3813,  2777,  3399,  -823,
    2983,  1752,  2807,  1147,  2820,  1147,  1148, -2349,  1148,  1687,
    2829,  1731,  1860,  1147,  2815,  3484,  1148,  1142,  2000,  1144,
    3249,  1767,  3045,  3046, -1405,  2843,  1147,  1758,  2017,  1148,
    1147,  3385, -1405,  1148,  3122,  -525,  2918,  1147,  1145,  1146,
    1148,  2302,  1149,  1187,   473,  1189,  2878,   962,   473,   598,
    1471,   473,   598,  3308,  1149,  1188,  2244,  1338,  1147,  1192,
    2155,  1148,  1196,  3548,  1817,  3404,  1884,  -430,  3888,  4061,
    3933,  3213,  1147,  3407, -2280,  1148,  1794,  4224,  1147,  2785,
    3430,  1148,  1149,  1147,  1145,  1146,  1148,  4135,  1147,  1255,
    2886,  1148,  3333,  -526,  3383,  3384,  1630,  1631,   936,   588,
    1145,  1146,  2933,  1126, -2280,  2933,  2933,   625,  3377,  1147,
     598,   588,  1148,  1147,  2679,   588,  1148,  1831,  3107,  3940,
    2653,  3942,  2933,  3752,  3362,  3047,  1162,  1842,   778,  3306,
    3342,  3517,  1145,  1146,  3346,   560,  3406,  2032,  1145,  1146,
    1380,  3423,  3426,  3428,  3429,  1145,  1146,  3249,  3837,   843,
    1862,  1145,  1146,  2994,   836,  2523,  1147,  1145,  1146,  1148,
     598,  2033,  1149,  3317,  2256,  3564,  1491,  1492,  1493,  2066,
    1149, -2281,  3422,  1145,  1146,  1149,  1630,  2085,  1262,  1145,
    1146,  3232,   951,  1686,  1273,  2120,  1228,  3572,  3019,  2136,
    1280,  2895,  1149,  3728,  3341,  3980,  2018,  1149,  3345,  2091,
    3355, -2281,  1149,  2926,   588,   561,  1149,  2505,  3573,  2506,
     537,  1149,  2067,  1149,   554,  1149,  2048,  4002,  1145,  1146,
    2124,  2125,  3242,  1149,  1413,  2141,  2142,  2617,  2618,  2951,
    2952,  2276, -1365,  3249,   577,  2382,  4063,  2244,  2047,  2314,
    1145,  1146,  2028,  1149,  2383,  1149,  1259,  3237,  2156,  2502,
     473,  2503,   588,  1149,  3393,  3183,  2193,  2060,  2312,  2968,
    2969,  1436,  2789,  2789,   562,  1381,  1149,  2991,  2992,  2317,
    1149,  2344,  2320,  2321,  1015,  1023, -1705,  1149,  1010,  1341,
    1811,  1811,  3079,  1147,   563,  2065,  1148,  1843,  3242,  1938,
    1382,  1844,  2072,  1147,  1768,  2275,  1148,  3953,  1149,  3316,
     965,  2387, -1706,   588,  3476,  3338,    42,  1507,  2538,  1165,
    2524,  1341,  1149,  3653,  1640,  1145,  1146,  2157,  1149,   839,
    1145,  1146,  3666,  1149,  2414,  1882, -2413,  2073,  1149,  2667,
    3939,  1145,  1146,  2083,  2086,  1941,  2177,  1147,  2084,  1514,
    1148,  3477,  1085,  2087,  2575,  2499,  2381,  2616,  3048,  1149,
     966,  1678,  1633,  1149,  2500,  1085,  3696,  1145,  1146,  3553,
    2507,  1145,  1146,   565,  2099,  1145,  1146,  1565,  2107,  1953,
    1566,  3694,  2244,  2188,  3243,  1895,  1145,  1146,  3729,   973,
     844,  1147,  1498,  2277,  1148,  2966,  1505,  2754,  3557,  3558,
   -1683,  3830,  2621,  2622,   578,  2257,  1149,  3453,  3934,   952,
    2152,  2716,  3565,  2734,  3884,  1625,  3454,  2192,  1145,  1146,
    1417,  2111,  2148,   114,  1145,  1146,  1418,   598,  1801,  3453,
     994,   580,  1883,  3351,  1687,  3070,   953,  1147,  3454, -2413,
    1148,  1011,   967,   581,  1895,  3920, -1705,  3566,  1260,  2196,
    3243,  2615,  1742,  1147,  1145,  1146,  1148,  1514,  3954,  3244,
    3071,  2625,  1145,  1146,   598,   477,  2899,  2012,   478,  1682,
    1878,  1515, -1706,  2498,   588,  1624,    55,  1145,  1146,   840,
    2252,  2253, -2465,   588,  1802,  1147,  3730,  1473,  1148,  1145,
    1146,  1147,  1180,  1494,  1148,  2005,  1674,   845,  1147,  1145,
    1146,  1148,  2663,  1842,  1147,  1769,   995,  1148,  1145,  1146,
    1147,  3930,  4004,  1148,  1145,  1146,  1145,  1146,  3199,  1496,
    2162,  2158,  1634,  4005,   598,  3254,  1147,  2303,  3487,  1148,
     695,   583,  1147,  1149,   116,  1148,  1718,  1183,  1721,  2445,
     588,  1145,  1146,  1149,  4281,  1624,  2453,  3455,  2112,   588,
    1514,  2752,  3013,  1684,  1884,   598,  1145,  1146,  2113,   589,
    3513,  3655,  2017,  1514,  2525,   588,   588,  2453,  1514,  3455,
     846,  1147, -1683,  2504,  1148,  2258,  3633,  1010,  2900,  1530,
    3843,  2170,  2149,  1878,   594,  1145,  1146,  1149,  2494,   598,
    1686,  3844,  1771,  1147,  4133,  4134,  1148,  1474,  1145,  1146,
    1779,  1475,  2114,  1864,  3080,  1145,  1146,  1174,  1175,  1176,
    1177,  3072,  1476,   473,   473,   473,   588,   473,   588,  3893,
    3924,  1342,  1725,  1812,  1795,  1796,  1797,  1289,  1799,  1814,
     473,  1149,   598,  1437,  1624,  1715,   473,  1310,  1145,  1146,
    2827,  1815,  1878,   968,  1145,  1146,  2118,  1819,  2194,  1145,
    1146,  3899,  3915,  1145,  1146,  1878,  1803,  1896,  3200,  3081,
     588,  2262,  3245,  1843,  3925,  2789,  1145,  1146,  1147,   605,
    1343,  1148,  1583,  1147,  1145,  1146,  1148,  1149,   973,  1145,
    1146,  1145,  1146,  1497,  1147,  1587,  2018,  1148,  1791,  2189,
    1610,  2064,  2505,  1149,  2163,  1798,  2183,  1800,  1675,  3935,
    3816,  1145,  1146,  2262,  2184,   969,   598,   970,  2137,   477,
    1147,  2263,   478,  1148,  1147,  1740,  1896,  1148,  1147,   588,
    1676,  1148,  4006,  1970,   588,  1149,   719,  2413,  3245,  1147,
    1011,  1149,  1148, -1047,  1477,  3514,  3634,   116,  1149,  1830,
    2949,  1145,  1146,  1885,  1149,  3757,  2950,  3598,   909,  3796,
    1149,  2901,  1064,  2961,  2381,   588,  2006,  1895,  1741,  2971,
     538,  1147,  1686,  3662,  1148,  2972,  1149,  1147,  3797,  3996,
    1148, -2465,  1149,   626,   598,  1686,   473,   473,   638,  2030,
     473,  3495,  1181,  3926,  1145,  1146,  2071,  2026,  2027,  1328,
    3936,  3845,  1037,  1894,  2046,  -196,   592,  1147,  1966,  1567,
    1148,  3567,  1568,  1972,  2878,  1147,   613,  2920,  1148,  1145,
    1146,  1149,  1065,  2990,  1145,  1146,   614,  3937,  1145,  1146,
    1147,  3654,  2598,  1148,  3815,  2967,  2264,  2265,  1478,  1339,
     817,  1687,  1147,  1149,  3515,  1148,   639,  1145,  1146,  2328,
    2620,  3599,  1147,  1183,  1886,  1148,  1329,  2074,  2179,  2902,
    3197,  1147,  3957,  3958,  1148,  1145,  1146,  1147,  3300,  1147,
    1148,  2358,  1148,  2266,  2498,  1085,  2092,  1145,  1146,  2816,
     619,  2285,  1330,  1145,  1146,  2197,  1677,  1145,  1146,  1145,
    1146,  3600,  1624,  4068,  1147, -1683,  4072,  1148,  3030,  4007,
    2563,  2696,   558,  2164,  1183,  3198,  1772,   559,  1183,  1147,
    2238,  3301,  1148,  2569,  1066,  1117,  1121,   695,  1149,  2165,
    1883,   818,  2653,  1149,  1743,  1145,  1146,  2286,  3722,  3723,
     909,  4078,  2075,  3587,  1149,  2161,  3692,  2082,  1147,  3982,
     617,  1148,  1856,   909,  1145,  1146,  2584,  2244,  2095,  1975,
    2817,  1147,  1145,  1146,  1148,  3203,  1145,  1146,  1147,  2364,
    1149,  1148,  2152,  1266,  1149,  1878,  1267,  4206,  1149, -2413,
    3204,   640,  3714,  1976,  2096,  2329,  3587,  2185,  2100,  1149,
     997,   998,  2104,  1744,  2697,   598,  4207,   588,   598,  2167,
     819,  1147,  2330,  2105,  1148,  1451,  1452,  1147,  3516,   588,
    1148,  2202,  1147,  2331,  2725,  1148,  1147,  2208,  2208,  1148,
    2208,  1149,  3517,  1687,  1887,  2631,  2032,  1149,  2365,  1147,
     588,  4158,  1148,  1888,   588,  2106,  1687,  1147,  1773,  1889,
    1148,  2110,  1147,  3400,  1147,  1148,  3401,  1148,  2183,  1896,
    2033,  1145,  1146,  2887,  2366,  2818,  3056,  1149,   598,   598,
     588,   588,  2017,  1471,  1147,  1149,  1856,  1148,  2504,  1085,
    2623,  2115,  2208,  2208,  2208,  2466,  3000,  3771,  3775,  2123,
    1149,  2086, -2413,  3921,  3625,  3922,  1745,  3627,  3501,  2298,
    2332,   633,  1149,  1331,  2128,  1686,  2207,  2207,  2309,  2207,
    1490,   621,  1149,  2505,  1147,  2794,  2143,  1148,  2210,  2230,
    2211,  1149,  3518,  1262,   768,  1268,  2923,  1149,  1162,  1149,
     624,  2367,   248,   719,   250,  2939,   489,  4152,  4152,  2821,
    2822,  2945,  1890,  2946,  2467,   588,  1743,  2251,   635,  1280,
    2255,   776,  1464,  1465,  1149,  3663,  1312,  1147,  2327,  1064,
    1148,  2207,  2207,  2207,   636,   588,   637,   695,  2953,  1149,
    3339,  1746,  2280,  2281,  2282,  3328,  2806,  1145,  1146,  2061,
    3076,  3240,  1147,  2957,  2305,  1148,  3077,  1147,  1145,  1146,
    1148,  1147,  2543, -1595,  1148,   773,  3329,  3771,  1149,  1162,
     812,  3775,  3256,  3257,   823,  1744,  2368,   860,   849,  2333,
    1147,  1149,  2958,  1148,  3078,  3809,  3810,  1895,  1149,  1116,
    1341,  2062,  1182,  3270,  2319,  2959,  1341,  3330,  1147,   827,
    2492,  1148,  2960,  1332,  2508,  1891, -1595,  2468,  3811,   248,
    1147,   250,  2041,  1148,  2338,   829,  1147,   544,  1811,  1148,
    1147,  1149,  1147,  1148,   544,  1148,  1333,  1149,  3771,  3775,
    2348,  2440,  1149,   909,   851,  2962,  1149,   927,  2005,  2355,
    2356,  2965,  2559,  2334, -1595,  2454,  1624,  2559,   840,  1149,
    2360,  2361,  2362,  2363,   947,  2371,  2372,  1149,  1147,   946,
    1781,  1148,  1149,  2970,  1149,  2063,  1182,  1334,  1745,  4147,
     955,  2973,  3783,  3784,  3785,  3786,  2975,  1147,  2977,   815,
    1148,  1165,  2469,   964,  1149,  1147,   976, -1595,  1148,  1147,
     973,  4201,  1148,  2537,  2844,  2384,  1003,  3386,  2979,   861,
    3389,  3390,  1624,   598,  4277,  2547,   668,   598,  2752,  2509,
     984,   543,   473,  1004,  2277,  1008,  1687,  3402,  1182,   588,
     588,   588,  2532,  2514,  1149,  2535,  3898,  2079,  1182,  1782,
     114,  2494,  2548,   719,  1354,  1624,   878,   879,  2980,  1039,
    2613,  2827,  1040,  1746,  1747,   598,  2377,  1861,  2464,  2465,
     598,  2472,  1165,  2474,  2475,  2476,  2477,  2478,  3084,  1064,
    2481,  1041,  2483,  1355,  1043,   673,  3886,  1149,  1044,   862,
    2244,  1045,  2634,  1162,  1147,  1048,   114,  1148,  2384,  2369,
    2549,  2981,  1049,  2550,  1710,  1878,  2364,  1711,  1050,  2828,
    1712,  2551,  1149,  2088,  1182,  1051,  3026,  1149,  2528,  2529,
    2530,  1149,  1052,  2410,  3904,  3365,  3366,  3907,  3908,  3909,
    3910,  3275,  1356,  1250,  1646,  3276,  1053,  1357,  1783,  1120,
    1149,  2089,  1581,  2101,  1182,  1167,  1168,  1054,  2925,  1055,
     940,   941,  1056,   942,  3277,   943,  3677,  1059,  1149,  2504,
    2989,  1975,  3069,   598,  1061,  2365,  1062,  3711,  3712,  1063,
    1149,  1185,  3494,  2005,  2102,  1182,  1149,  3408,   684,  1896,
    1149,  1067,  1149,   936,  3500,  1976,  2103,  1182,  2632,   115,
    3502,  2366,  2108,  1182,  3503,   598,  3504,  1145,  1146,  1068,
    3978,  2559,  1069,  2719,  2724,  2470,  2410,   116,  2244,   598,
    1147,  2152, -1405,  1148,  2373,  2374,  1167,  1168,  1149,  2006,
    1070,  1147,  3409,  1071,  1148,  1686,  1072,  3410,  2920,  1203,
    1186,  3992,  3993,  2602,  1182,  1073,  1624,  1149,  2638,  2639,
    4001,  2661,  3030,  1784,  1975,  1149,  2763,  2559,  1190,  1149,
   -1683,  3505,  1074,   700,  1204,  3678,  3679,  1075,  2367,  3575,
    3680,  3681,  1205,  3780,  4143, -1405,  1747,  1076,  1976,  1251,
    2684,  1079,   117,  3411,   770,   771,  1165,  1358,   774,   775,
    1546,  1080,   777,   598,   779,  1170,  1171,  1172,  1173,  1174,
    1175,  1176,  1177,  1086,  2005, -1405,  2705, -1405,  2707,  1087,
     118,  1088,   997,   998,   598,  1089,   598,   598,  1647,   878,
     879, -1405,  2963,  1182,  1812,  1812, -1405,  2634,  3036,  3037,
    1878,  1090,  2552,  1743,  1206,  3492,  3209,  3210,  2412,  2364,
   -1405,  3281,  1182,  2368,  1149,  3303,  3304,  1091, -1405,  1092,
    1625,  3435,  3436,  3480,  3488, -1405,  1093,  1359,  1207,   598,
     598,   119,  1208,  3496,  1182, -1405,  1170,  1171,  1172,  1173,
    1174,  1175,  1176,  1177,  1094,  3114, -1405,   863,   864,  1096,
     866, -1405,  1098,   869,  1550,  1099,   860,  2704,  3510,  1182,
   -1405,  2781,  1744,   909,  1100,  1209,   870,  1101,  2365,  2454,
    3636,  2793,   569,  1102,  2454,  -748,  3125,  2803,  2411,  2454,
    3525,  3526,  1210,  2454,  3131,  2802,  1103,  3133,  2239,  1360,
    1104,  2412,  3641,  2374,  2366,  2802,  1211,  2454,  2454,  2824,
     598,  3656,  3657,  1105,  2832,  3660,  3657,  2454,  1106,  1625,
    2834,  2835,  3661,  3657,  2006,  3716,  3304,  1107,   588,   570,
    1686,  1878,  3206, -1405,  1108,  1250,  2802,  1145,  1146,  4213,
    1149,  1042,  1109,  2454,  2854,  1865,   727,  1110,   483,  2553,
    1111,  1149,  1112,  1212,  2875, -1405,  1687,  3719,  3657,  1866,
    3726,  3727,  1551,   120, -1405,  2240,  1554,  3823,  3824,  3828,
    3657,  2367,  1113,  1555,   909,  1213,  3829,  3657,  2804,  2805,
     997,   998,  3831,  3657,  3263,  1114,  3412,  1118,   861,  3474,
    3475,  1119,  3413, -1405,  3832,  3657,  2007,  1648,  3838,  3839,
     571,  1161,  1232,  2831,  3840,  3839,  2179,  2833,  1361,  3900,
    3901,   588,  2454,  1649, -1405,  2554,  2328,  4012,  3824,  1518,
    1519,  1520,  4013,  3824,  3282,  1122,  2369,  4282,  3414,  1123,
     484,  1531,   121,  1127,  1542,  1543,  1544,  1545,  1546,  1131,
    2241,  1200, -1405,  2555,  1362,  2006,  2368,  4018,  3304,  1556,
    1132,  1686,  1172,  1173,  1174,  1175,  1176,  1177,   862,  4076,
    4077,  2879,  1584,  -779, -1405,  1588,  1133, -1405,  1134,  -605,
    1135,  1251,  1184,  1214,  4114,  4115,  4132,  3208,  1233,  1201,
    2384,  1229,  1215,  1216,  1234,  1606,  1607,  1231,   909,  1611,
    2904,   122,  2385,  -912,  2328,  4231,  4232,  3415,  1217, -1405,
    4267,  4268,  1237,  1558,  1239,  1162, -1405,  1240,  1626,  1627,
     485,  1162,  -605, -1405,  1248,  1867,  1218,  2007, -1405,  3578,
    2328,  3670,  3671,  2384,  1249,  1614,  1615,   118,  1235,  1547,
    1548,  1549,  1550,  2202,  1257,  2385,  1255,   598,   598,   598,
   -1405,  2008,  2329,  1258,  1236,   588,  1274, -1405,  3994,  3995,
    3320,  3321,  3288,  3289,  1473,  1219,  1220, -1405,  1275,  2330,
    3735,  2663, -1405,  2661,   598,  1288,  3735,  1625, -1405,  1286,
    2331,  1687,  1305, -1405, -1405, -1405,  3523,  3524,  1306,  1307,
    1085,  1221, -1405,   598,   598,   598,  1868,  1310,  -605,  1313,
    1321,  1162, -1405,   484, -1405,  1322,  3055,  2559,  3485,  1339,
    3416,  2490,  3057,  1163,  3059,  1222,  1327,  1624,  1348,   909,
     598,  1869,  1350,  3896,  2836,  1223,  2837, -1405, -1405,  1351,
    2329, -1405, -1405,  1367,  3012,  1164,  1975,  1370,  1377,  1378,
    1551,  -605,  1552,  1553,  1554,   572,   484,  2330,  1392,  1559,
    1395,  1555,  1396,  2242,  1398, -1405,  2329,  2332,  2331,  2369,
    1976,  1403,  1408,  1224,  1561,  1414,  1420,  2838,   573,  1422,
    1424,  1427,  2008,  2330,  1474,  1428,  1432, -1405,  1475,  1975,
    1870,  1434,  1435,  1439,  2331,  1440, -1405,  3054,  2839,  1476,
    1147,  2454,  1441,  1148,  2454,  2454,  1162,  2802,  1165,  2109,
     574,  1482,  1687,  1976,  1165,  1483,  1484,  1487,  1489,  1510,
     598,   486,  1490,  2454,  1508, -1405,  1514,  1180,   997,   998,
    1521,  1533,  2840,   647,  1535,  1126,  1570,  1556,  2802,  1580,
    1581,   487,  1582,  1622,  1632,  2332,  2802,  1641,  1663,  2802,
    1657,  3717,  3718,  1683,  3720,  3721,   863,   864,   865,   866,
     867,   868,   869,  1690,  1691,  1694,   575,  3555,  1697,  3137,
    1698,  2332,   588,  1701, -1405,   870,  2333,  3193,  3194,  1871,
     488,  1699,  -531,  1162,  2802,  1700,   489,  1702,  1703,  1704,
    1557,  1558,  1706,  3559,  1165,  1727, -1405,  1707,  1730,  3212,
    2386,  1166,  3120,  1738,  1754,  1755,  1756,  1757,  1761,  3581,
    3123,  1764,  3223,  -605,  1765,  3941,   668,  1766,  1775,   588,
    1624,  1477,   490,  3605,  3606,  1780,  3896,  1789,  1793,  1312,
     491,  3236,  1821,  1822,  1823,  1824,  3609,  1826, -1405,  1828,
    2334,  3612,  1835,  1837,  1066,  1117,  1121,  1911,  1912,  1839,
    1841,  3138,  1167,  1168,  2333,  1854,  -605,  1471,  1167,  1168,
    1980,  3325,  1162,  1863,  3628,  1169,  1979,  3630,   672,  1981,
    1982,  1983,  1984,  1985,  1986,   673,  1987,  2763,  1988,  1999,
    2333,  -731,  -731,  1914,  2019,  3215,  1989,  2001,  1990,  1165,
    1991,  1992,  -731,  1993, -1405,  3737,  1994,  1917,  3225,  1995,
    3280,   677,  1996,  1997,   487,  1918,  1998, -1405,  2705,  2020,
    2025,  2049,  2035,  2036,  3697,  1478,  2037,  2038,  2334,  2044,
    2050,  2052,  2078,  2070, -1405,  2053, -1405,  1559,  2054,  1920,
    2069,  2076,  2661,  2077,  2153,  2080,  2086,  2090,  1167,  1168,
    1149,  1560,  1561,  1414,  2334,  2094,  1921,   487,  2098, -1405,
   -1405,  2684,  3315, -1405, -1405,   598,  2116,  2117,  2122,  2138,
    2954,  2126,  2127,  4119,   598,  2841,  1165,  2139,   684,  2140,
    2632,  2160, -1117,  2166,  1926,  1177,  2176,  2198,  2205,  2093,
     598, -1234,  2223,  2097,  3741,  -605,  2231,  2237,  2298,  2704,
    2248,  2245,  1170,  1171,  1172,  1173,  1174,  1175,  1176,  1177,
    1172,  1173,  1174,  1175,  1176,  1177,  2121,  1625,  2278,  2279,
    2294,  2306,  2308,  2313,  2336,  3460,  2337,  2340,  3841,  2454,
    2341,  1152,  1153,  2343,  2349,  2347,  2354,   695,  -605,  2454,
    2384,  2802,  2350,  1167,  1168,  2351,  2352,  2353,  3615,  2396,
    1625,  1929,   699,   700,  2401,  1165,  2802,  2405,   588,  1930,
    2454,  2402,  2406,  4119,  2408,  1154,  4124,  4125,  3808,  4127,
    2409,  2559,  2415,  2418,  1931,  1155,  2417,  1624,  2424,  1908,
    2425,  2430,  2460,  4250,  2429,  2435,  1909,  1910,  1170,  1171,
    1172,  1173,  1174,  1175,  1176,  1177,  2436,  2537,  1911,  1912,
    1624,  2456,  2462,  2515,  2442,  2493,  4271,  2533,  2541,  2546,
    2564,  2565,  4166,  1156,  4167,  4168,  1865,  1624,  2566,  2184,
    1167,  1168,  2576,  4250,  1157,  1624,   473,  1932,  2610,  1913,
    1866,  4271,  2875,  3798,  1914,  1915,  2611,  3444,  2577,  2643,
    2644,  1916,  2612,  3544,  2645,  1933,  2589,  2608,  1917,  2629,
    2619,  1158,  2628,  2654,  2657,  2656,  1918,  3473,  3473,  3473,
    2641,  2642,  1812,  2651,  2664,  3799,  1919,   647,  2668,  2670,
    3969,  2686,  2687,  2709,   598,  4210,  2689,  2690,  2665,  1733,
    1920,  2669,  2674,  3808,  1171,  1172,  1173,  1174,  1175,  1176,
    1177,  3972,  2691,  2286,  1414,  2285,  2708,  1921,  1937,  1167,
    1168,  2710,  2731,  2212,  1922,  1923,  1939,  2735,  2740,  1159,
   -1683,  1924,  2741,  2742,  2758,  2765,  2766,  2809,  2811,  1925,
    2863,  2864,  2868,  -850,  2213,  1926,  3533,  4265,  2870,  3465,
    2763,  1625,  2885,   719,  2884,  1911,  1912,  2214,  3582,  2889,
    4051,  3583,  2890,  3581,  2891,  2892,   598,  2215,  1938,  2917,
     668,   725,  1856,  1927,  2045,  2926,   727,  2930,  2935,   728,
    1170,  1171,  1172,  1173,  1174,  1175,  1176,  1177,  2936,  -731,
    -731,  1914,  2937,  2938,  1945,  2986,  2940,  3800,  3697,  2997,
    -731,  2941,  3014,  2984,  3002,  1917,  1867,  2988,  3473,  3590,
    1928,  2993,  1929,  1918,  2996,  2216,  2217,  3007,  4057,  3009,
    1930,  3017,   672,  1266,  3018,  3595,  2559,  3021,  3032,   673,
    3035,  3041,  3584,  3585,  3053,  1931,  3038,  1920,  3058,  3052,
     502,  3066,  3085,  2218,  3089,  3135,  3090,  3104,  3093,  3105,
    3106,  1414,  1946,   598,  1921,   677,  3687,   783,   784,  1170,
    1171,  1172,  1173,  1174,  1175,  1176,  1177,  3196,  1947,  3117,
    3134,  3126,  1948,  3801,  3136,  3202,  3218,  1868,  3631,  3219,
    3632,  4102,  1926,  3208,  3211,  1290,  3325,  -440,  1932,  3207,
    3224,  3802,  4139,  2262,  3233,  1291,  4102,   503,  3227,   997,
     998,  3234,  1869,  3235,  2219,  1292,  1933,  3223,  3255,  1950,
    1934,  3238,  3258,  3259,  3803,  3266,  3267,  1293,  1294,  1295,
    3284,  3285,   684,   504,  3294,  3296,  3299,  3305,  3318,   598,
    3307,  3326,  3334,  1296,  3335,  3614,  3343,  3344,  3356,  3364,
    3367,   785,  3368,  3381,  3972,  3387,  3431,  1935,  3434,  1929,
    3442,  3439,  1936,  3445,  2220,   505,  3446,  1930,  3448,  1937,
    3452,  1870,  3461,  3463,  3469,  2912,  1938,  1939,  3462,  3482,
     786,  3638,  1931,  4200,  3466,  4202,  3467,  3642,  3478,  3479,
    3486,   695,  3480,   787,  4102,  2517,  3481,  3489,  3490,   598,
    3493,  3498,  3497,  3499,  4185,  4217,   699,   700,  1940,  3511,
    4188,  3512,   506,  3521,  3528,  3529,   788,  3709,   789,  3526,
    3538,  3056,  1941,  1942,  1943,  1944,  3540,  3808,  3541,   790,
    3473,  3473,  3546,  3473,  3473,  1932,  3549,  4253,  4254,  3551,
     853,   784,  4209,  3545, -1320,  1945,  3552, -1325,  2559,   791,
    3563,  1203,  3576,  1933,  3577,  4102,  3579,  4102,  3580,  3596,
    1871,  3593,  3604,  3422,  3608,  3610,  3618,  3620,  3619,  3622,
    3623,  3425,  4102,  3629,   792,  2866,  1204,  3637,  4262,  3639,
    3643,   793,  3644,  3659,  1205,  3668,  3664,  3669,   909,  3685,
    3672,  3725,  3686,  3673,  3674,  3705,  3689,  3707,  3690,  3749,
     588,  3700,  3701,  1946,  3804,  3731,  1937,  3739,  4102,  4102,
    3753,  3473,  3738,  4273,  1939,  4262,  3767,  3782,  3742,  1947,
     794,   784,  3488,  1948,   785,  3777,  3788,  3791,  3778,   -63,
    3825,  3820,  3880,  3846,   507,  3890,  3903,  3905,  3906,  3914,
     588,  3822,  3834,  3795,  3911,   766,  1206,  1949,  1297,  3842,
    3916,   598,  3883,   786,  3889,  3918,  3944,  2858,  3945,  3946,
    1950,  3948,  3966,  3968,  -307,  1298,   787,  3981,  3984,  3987,
    1207,   766,  4010,  3998,  1208,  4014,  4015,  4019,  4022,  3750,
    4023,  3835,  1945,  4016,  4028,  4031,  4017,   719,  4024,   788,
    4025,   789,  3582,  -325,  4056,  3583,  4059,  4066,  4080,  4081,
    4082,  4083,   790,   508,   785,   725,  4091,  1209,  4098,  4092,
     727,  4099,  4109,   728,  4112,  4123,  4103,  3974,  4131,  3789,
    -850,  4126,   791,  4128,  1210,  4129,  4140,  4135,  4142,  4148,
    4144,  4154,  4145,   786,  4156,  4159, -1478,  4173,  1211, -2199,
    1946,  4189,  1625,  4186,   795,  4192,   787,   792,   796,  4194,
    4197,  4198,  4208,  4203,   793,  4195,  1947,  4211,  4199,  4204,
    1948,  3997,   509,  4216,  4220,   797,  3584,  3585,   510,   788,
    4222,   789,  4225,   798,  3709,  4226,  3709,  4227,  3923,  4228,
    4230,   799,   790,  4234,  4251,  1212,  4236,   511,  1299,  4274,
     766,  4276,  3961,   794,  3885,   766,  2485,  1950,  2636,  3450,
    2773,  3451,   791,  3952,  1020,  3647,   800,  1213,  3959,  3881,
    3975,  4110,   512,  1426,  3645,  4111,  3649,  4278,  3748,   801,
     802,  4238,   557,  2270,  3040,   766,   922,   792,   513,  3857,
    4255,  3858,  3860,  3861,   793,  3863,  4170,  3864,  3865,  3866,
    3867,   766,  4096,  3868,  1300,  4171,  4153,  4108,  3871,  4107,
    3872,  2518,  2634,  3873,  1486,  3795,  1907,  3756,  2187,  1951,
    2446,  1973,  1301,  3130,   598,   803,  3020,  3531,  3986,  3025,
    4003,  3790,  3298,   794,  4065,  3534,  1736,  4191,  4122,  4161,
    3913,  2004,   766,   766,   766,   766,   634,  3468,  2444,  3216,
    2910,  2451,  2860,  3380,   766,  3369,   804,  3394,  3395,  3432,
    3733,  3589,  3621,  3983,  3613,  1214,  3332,  3929,   498,  4032,
     499,  2034,  3887,  3931,  1215,  1216,  3892,   795,   805,  3891,
     806,   854,  2527,  3766,  3736,  2448,  4121,  2848,  3371,  3592,
    1217,  3932,  2325,  1840,  2002,  1625,  2671,  2254,   797,  3991,
    3370,  3011,  1971,  2652,  3295,  2692,   798,  2607,  1218,  3740,
     944,  2284,  1317,  3283,   799,   598,  2995,  2562,  2753,  2606,
    4162,  3340,  3827,  1579,  4089,  3713,  3449,  4090,  1532,  2626,
    2875,  2875,  3375,  4214,  3699,  3710,  1857,  2699,  2531,   800,
    1724,  2650,  2677,  3536,  3311,  1759,  3310,  1219,  1220,  3350,
    4062,  2846,   801,   802,   933,  2043,  1038,   795,  1909,   918,
    1805,  2315,  1827,  2199,  3379,  2316,  3297,  4157,  4084,  4190,
    1911,  1912,  4130,  1221,  1763,  4275,  4279,  3617,   797,  3314,
    1778,  2295,  3336,  3074,  3550,  3702,   798,  4073,  4074,   598,
    2236,   856,  4162,   477,   799,  1770,   478,  1222,   803,  1717,
    3781,  1913,  1304,  2999,  3787,  1024,  1914,  1223,   858,  2024,
    1309,  1025,   628,   629,  1026,     0,     0,     0,     0,   800,
    1917,     0,     0,   822,     0,     0,     0,     0,  1918,   804,
       0,     0,   801,   802,     0,     0,     0,     0,  1919,     0,
       0,     0,     0,     0,     0,  1224,     0,     0,     0,     0,
       0,   805,  1920,   806,     0,  4175,     0,     0,  4266,     0,
       0,     0,  4183,     0,     0,     0,  1414,     0,     0,  1921,
       0,     0,     0,     0,  4280,     0,  1922,     0,   803,     0,
       0,     0,     0,  2847,     0,     0,     0,     0,   766,     0,
       0,  1925,     0,     0,     0,     0,     0,  1926,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   804,
       0,     0,     0,  4218,     0,     0,     0,     0,  4223,     0,
       0,     0,     0,     0,     0,  1927,     0,     0,     0,     0,
       0,   805,     0,   806,     0,     0,     0,     0,     0,     0,
       0,     0,  1625,   766,   766,     0,     0,  1046,     0,  4263,
       0,     0,   766,   766,   766,   766,   766,   766,   766,     0,
       0,   598,     0,   766,  1929,  1625,   766,   766,     0,   766,
       0,   766,  1930,     0,     0,   766,     0,  1078,   766,   766,
     766,   766,  1625,   766,   766,     0,  4263,  1931,     0,     0,
    1625,   766,   766,  1095,   766,   766,   766,   766,   766,     0,
     766,     0,   766,   766,   766,   766,   766,   766,   766,   766,
     766,   766,   766,     0,     0,   766,   766,     0,   766,     0,
     766,     0,     0,     0,   766,     0,   766,   766,     0,     0,
       0,  1542,  1543,  1544,  1545,  1546,     0,  1139,   766,   766,
    1932,     0,     0,     0,     0,     0,   766,     0,     0,     0,
       0,     0,     0,   766,   766,   766,     0,   766,  1933,     0,
       0,     0,  1934,     0,   766,   766,   766,     0,   766,   766,
     766,   766,   766,     0,   766,   766,   766,   766,   766,   766,
     766,   766,     0,     0,     0,   766,   766,   876,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   830,   877,     0,
       0,     0,     0,     0,  1936,     0,     0,     0,     0,     0,
       0,  1937,     0,     0,  1448,     0,     0,     0,     0,  1939,
       0,     0,     0,   878,   879,     0,  1547,  1548,  1549,  1550,
     880,     0,     0,     0,     0,   881,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   882,     0,   883,     0,
     884,     0,     0,     0,     0,  1942,     0,     0,     0,   885,
       0,     0,     0,  1449,  1450,  1451,  1452,  1453,  1454,     0,
    1455,  1456,  1457,  1458,  1459,  1460,  1461,  1945,  1462,  1463,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1911,  1912,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1683,   886,     0,     0,     0,
     766,   887,     0,     0,   888,     0,     0,  1551,   766,  1552,
    1553,  1554,     0,     0,     0,     0,     0,     0,  1555,     0,
    1914,     0,     0,     0,     0,  1946,     0,     0,     0,   889,
       0,   890,     0,     0,  1917,     0,     0,   891,     0,   892,
       0,  1947,  1918,     0,     0,  1948,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1447,     0,   893,   894,   895,     0,  1920,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1414,     0,  1950,  1921,     0,   896,     0,     0,     0,     0,
       0,     0,  1464,  1465,  1556,     0,     0,     0,     0,     0,
       0,  3877,     0,     0,     0,     0,   897,     0,     0,     0,
       0,  1926,     0,     0,     0,  1512,  1513,     0,     0,     0,
       0,     0,     0,     0,  1523,  1524,     0,     0,  1527,  1528,
    1529,     0,     0,   898,     0,  1534,     0,     0,  1536,  1537,
       0,  1538,     0,  1539,     0,     0,     0,  1557,  1558,     0,
    1572,  1573,  1574,  1575,     0,  1577,     0,     0,     0,     0,
       0,     0,     0,  1585,  1586,     0,  1589,  1590,     0,     0,
       0,     0,  1594,     0,  1595,  1596,  1597,     0,  1929,  1600,
    1601,  1602,  1603,  1604,  1605,     0,  1930,  1608,  1609,     0,
    1612,     0,  1613,     0,     0,     0,  1616,   899,  1620,  1621,
       0,  1931,     0,     0,     0,   766,     0,  3877,  3877,     0,
    1628,  1629,     0,     0,     0,  1911,  1912,     0,  1637,     0,
     900,     0,     0,     0,     0,  1642,  1643,  1644,     0,     0,
       0,   901,   902,     0,     0,   903,   904,     0,     0,     0,
       0,   905,     0,     0,     0,     0,     0,     0,     0,  -731,
    -731,  1914,     0,     0,  1932,     0,     0,   906,  1680,     0,
    -731,     0,     0,     0,     0,  1917,     0,     0,     0,     0,
       0,     0,  1933,  1918,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1559,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1920,  1560,  1561,
     907,   766,   766,   766,     0,     0,     0,     0,     0,     0,
       0,  1414,     0,   908,  1921,   766,     0,  3877,  3877,     0,
       0,     0,     0,     0,     0,  1937,     0,     0,  3877,     0,
       0,     0,     0,  1939,     0,     0,     0,     0,     0, -2227,
       0,   766,  1926,     0,   909,     0,     0,   766,     0,     0,
     766,     0,   766,     0,     0,     0,     0,     0,   766,     0,
     766,   766,   910,   911,     0,     0, -2227,     0,     0,     0,
       0,     0,     0,   912,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3877,  1777,     0,     0,     0,     0,     0,     0,     0,
    1792,  1945,     0,     0,     0,     0,  3877,     0,     0,  1929,
       0,   913,     0,     0,     0,     0,     0,  1930,     0,     0,
       0,     0, -2227,     0,     0,     0,     0,     0,   914,     0,
       0,     0,  1931,     0,     0,   766,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3877,     0,     0,     0,     0,     0,     0,     0,     0,  1946,
       0,     0,  3877,  3877,     0,     1,     2,     0,     0,     0,
       0,     0,     0,     0,     0,  1947,     0,     0,     0,  1948,
       0,     0,     3,     0,     0,  1932,     4,     0,     0,     0,
       0,     0,     0,     0,  3877,     0,     0,     0,     0,     0,
       5,     6,     0,  1933,  3877,     0,     0,     0,     7,     0,
    3877,     0,     0,     8,     9,     0,  1950,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    10,
       0,  3877,     0,  3877,     0,     0,     0,     0,     0,     0,
       0,     0,  3877,     0,     0,     0,     0,     0,    11,     0,
       0,     0,     0,  3877,     0,  3877,  1937,  3877,     0,     0,
       0,     0,     0,     0,  1939,     0,     0,     0,     0,    12,
       0,     0,  3877,     0,     0,     0,     0,    13,    14,    15,
       0,     0,     0,     0,     0,  3877,  3877,     0,     0,    16,
      17,     0,     0,     0,     0,     0,     0,  2055,     0,     0,
       0,     0,    18,     0,     0,     0,     0,     0,  3877,  3877,
       0,     0,     0,  3877,     0,    19,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    20,  1945,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    21,     0,     0,     0,
       0,    22,     0,     0,    23,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   766,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    24,     0,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1946,     0,     0,  2130,  2132,  2134,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1947,     0,     0,     0,
    1948,     0,     0,    27,     0,     0,     0,    28,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   766,     0,  2168,     0,   766,     0,     0,     0,     0,
     766,   766,  2173,     0,  2174,     0,     0,  1950,     0,   766,
       0,     0,   766,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   766,     0,   766,   766,     0,   766,   766,   766,
     766,   766,     0,     0,   766,     0,     0,     0,     0,     0,
       0,     0,     0,   766,     0,     0,     0,     0,     0,     0,
       0,   766,     0,   766,     0,   766,   766,   766,   766,     0,
       0,     0,   766,   766,   766,     0,    29,     0,     0,   766,
     766,   766,     0,   766,     0,   766,     0,   766,     0,   766,
       0,   766,     0,     0,     0,    30,   766,  2250,     0,     0,
       0,     0,     0,     0,     0,    31,     0,     0,     0,     0,
       0,     0,     0,     0,   766,     0,    32,     0,     0,     0,
       0,   766,     0,     0,   766,     0,     0,     0,     0,     0,
     766,     0,     0,   766,     0,     0,     0,   766,     0,    33,
       0,     0,    34,     0,    35,     0,     0,    36,     0,     0,
      37,    38,     0,     0,     0,     0,     0,     0,    39,     0,
      40,     0,     0,     0,     0,     0,     0,    41,     0,     0,
       0,     0,     0,    42,     0,     1,     2,     0,     0,     0,
       0,    43,     0,     0,     0,     0,    44,     0,    45,     0,
       0,    46,   766,     0,     0,     0,     4,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       5,     6,     0,     0,     0,     0,    47,     0,     7,     0,
       0,    48,     0,     8,     9,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    10,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    11,     0,
       0,     0,     0,     0,     0,     0,    49,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    50,    12,
       0,     0,    51,     0,     0,    52,     0,    13,    14,    15,
       0,    53,     0,     0,     0,     0,     0,     0,     0,    16,
      17,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2771,     0,     0,     0,     0,     0,     0,    54,     0,
       0,     0,     0,     0,     0,    19,  2461,     0,     0,  2771,
    2771,     0,     0,    55,     0,     0,     0,     0,     0,     0,
       0,    20,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    21,     0,     0,     0,
       0,    22,     0,     0,    23,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    24,     0,
      25,     0,     0,  2540,     0,     0,     0,  2542,     0,     0,
       0,     0,  2544,  2545,     0,     0,    26,     0,     0,     0,
       0,  2560,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    27,  2567,     0,  2568,    28,     0,  2570,
    2571,  2572,  2573,  2574,     0,     0,     0,     0,     0,     0,
       0,     0,  2771,  2771,     0,  2578,     0,     0,     0,     0,
       0,     0,     0,  2579,     0,  2580,     0,  2581,  2582,  2583,
       0,     0,     0,     0,  2586,  2587,  2588,     0,     0,     0,
       0,  2590,  2591,  2592,     0,  2593,     0,  2595,     0,  2597,
       0,  2599,     0,  2600,     0,     0,     0,     0,  2601,     0,
       0,     0,     0,   766,     0,     0,     0,   766,     0,     0,
       0,     0,     0,     0,     0,     0,  2614,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    29,     0,     0,   766,
     766,     0,  2624,     0,     0,  2627,     0,     0,     0,     0,
    3139,  3140,     0,     0,     0,    30,  3141,     0,  3142,   766,
    3143,  3144,     0,     0,     0,    31,     0,     0,   766,     0,
     766,     0,   766,     0,     0,     0,    32,     0,  3145,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   766,     0,     0,     0,     0,   766,     0,    33,
       0,     0,    34,     0,    35,     0,     0,    36,     0,     0,
      37,    38,     0,     0,     0,     0,     0,     0,    39,     0,
      40,   766,     0,     0,     0,     0,  3146,    41,     0,  3147,
       0,     0,     0,    42,     0,     0,     0,  3148,     0,     0,
       0,    43,     0,     0,     0,     0,    44,     0,    45,     0,
       0,    46,     0,     0,  3149,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3150,     0,     0,     0,     0,    47,     0,     0,     0,
       0,    48,     0,     0,     0,   766,     0,     0,     0,   766,
       0,     0,     0,     0,  3151,     0,  3152,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3153,  3154,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    49,     0,     0,     0,
       0,     0,     0,   766,     0,     0,     0,     0,    50,     0,
       0,     0,    51,     0,     0,    52,     0,     0,     0,  3155,
       0,    53,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3156,    54,     0,
       0,     0,     0,     0,     0,     0,  3157,  3158,     0,  3159,
       0,     0,     0,    55,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3160,
    3161,  3162,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3163,  3164,
    3165,     0,     0,     0,     0,  3166,     0,     0,  3167,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2771,     0,     0,     0,  3168,  3169,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3170,  3171,     0,   766,
       0,     0,     0,     0,     0,  2922,     0,     0,     0,  2924,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3172,   766,   766,     0,   766,     0,     0,     0,
       0,  2943,  2944,     0,     0,   766,     0,     0,     0,     0,
     766,     0,     0,   766,     0,   766,   766,     0,     0,     0,
       0,  2964,     0,     0,     0,     0,     0,     0,     0,     0,
    2974,     0,  2976,     0,  2978,     0,   766,     0,     0,     0,
       0,     0,     0,  3173,     0,     0,     0,  3174,     0,     0,
       0,   766,     0,     0,     0,     0,     0,     0,     0,  3175,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   766,     0,     0,     0,     0,
       0,     0,     0,  3008,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   766,     0,     0,     0,     0,
       0,     0,     0,     0,  3176,     0,     0,     0,  3177,   766,
       0,  3178,  3179,  3180,  3181,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   766,
       0,     0,     0,     0,     0,     0,     0,  3064,   766,     0,
       0,  3068,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3182,  3183,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3184,     0,
       0,     0,     0,     0,     0,  3099,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   766,   766,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   766,     0,     0,     0,     0,     0,     0,     0,
       0,  3241,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3261,  3262,     0,     0,     0,
       0,   766,   766,     0,     0,     0,     0,  3269,     0,     0,
     766,     0,  3271,     0,     0,  3272,     0,  3273,  3274,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3291,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3291,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3337,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3291,     0,     0,     0,   766,     0,     0,     0,   766,
    3361,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     766,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   766,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   766,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3440,  3441,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   766,     0,     0,     0,     0,     0,     0,     0,   766,
       0,     0,     0,     0,  3291,     0,     0,     0,   766,     0,
     766,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3561,  3562,     0,     0,     0,     0,     0,
    3875,     0,  3099,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   766,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   766,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     766,     0,     0,     0,     0,     0,  3875,  3875,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3099,     0,     0,
       0,  3667,     0,     0,  3979,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3291,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3099,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3064,
       0,     0,   766,     0,   766,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   766,     0,  3875,  3875,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3875,     0,     0,
       0,     0,     0,     0,     0,     0,   766,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   766,     0,
    3875,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3875,   766,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   766,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3814,     0,     0,     0,     0,     0,     0,   766,  3875,
    3819,     0,  3821,     0,     0,     0,     0,     0,     0,     0,
       0,  3875,  3875,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3875,     0,     0,     0,     0,     0,     0,
     766,     0,     0,  3875,     0,     0,     0,     0,     0,  3875,
       0,     0,     0,   766,     0,     0,   766,     0,     0,     0,
       0,     0,     0,   766,  3099,     0,     0,     0,     0,     0,
    3875,     0,  3875,     0,     0,     0,     0,     0,     0,     0,
       0,  3875,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3875,     0,  3875,     0,  3875,  3099,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3875,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3875,  3875,     0,     0,     0,     0,
     766,     0,  3947,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3875,  3875,     0,
       0,     0,  3875,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   766,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4026,     0,  4027,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4035,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3291,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4100,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4105,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4138,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4177,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4193,     0,
       0,     0,     0,     0,     0,  4196,     0,   135,     0,   643,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,     0,   644,     0,   143,   144,   145,   146,   147,   645,
     149,     0,   150,     0,     0,   646,   151,   647,   648,   649,
     152,   650,     0,   153,   154,   155,  1617,   156,     0,   157,
     158,     0,     0,   159,   651,   652,   160,   161,     0,   162,
     163,   653,   654,   165,     0,   166,   167,   168,   169,   170,
     655,   172,  4264,   656,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,     0,   185,   186,
     187,   657,   189,     0,   190,   658,   659,   191,     0,     0,
     192,   660,   661,     0,   193,   662,   663,     0,   194,   195,
     196,   664,   665,   666,     0,     0,  3291,     0,   667,   199,
     668,     0,     0,   669,   200,     0,   201,     0,     0,     0,
     202,     0,   203,   204,   205,   206,     0,     0,     0,   207,
       0,     0,   208,   209,   210,     0,     0,     0,   211,     0,
     212,   213,     0,   214,   215,   216,     0,     0,   217,   218,
       0,   219,   220,   221,   222,   223,   670,     0,   224,   225,
     226,   671,   672,   227,   228,     0,   229,   230,   231,   673,
       0,   232,     0,     0,     0,   233,     0,   234,     0,   235,
       0,   236,   674,   238,   675,   240,     0,   241,     0,   676,
       0,   242,   243,     0,   244,   677,     0,   245,   246,     0,
       0,     0,   678,   248,   249,   250,   679,     0,   251,   252,
     253,     0,   254,     0,   255,     0,     0,     0,   680,   256,
     257,   681,     0,     0,   258,     0,   259,   260,     0,   261,
     262,     0,     0,     0,   263,     0,     0,   264,   265,     0,
    1618,   266,     0,   682,   267,   268,     0,     0,     0,     0,
       0,   683,   270,     0,   271,     0,   272,     0,   273,   274,
       0,     0,   684,     0,     0,     0,     0,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
       0,   288,   289,   290,   685,   291,   292,   293,   294,   686,
     295,   296,     0,     0,     0,     0,   297,   298,   299,   300,
     687,   302,     0,     0,   688,   304,   689,   305,     0,   306,
     690,   691,   692,   693,   694,   311,   312,   313,   314,   315,
       0,   695,   316,   317,     0,     0,   318,   319,   320,   321,
     696,   697,   698,   322,   323,     0,   699,   700,     0,   324,
     325,   701,     0,   327,   328,   329,     0,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,   332,   333,
     702,   334,   335,   336,   337,   338,   703,   340,   341,   342,
     704,   705,   345,   706,     0,   346,   347,   348,     0,   349,
       0,   350,   351,   352,   353,   354,     0,   707,   356,   357,
     358,     0,     0,   359,     0,     0,     0,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   372,   373,   374,   708,   709,   375,     0,
     376,     0,   377,   378,     0,   379,   380,     0,     0,   710,
     381,   382,   383,   384,   385,   711,   387,   388,   389,   390,
       0,   712,   392,     0,     0,     0,   393,   394,   395,   396,
       0,     0,     0,   397,     0,     0,     0,   398,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,     0,
       0,     0,     0,     0,     0,   408,   409,     0,   410,     0,
       0,     0,   411,     0,     0,   412,   413,   414,     0,   713,
     714,   415,   416,     0,   417,   418,   715,   420,   421,   422,
     716,   717,   423,   424,   425,   426,   718,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   719,   434,   435,
       0,   436,   720,   721,   722,   723,     0,     0,     0,     0,
    1619,   441,   442,     0,   724,   725,   726,   444,   445,   446,
     727,   447,   448,   728,   449,   450,     0,   451,   452,     0,
       0,   453,     0,     0,   454,     0,   455,     0,   729,   457,
     458,     0,     0,   730,   731,   732,   733,   459,     0,     0,
     460,   734,     0,   735,   461,   462,   463,   736,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,   468,   469,
       0,     0,   737,     0,     0,     0,   738,   739,     0,     0,
       0,     0,   740,   741,     0,     0,   742,   743,     0,     0,
     744,   745,   135,     0,   643,   137,   138,   139,   140,  3060,
       0,     0,     0,     0,   141,     0,     0,   644,     0,   143,
     144,   145,   146,   147,   645,   149,     0,   150,     0,     0,
    3061,   151,   647,   648,   649,   152,   650,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,   651,
     652,   160,   161,     0,   162,   163,   653,   654,   165,     0,
     166,   167,   168,   169,   170,   655,   172,     0,   656,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,     0,   185,   186,   187,   657,   189,     0,   190,
     658,   659,   191,     0,     0,   192,   660,   661,     0,   193,
     662,   663,     0,   194,   195,   196,   664,   665,   666,     0,
       0,     0,     0,   667,   199,   668,     0,     0,  3062,   200,
       0,   201,     0,     0,     0,   202,     0,   203,   204,   205,
     206,     0,     0,     0,   207,     0,     0,   208,   209,   210,
       0,     0,     0,   211,     0,   212,   213,     0,   214,   215,
     216,     0,     0,   217,   218,     0,   219,   220,   221,   222,
     223,   670,     0,   224,   225,   226,   671,   672,   227,   228,
       0,   229,   230,   231,   673,     0,   232,     0,     0,     0,
     233,     0,   234,     0,   235,     0,   236,   674,   238,   675,
     240,     0,   241,     0,   676,     0,   242,   243,     0,   244,
     677,     0,   245,   246,     0,     0,     0,   678,   248,   249,
     250,   679,     0,   251,   252,   253,     0,   254,     0,   255,
       0,     0,     0,   680,   256,   257,   681,     0,     0,   258,
       0,   259,   260,     0,   261,   262,     0,     0,     0,   263,
       0,     0,   264,   265,     0,     0,   266,     0,   682,   267,
     268,     0,     0,     0,     0,     0,   683,   270,     0,   271,
       0,   272,     0,   273,   274,     0,     0,   684,     0,     0,
       0,     0,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,     0,   288,   289,   290,   685,
     291,   292,   293,   294,   686,   295,   296,     0,     0,     0,
       0,   297,   298,   299,   300,   687,   302,     0,     0,   688,
     304,   689,   305,     0,   306,   690,   691,   692,   693,   694,
     311,   312,   313,   314,   315,     0,   695,   316,   317,     0,
       0,   318,   319,   320,   321,   696,   697,   698,   322,   323,
       0,   699,   700,     0,   324,   325,   701,  3063,   327,   328,
     329,     0,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   332,   333,   702,   334,   335,   336,   337,
     338,   703,   340,   341,   342,   704,   705,   345,   706,     0,
     346,   347,   348,     0,   349,     0,   350,   351,   352,   353,
     354,     0,   707,   356,   357,   358,     0,     0,   359,     0,
       0,     0,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,   368,   369,     0,   370,   371,     0,   372,   373,
     374,   708,   709,   375,     0,   376,     0,   377,   378,     0,
     379,   380,     0,     0,   710,   381,   382,   383,   384,   385,
     711,   387,   388,   389,   390,     0,   712,   392,     0,     0,
       0,   393,   394,   395,   396,     0,     0,     0,   397,     0,
       0,     0,   398,     0,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,     0,     0,     0,     0,     0,     0,
     408,   409,     0,   410,     0,     0,     0,   411,     0,     0,
     412,   413,   414,     0,   713,   714,   415,   416,     0,   417,
     418,   715,   420,   421,   422,   716,   717,   423,   424,   425,
     426,   718,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,   719,   434,   435,     0,   436,   720,   721,   722,
     723,     0,     0,     0,     0,     0,   441,   442,     0,   724,
     725,   726,   444,   445,   446,   727,   447,   448,   728,   449,
     450,     0,   451,   452,     0,     0,   453,     0,     0,   454,
       0,   455,     0,   729,   457,   458,     0,     0,   730,   731,
     732,   733,   459,     0,     0,   460,   734,     0,   735,   461,
     462,   463,   736,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,   468,   469,     0,     0,   737,     0,     0,
       0,   738,   739,     0,     0,     0,     0,   740,   741,     0,
       0,   742,   743,     0,     0,   744,   745,   135,     0,   643,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,     0,   644,     0,   143,   144,   145,   146,   147,   645,
     149,     0,   150,     0,     0,   646,   151,   647,   648,   649,
     152,   650,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,   651,   652,   160,   161,     0,   162,
     163,   653,   654,   165,     0,   166,   167,   168,   169,   170,
     655,   172,     0,   656,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,     0,   185,   186,
     187,   657,   189,     0,   190,   658,   659,   191,     0,     0,
     192,   660,   661,     0,   193,   662,   663,     0,   194,   195,
     196,   664,   665,   666,     0,     0,     0,     0,   667,   199,
     668,     0,     0,   669,   200,     0,   201,     0,     0,     0,
     202,     0,   203,   204,   205,   206,     0,     0,     0,   207,
       0,     0,   208,   209,   210,     0,     0,     0,   211,     0,
     212,   213,     0,   214,   215,   216,     0,     0,   217,   218,
       0,   219,   220,   221,   222,   223,   670,     0,   224,   225,
     226,   671,   672,   227,   228,     0,   229,   230,   231,   673,
       0,   232,     0,     0,     0,   233,     0,   234,     0,   235,
       0,   236,   674,   238,   675,   240,     0,   241,     0,   676,
       0,   242,   243,     0,   244,   677,     0,   245,   246,     0,
       0,     0,   678,   248,   249,   250,   679,     0,   251,   252,
     253,     0,   254,     0,   255,     0,     0,     0,   680,   256,
     257,   681,     0,     0,   258,     0,   259,   260,     0,   261,
     262,     0,     0,     0,   263,     0,     0,   264,   265,     0,
       0,   266,     0,   682,   267,   268,     0,     0,     0,     0,
       0,   683,   270,     0,   271,     0,   272,     0,   273,   274,
       0,     0,   684,     0,     0,     0,     0,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
       0,   288,   289,   290,   685,   291,   292,   293,   294,   686,
     295,   296,     0,     0,     0,     0,   297,   298,   299,   300,
     687,   302,     0,     0,   688,   304,   689,   305,     0,   306,
     690,   691,   692,   693,   694,   311,   312,   313,   314,   315,
       0,   695,   316,   317,     0,     0,   318,   319,   320,   321,
     696,   697,   698,   322,   323,     0,   699,   700,     0,   324,
     325,   701,     0,   327,   328,   329,     0,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,   332,   333,
     702,   334,   335,   336,   337,   338,   703,   340,   341,   342,
     704,   705,   345,   706,     0,   346,   347,   348,     0,   349,
       0,   350,   351,   352,   353,   354,     0,   707,   356,   357,
     358,     0,     0,   359,     0,     0,     0,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   372,   373,   374,   708,   709,   375,     0,
     376,     0,   377,   378,     0,   379,   380,     0,     0,   710,
     381,   382,   383,   384,   385,   711,   387,   388,   389,   390,
       0,   712,   392,     0,     0,     0,   393,   394,   395,   396,
       0,     0,     0,   397,     0,     0,     0,   398,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,     0,
       0,     0,     0,     0,     0,   408,   409,     0,   410,     0,
       0,     0,   411,     0,     0,   412,   413,   414,     0,   713,
     714,   415,   416,     0,   417,   418,   715,   420,   421,   422,
     716,   717,   423,   424,   425,   426,   718,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   719,   434,   435,
       0,   436,   720,   721,   722,   723,     0,     0,     0,     0,
       0,   441,   442,     0,   724,   725,   726,   444,   445,   446,
     727,   447,   448,   728,   449,   450,     0,   451,   452,     0,
       0,   453,     0,     0,   454,     0,   455,     0,   729,   457,
     458,     0,     0,   730,   731,   732,   733,   459,     0,     0,
     460,   734,     0,   735,   461,   462,   463,   736,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,   468,   469,
       0,     0,   737,     0,     0,     0,   738,   739,     0,     0,
       0,     0,   740,   741,  1533,     0,   742,   743,     0,     0,
     744,   745,   135,     0,   643,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,     0,   644,     0,   143,
     144,   145,   146,   147,   645,   149,     0,   150,     0,     0,
     646,   151,   647,   648,   649,   152,   650,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,   651,
     652,   160,   161,     0,   162,   163,   653,   654,   165,     0,
     166,   167,   168,   169,   170,   655,   172,     0,   656,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,     0,   185,   186,   187,   657,   189,     0,   190,
     658,   659,   191,     0,     0,   192,   660,   661,     0,   193,
     662,   663,     0,   194,   195,   196,   664,   665,   666,     0,
       0,     0,     0,   667,   199,   668,     0,     0,   669,   200,
       0,   201,     0,     0,     0,   202,     0,   203,   204,   205,
     206,     0,     0,     0,   207,     0,     0,   208,   209,   210,
       0,     0,     0,   211,     0,   212,   213,     0,   214,   215,
     216,     0,     0,   217,   218,     0,   219,   220,   221,   222,
     223,   670,     0,   224,   225,   226,   671,   672,   227,   228,
       0,   229,   230,   231,   673,     0,   232,     0,     0,     0,
     233,  2129,   234,     0,   235,     0,   236,   674,   238,   675,
     240,     0,   241,     0,   676,     0,   242,   243,     0,   244,
     677,     0,   245,   246,     0,     0,     0,   678,   248,   249,
     250,   679,     0,   251,   252,   253,     0,   254,     0,   255,
       0,     0,     0,   680,   256,   257,   681,     0,     0,   258,
       0,   259,   260,     0,   261,   262,     0,     0,     0,   263,
       0,     0,   264,   265,     0,     0,   266,     0,   682,   267,
     268,     0,     0,     0,     0,     0,   683,   270,     0,   271,
       0,   272,     0,   273,   274,     0,     0,   684,     0,     0,
       0,     0,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,     0,   288,   289,   290,   685,
     291,   292,   293,   294,   686,   295,   296,     0,     0,     0,
       0,   297,   298,   299,   300,   687,   302,     0,     0,   688,
     304,   689,   305,     0,   306,   690,   691,   692,   693,   694,
     311,   312,   313,   314,   315,     0,   695,   316,   317,     0,
       0,   318,   319,   320,   321,   696,   697,   698,   322,   323,
       0,   699,   700,     0,   324,   325,   701,     0,   327,   328,
     329,     0,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   332,   333,   702,   334,   335,   336,   337,
     338,   703,   340,   341,   342,   704,   705,   345,   706,     0,
     346,   347,   348,     0,   349,     0,   350,   351,   352,   353,
     354,     0,   707,   356,   357,   358,     0,     0,   359,     0,
       0,     0,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,   368,   369,     0,   370,   371,     0,   372,   373,
     374,   708,   709,   375,     0,   376,     0,   377,   378,     0,
     379,   380,     0,     0,   710,   381,   382,   383,   384,   385,
     711,   387,   388,   389,   390,     0,   712,   392,     0,     0,
       0,   393,   394,   395,   396,     0,     0,     0,   397,     0,
       0,     0,   398,     0,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,     0,     0,     0,     0,     0,     0,
     408,   409,     0,   410,     0,     0,     0,   411,     0,     0,
     412,   413,   414,     0,   713,   714,   415,   416,     0,   417,
     418,   715,   420,   421,   422,   716,   717,   423,   424,   425,
     426,   718,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,   719,   434,   435,     0,   436,   720,   721,   722,
     723,     0,     0,     0,     0,     0,   441,   442,     0,   724,
     725,   726,   444,   445,   446,   727,   447,   448,   728,   449,
     450,     0,   451,   452,     0,     0,   453,     0,     0,   454,
       0,   455,     0,   729,   457,   458,     0,     0,   730,   731,
     732,   733,   459,     0,     0,   460,   734,     0,   735,   461,
     462,   463,   736,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,   468,   469,     0,     0,   737,     0,     0,
       0,   738,   739,     0,     0,     0,     0,   740,   741,     0,
       0,   742,   743,     0,     0,   744,   745,   135,     0,   643,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,     0,   644,     0,   143,   144,   145,   146,   147,   645,
     149,     0,   150,     0,     0,   646,   151,   647,   648,   649,
     152,   650,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,   651,   652,   160,   161,     0,   162,
     163,   653,   654,   165,     0,   166,   167,   168,   169,   170,
     655,   172,     0,   656,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,     0,   185,   186,
     187,   657,   189,     0,   190,   658,   659,   191,     0,     0,
     192,   660,   661,     0,   193,   662,   663,     0,   194,   195,
     196,   664,   665,   666,     0,     0,     0,     0,   667,   199,
     668,     0,     0,   669,   200,     0,   201,     0,     0,     0,
     202,     0,   203,   204,   205,   206,     0,     0,     0,   207,
       0,     0,   208,   209,   210,     0,     0,     0,   211,     0,
     212,   213,     0,   214,   215,   216,     0,     0,   217,   218,
       0,   219,   220,   221,   222,   223,   670,     0,   224,   225,
     226,   671,   672,   227,   228,     0,   229,   230,   231,   673,
       0,   232,     0,     0,     0,   233,  2131,   234,     0,   235,
       0,   236,   674,   238,   675,   240,     0,   241,     0,   676,
       0,   242,   243,     0,   244,   677,     0,   245,   246,     0,
       0,     0,   678,   248,   249,   250,   679,     0,   251,   252,
     253,     0,   254,     0,   255,     0,     0,     0,   680,   256,
     257,   681,     0,     0,   258,     0,   259,   260,     0,   261,
     262,     0,     0,     0,   263,     0,     0,   264,   265,     0,
       0,   266,     0,   682,   267,   268,     0,     0,     0,     0,
       0,   683,   270,     0,   271,     0,   272,     0,   273,   274,
       0,     0,   684,     0,     0,     0,     0,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
       0,   288,   289,   290,   685,   291,   292,   293,   294,   686,
     295,   296,     0,     0,     0,     0,   297,   298,   299,   300,
     687,   302,     0,     0,   688,   304,   689,   305,     0,   306,
     690,   691,   692,   693,   694,   311,   312,   313,   314,   315,
       0,   695,   316,   317,     0,     0,   318,   319,   320,   321,
     696,   697,   698,   322,   323,     0,   699,   700,     0,   324,
     325,   701,     0,   327,   328,   329,     0,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,   332,   333,
     702,   334,   335,   336,   337,   338,   703,   340,   341,   342,
     704,   705,   345,   706,     0,   346,   347,   348,     0,   349,
       0,   350,   351,   352,   353,   354,     0,   707,   356,   357,
     358,     0,     0,   359,     0,     0,     0,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   372,   373,   374,   708,   709,   375,     0,
     376,     0,   377,   378,     0,   379,   380,     0,     0,   710,
     381,   382,   383,   384,   385,   711,   387,   388,   389,   390,
       0,   712,   392,     0,     0,     0,   393,   394,   395,   396,
       0,     0,     0,   397,     0,     0,     0,   398,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,     0,
       0,     0,     0,     0,     0,   408,   409,     0,   410,     0,
       0,     0,   411,     0,     0,   412,   413,   414,     0,   713,
     714,   415,   416,     0,   417,   418,   715,   420,   421,   422,
     716,   717,   423,   424,   425,   426,   718,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   719,   434,   435,
       0,   436,   720,   721,   722,   723,     0,     0,     0,     0,
       0,   441,   442,     0,   724,   725,   726,   444,   445,   446,
     727,   447,   448,   728,   449,   450,     0,   451,   452,     0,
       0,   453,     0,     0,   454,     0,   455,     0,   729,   457,
     458,     0,     0,   730,   731,   732,   733,   459,     0,     0,
     460,   734,     0,   735,   461,   462,   463,   736,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,   468,   469,
       0,     0,   737,     0,     0,     0,   738,   739,     0,     0,
       0,     0,   740,   741,     0,     0,   742,   743,     0,     0,
     744,   745,   135,     0,   643,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,     0,   644,     0,   143,
     144,   145,   146,   147,   645,   149,     0,   150,     0,     0,
     646,   151,   647,   648,   649,   152,   650,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,   651,
     652,   160,   161,     0,   162,   163,   653,   654,   165,     0,
     166,   167,   168,   169,   170,   655,   172,     0,   656,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,     0,   185,   186,   187,   657,   189,     0,   190,
     658,   659,   191,     0,     0,   192,   660,   661,     0,   193,
     662,   663,     0,   194,   195,   196,   664,   665,   666,     0,
       0,     0,     0,   667,   199,   668,     0,     0,   669,   200,
       0,   201,     0,     0,     0,   202,     0,   203,   204,   205,
     206,     0,     0,     0,   207,     0,     0,   208,   209,   210,
       0,     0,     0,   211,     0,   212,   213,     0,   214,   215,
     216,     0,     0,   217,   218,     0,   219,   220,   221,   222,
     223,   670,     0,   224,   225,   226,   671,   672,   227,   228,
       0,   229,   230,   231,   673,     0,   232,     0,     0,     0,
     233,  2133,   234,     0,   235,     0,   236,   674,   238,   675,
     240,     0,   241,     0,   676,     0,   242,   243,     0,   244,
     677,     0,   245,   246,     0,     0,     0,   678,   248,   249,
     250,   679,     0,   251,   252,   253,     0,   254,     0,   255,
       0,     0,     0,   680,   256,   257,   681,     0,     0,   258,
       0,   259,   260,     0,   261,   262,     0,     0,     0,   263,
       0,     0,   264,   265,     0,     0,   266,     0,   682,   267,
     268,     0,     0,     0,     0,     0,   683,   270,     0,   271,
       0,   272,     0,   273,   274,     0,     0,   684,     0,     0,
       0,     0,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,     0,   288,   289,   290,   685,
     291,   292,   293,   294,   686,   295,   296,     0,     0,     0,
       0,   297,   298,   299,   300,   687,   302,     0,     0,   688,
     304,   689,   305,     0,   306,   690,   691,   692,   693,   694,
     311,   312,   313,   314,   315,     0,   695,   316,   317,     0,
       0,   318,   319,   320,   321,   696,   697,   698,   322,   323,
       0,   699,   700,     0,   324,   325,   701,     0,   327,   328,
     329,     0,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   332,   333,   702,   334,   335,   336,   337,
     338,   703,   340,   341,   342,   704,   705,   345,   706,     0,
     346,   347,   348,     0,   349,     0,   350,   351,   352,   353,
     354,     0,   707,   356,   357,   358,     0,     0,   359,     0,
       0,     0,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,   368,   369,     0,   370,   371,     0,   372,   373,
     374,   708,   709,   375,     0,   376,     0,   377,   378,     0,
     379,   380,     0,     0,   710,   381,   382,   383,   384,   385,
     711,   387,   388,   389,   390,     0,   712,   392,     0,     0,
       0,   393,   394,   395,   396,     0,     0,     0,   397,     0,
       0,     0,   398,     0,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,     0,     0,     0,     0,     0,     0,
     408,   409,     0,   410,     0,     0,     0,   411,     0,     0,
     412,   413,   414,     0,   713,   714,   415,   416,     0,   417,
     418,   715,   420,   421,   422,   716,   717,   423,   424,   425,
     426,   718,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,   719,   434,   435,     0,   436,   720,   721,   722,
     723,     0,     0,     0,     0,     0,   441,   442,     0,   724,
     725,   726,   444,   445,   446,   727,   447,   448,   728,   449,
     450,     0,   451,   452,     0,     0,   453,     0,     0,   454,
       0,   455,     0,   729,   457,   458,     0,     0,   730,   731,
     732,   733,   459,     0,     0,   460,   734,     0,   735,   461,
     462,   463,   736,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,   468,   469,     0,     0,   737,     0,     0,
       0,   738,   739,     0,     0,     0,     0,   740,   741,     0,
       0,   742,   743,     0,     0,   744,   745,   135,     0,   643,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,     0,   644,     0,   143,   144,   145,   146,   147,   645,
     149,     0,   150,     0,     0,   646,   151,   647,   648,   649,
     152,   650,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,   651,   652,   160,   161,     0,   162,
     163,   653,   654,   165,     0,   166,   167,   168,   169,   170,
     655,   172,     0,   656,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,     0,   185,   186,
     187,   657,   189,     0,   190,   658,   659,   191,     0,     0,
     192,   660,   661,     0,   193,   662,   663,     0,   194,   195,
     196,   664,   665,   666,     0,     0,     0,     0,   667,   199,
     668,     0,     0,   669,   200,     0,   201,     0,     0,     0,
     202,     0,   203,   204,   205,   206,     0,     0,     0,   207,
       0,     0,   208,   209,   210,     0,     0,     0,   211,     0,
     212,   213,     0,   214,   215,   216,     0,     0,   217,   218,
       0,   219,   220,   221,   222,   223,   670,     0,   224,   225,
     226,   671,   672,   227,   228,     0,   229,   230,   231,   673,
       0,   232,     0,     0,     0,   233,     0,   234,     0,   235,
       0,   236,   674,   238,   675,   240,     0,   241,     0,   676,
       0,   242,   243,     0,   244,   677,     0,   245,   246,     0,
       0,     0,   678,   248,   249,   250,   679,     0,   251,   252,
     253,     0,   254,     0,   255,     0,     0,     0,   680,   256,
     257,   681,     0,     0,   258,     0,   259,   260,     0,   261,
     262,     0,     0,     0,   263,     0,     0,   264,   265,     0,
       0,   266,     0,   682,   267,   268,     0,     0,     0,     0,
       0,   683,   270,     0,   271,     0,   272,     0,   273,   274,
       0,     0,   684,     0,     0,     0,     0,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
       0,   288,   289,   290,   685,   291,   292,   293,   294,   686,
     295,   296,     0,     0,     0,     0,   297,   298,   299,   300,
     687,   302,     0,     0,   688,   304,   689,   305,     0,   306,
     690,   691,   692,   693,   694,   311,   312,   313,   314,   315,
       0,   695,   316,   317,     0,     0,   318,   319,   320,   321,
     696,   697,   698,   322,   323,     0,   699,   700,     0,   324,
     325,   701,     0,   327,   328,   329,     0,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,   332,   333,
     702,   334,   335,   336,   337,   338,   703,   340,   341,   342,
     704,   705,   345,   706,     0,   346,   347,   348,     0,   349,
       0,   350,   351,   352,   353,   354,     0,   707,   356,   357,
     358,     0,     0,   359,     0,     0,     0,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   372,   373,   374,   708,   709,   375,     0,
     376,     0,   377,   378,     0,   379,   380,     0,     0,   710,
     381,   382,   383,   384,   385,   711,   387,   388,   389,   390,
       0,   712,   392,     0,     0,     0,   393,   394,   395,   396,
       0,     0,     0,   397,     0,     0,     0,   398,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,     0,
       0,     0,     0,     0,     0,   408,   409,     0,   410,     0,
       0,     0,   411,     0,     0,   412,   413,   414,     0,   713,
     714,   415,   416,     0,   417,   418,   715,   420,   421,   422,
     716,   717,   423,   424,   425,   426,   718,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   719,   434,   435,
       0,   436,   720,   721,   722,   723,     0,     0,     0,     0,
       0,   441,   442,     0,   724,   725,   726,   444,   445,   446,
     727,   447,   448,   728,   449,   450,     0,   451,   452,     0,
       0,   453,     0,     0,   454,     0,   455,     0,   729,   457,
     458,     0,     0,   730,   731,   732,   733,   459,     0,     0,
     460,   734,     0,   735,   461,   462,   463,   736,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,   468,   469,
       0,     0,   737,     0,     0,     0,   738,   739,     0,     0,
       0,     0,   740,   741,     0,     0,   742,   743,     0,     0,
     744,   745,   135,     0,   643,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,     0,   644,     0,   143,
     144,   145,   146,   147,   645,   149,     0,   150,     0,     0,
     646,   151,   647,   648,   649,   152,   650,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,   651,
     652,   160,   161,     0,   162,   163,   653,   654,   165,     0,
     166,   167,   168,   169,   170,   655,   172,     0,   656,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,     0,   185,   186,   187,   657,   189,     0,   190,
     658,   659,   191,     0,     0,   192,   660,   661,     0,   193,
     662,   663,     0,   194,   195,   196,   664,   665,   666,     0,
       0,     0,     0,   667,   199,   668,     0,     0,   669,   200,
       0,   201,     0,     0,     0,   202,     0,   203,   204,   205,
     206,     0,     0,     0,   207,     0,     0,   208,   209,   210,
       0,     0,     0,   211,     0,   212,   213,     0,   214,   215,
     216,     0,     0,   217,   218,     0,   219,   220,   221,   222,
     223,   670,     0,   224,   225,   226,   671,   672,   227,   228,
       0,   229,   230,   231,   673,     0,   232,     0,     0,     0,
     233,     0,   234,     0,   235,     0,   236,   674,   238,   675,
     240,     0,   241,     0,   676,     0,   242,   243,     0,   244,
     677,     0,   245,   246,     0,     0,     0,   678,   248,   249,
     250,   679,     0,   251,   252,   253,     0,   254,     0,   255,
       0,     0,     0,   680,   256,   257,   681,     0,     0,   258,
       0,   259,   260,     0,   261,   262,     0,     0,     0,   263,
       0,     0,   264,   265,     0,     0,   266,     0,   682,   267,
     268,     0,     0,     0,     0,     0,   683,   270,     0,   271,
       0,   272,     0,   273,   274,     0,     0,   684,     0,     0,
       0,     0,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,     0,   288,   289,   290,   685,
     291,   292,   293,   294,   686,   295,   296,     0,     0,     0,
       0,   297,   298,   299,   300,   687,   302,     0,     0,   688,
     304,   689,   305,     0,   306,   690,   691,   692,   693,   694,
     311,   312,   313,   314,   315,     0,   695,   316,   317,     0,
       0,   318,   319,   320,   321,   696,   697,   698,   322,   323,
       0,   699,   700,     0,   324,   325,   701,     0,   327,   328,
     329,     0,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   332,   333,   702,   334,   335,   336,   337,
     338,   703,   340,   341,   342,   704,   705,   345,   706,     0,
     346,   347,   348,     0,   349,     0,   350,   351,   352,   353,
     354,     0,   707,   356,   357,   358,     0,     0,   359,     0,
       0,     0,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,   368,   369,     0,   370,   371,     0,   372,   373,
     374,   708,   709,   375,     0,   376,     0,   377,   378,     0,
     379,   380,     0,     0,   710,   381,   382,   383,   384,   385,
     711,   387,   388,   389,   390,     0,   712,   392,     0,     0,
       0,   393,   394,   395,   396,     0,     0,     0,   397,     0,
       0,     0,   398,     0,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,     0,     0,     0,     0,     0,     0,
     408,   409,     0,   410,     0,     0,     0,   411,     0,     0,
     412,   413,   414,     0,   713,   714,   415,   416,     0,   417,
     418,   715,   420,   421,   422,   716,   717,   423,   424,   425,
     426,   718,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,   719,   434,   435,     0,   436,   720,   721,   722,
     723,     0,     0,     0,     0,     0,   441,   442,     0,   724,
     725,   726,   444,   445,   446,   727,   447,   448,   728,   449,
     450,     0,   451,   452,     0,     0,   453,     0,     0,   454,
       0,   455,     0,   729,   457,   458,     0,     0,   730,   731,
     732,   733,   459,     0,     0,   460,   734,     0,   735,   461,
     462,   463,   736,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,   468,   469,     0,     0,   737,     0,     0,
       0,   738,   739,     0,     0,     0,     0,   740,  1077,     0,
       0,   742,   743,     0,     0,   744,   745,   135,     0,   643,
     137,   138,   139,   140,  1651,     0,     0,     0,     0,  1652,
       0,     0,   644,     0,   143,   144,   145,   146,   147,   645,
     149,     0,   150,     0,     0,   646,   151,   647,   648,   649,
     152,   650,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,   651,   652,   160,   161,     0,   162,
     163,   653,   654,   165,     0,   166,   167,   168,   169,   170,
     655,   172,     0,   656,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,     0,   185,   186,
     187,   657,   189,     0,   190,   658,   659,   191,     0,     0,
     192,   660,   661,     0,   193,   662,   663,     0,   194,   195,
     196,   664,   665,   666,     0,     0,     0,     0,   667,   199,
     668,     0,     0,   669,   200,     0,   201,     0,     0,     0,
     202,     0,   203,   204,   205,   206,     0,     0,     0,   207,
       0,     0,   208,   209,   210,     0,     0,     0,   211,     0,
     212,   213,     0,   214,   215,   216,     0,     0,   217,   218,
       0,   219,   220,   221,   222,   223,   670,     0,   224,   225,
     226,   671,   672,   227,   228,     0,   229,   230,   231,   673,
       0,   232,     0,     0,     0,   233,     0,   234,     0,   235,
       0,   236,   674,   238,   675,   240,     0,   241,     0,   676,
       0,   242,   243,     0,   244,   677,     0,   245,   246,     0,
       0,     0,   678,   248,   249,   250,   679,     0,   251,   252,
     253,     0,   254,     0,   255,     0,     0,     0,   680,   256,
     257,   681,     0,     0,   258,     0,   259,   260,     0,   261,
     262,     0,     0,     0,   263,     0,     0,   264,   265,     0,
       0,   266,     0,   682,   267,   268,     0,     0,     0,     0,
       0,   683,   270,     0,   271,     0,   272,     0,   273,   274,
       0,     0,   684,     0,     0,     0,     0,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
       0,   288,   289,   290,   685,   291,   292,   293,   294,   686,
     295,   296,     0,     0,     0,     0,   297,   298,   299,   300,
     687,   302,     0,     0,   688,   304,   689,   305,     0,   306,
     690,   691,   692,   693,   694,   311,   312,   313,   314,   315,
       0,   695,   316,   317,     0,     0,   318,   319,   320,   321,
     696,     0,   698,   322,   323,     0,   699,   700,     0,   324,
     325,   701,     0,   327,   328,   329,     0,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,   332,   333,
     702,   334,   335,   336,   337,   338,   703,   340,   341,   342,
     704,   705,   345,   706,     0,   346,   347,   348,     0,   349,
       0,   350,   351,   352,   353,   354,     0,   707,   356,   357,
     358,     0,     0,   359,     0,     0,     0,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   372,   373,   374,   708,   709,   375,     0,
     376,     0,   377,   378,     0,   379,   380,     0,     0,   710,
     381,   382,   383,   384,   385,   711,   387,   388,   389,   390,
       0,   712,   392,     0,     0,     0,   393,   394,   395,   396,
       0,     0,     0,   397,     0,     0,     0,   398,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,     0,
       0,     0,     0,     0,     0,   408,   409,     0,   410,     0,
       0,     0,   411,     0,     0,   412,   413,   414,     0,   713,
     714,   415,   416,     0,   417,   418,   715,   420,   421,   422,
     716,   717,   423,   424,   425,   426,   718,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   719,   434,   435,
       0,   436,   720,   721,   722,   723,     0,     0,     0,     0,
       0,   441,   442,     0,   724,   725,   726,   444,   445,   446,
     727,   447,   448,   728,   449,   450,     0,   451,   452,     0,
       0,   453,     0,     0,   454,     0,   455,     0,   729,   457,
     458,     0,     0,   730,   731,   732,   733,   459,     0,     0,
     460,   734,     0,   735,   461,   462,   463,   736,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,   468,   469,
       0,     0,   737,     0,     0,     0,   738,   739,     0,     0,
       0,     0,   740,   741,     0,     0,   742,   743,     0,     0,
     744,   745,   135,     0,   643,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,     0,   644,     0,   143,
     144,   145,   146,   147,   645,   149,     0,   150,     0,     0,
     646,   151,   647,   648,   649,   152,   650,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,   651,
     652,   160,   161,     0,   162,   163,   653,   654,   165,     0,
     166,   167,   168,   169,   170,   655,   172,     0,   656,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,     0,   185,   186,   187,   657,   189,     0,   190,
     658,   659,   191,     0,     0,   192,   660,   661,     0,   193,
     662,   663,     0,   194,   195,   196,   664,   665,   666,     0,
       0,     0,     0,   667,   199,   668,     0,     0,   669,   200,
       0,   201,     0,     0,     0,   202,     0,   203,   204,   205,
     206,     0,     0,     0,   207,     0,     0,   208,   209,   210,
       0,     0,     0,   211,     0,   212,   213,     0,   214,   215,
     216,     0,     0,   217,   218,     0,   219,   220,   221,   222,
     223,   670,     0,   224,   225,   226,   671,   672,   227,   228,
       0,   229,   230,   231,   673,     0,   232,     0,     0,     0,
     233,     0,   234,     0,   235,     0,   236,   674,   238,   675,
     240,     0,   241,     0,   676,     0,   242,   243,     0,   244,
     677,     0,   245,   246,     0,     0,     0,   678,   248,   249,
     250,   679,     0,   251,   252,   253,     0,   254,     0,   255,
       0,     0,     0,   680,   256,   257,  2539,     0,     0,   258,
       0,   259,   260,     0,   261,   262,     0,     0,     0,   263,
       0,     0,   264,   265,     0,     0,   266,     0,   682,   267,
     268,     0,     0,     0,     0,     0,   683,   270,     0,   271,
       0,   272,     0,   273,   274,     0,     0,   684,     0,     0,
       0,     0,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,     0,   288,   289,   290,   685,
     291,   292,   293,   294,   686,   295,   296,     0,     0,     0,
       0,   297,   298,   299,   300,   687,   302,     0,     0,   688,
     304,   689,   305,     0,   306,   690,   691,   692,   693,   694,
     311,   312,   313,   314,   315,     0,   695,   316,   317,     0,
       0,   318,   319,   320,   321,   696,   697,   698,   322,   323,
       0,   699,   700,     0,   324,   325,   701,     0,   327,   328,
     329,     0,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   332,   333,   702,   334,   335,   336,   337,
     338,   703,   340,   341,   342,   704,   705,   345,   706,     0,
     346,   347,   348,     0,   349,     0,   350,   351,   352,   353,
     354,     0,   707,   356,   357,   358,     0,     0,   359,     0,
       0,     0,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,   368,   369,     0,   370,   371,     0,   372,   373,
     374,   708,   709,   375,     0,   376,     0,   377,   378,     0,
     379,   380,     0,     0,   710,   381,   382,   383,   384,   385,
     711,   387,   388,   389,   390,     0,   712,   392,     0,     0,
       0,   393,   394,   395,   396,     0,     0,     0,   397,     0,
       0,     0,   398,     0,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,     0,     0,     0,     0,     0,     0,
     408,   409,     0,   410,     0,     0,     0,   411,     0,     0,
     412,   413,   414,     0,   713,   714,   415,   416,     0,   417,
     418,   715,   420,   421,   422,   716,   717,   423,   424,   425,
     426,   718,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,   719,   434,   435,     0,   436,   720,   721,   722,
     723,     0,     0,     0,     0,     0,   441,   442,     0,   724,
     725,   726,   444,   445,   446,   727,   447,   448,   728,   449,
     450,     0,   451,   452,     0,     0,   453,     0,     0,   454,
       0,   455,     0,   729,   457,   458,     0,     0,   730,   731,
     732,   733,   459,     0,     0,   460,   734,     0,   735,   461,
     462,   463,   736,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,   468,   469,     0,     0,   737,     0,     0,
       0,   738,   739,     0,     0,     0,     0,   740,   741,     0,
       0,   742,   743,     0,     0,   744,   745,   135,     0,   643,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,     0,   644,     0,   143,   144,   145,   146,   147,   645,
     149,     0,   150,     0,     0,   646,   151,   647,   648,   649,
     152,   650,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,   651,   652,   160,   161,     0,   162,
     163,   653,   654,   165,     0,   166,   167,   168,   169,   170,
     655,   172,     0,   656,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,     0,   185,   186,
     187,   657,   189,     0,   190,   658,   659,   191,     0,     0,
     192,   660,   661,     0,   193,   662,   663,     0,   194,   195,
     196,   664,   665,   666,     0,     0,     0,     0,   667,   199,
     668,     0,     0,   669,   200,     0,   201,     0,     0,     0,
     202,     0,   203,   204,   205,   206,     0,     0,     0,   207,
       0,     0,   208,   209,   210,     0,     0,     0,   211,     0,
     212,   213,     0,   214,   215,   216,     0,     0,   217,   218,
       0,   219,   220,   221,   222,   223,   670,     0,   224,   225,
     226,   671,   672,   227,   228,     0,   229,   230,   231,   673,
       0,   232,     0,     0,     0,   233,     0,   234,     0,   235,
       0,   236,   674,   238,   675,   240,     0,   241,     0,   676,
       0,   242,   243,     0,   244,   677,     0,   245,   246,     0,
       0,     0,   678,   248,   249,   250,   679,     0,   251,   252,
     253,     0,   254,     0,   255,     0,     0,     0,   680,   256,
     257,  2585,     0,     0,   258,     0,   259,   260,     0,   261,
     262,     0,     0,     0,   263,     0,     0,   264,   265,     0,
       0,   266,     0,   682,   267,   268,     0,     0,     0,     0,
       0,   683,   270,     0,   271,     0,   272,     0,   273,   274,
       0,     0,   684,     0,     0,     0,     0,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
       0,   288,   289,   290,   685,   291,   292,   293,   294,   686,
     295,   296,     0,     0,     0,     0,   297,   298,   299,   300,
     687,   302,     0,     0,   688,   304,   689,   305,     0,   306,
     690,   691,   692,   693,   694,   311,   312,   313,   314,   315,
       0,   695,   316,   317,     0,     0,   318,   319,   320,   321,
     696,   697,   698,   322,   323,     0,   699,   700,     0,   324,
     325,   701,     0,   327,   328,   329,     0,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,   332,   333,
     702,   334,   335,   336,   337,   338,   703,   340,   341,   342,
     704,   705,   345,   706,     0,   346,   347,   348,     0,   349,
       0,   350,   351,   352,   353,   354,     0,   707,   356,   357,
     358,     0,     0,   359,     0,     0,     0,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   372,   373,   374,   708,   709,   375,     0,
     376,     0,   377,   378,     0,   379,   380,     0,     0,   710,
     381,   382,   383,   384,   385,   711,   387,   388,   389,   390,
       0,   712,   392,     0,     0,     0,   393,   394,   395,   396,
       0,     0,     0,   397,     0,     0,     0,   398,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,     0,
       0,     0,     0,     0,     0,   408,   409,     0,   410,     0,
       0,     0,   411,     0,     0,   412,   413,   414,     0,   713,
     714,   415,   416,     0,   417,   418,   715,   420,   421,   422,
     716,   717,   423,   424,   425,   426,   718,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   719,   434,   435,
       0,   436,   720,   721,   722,   723,     0,     0,     0,     0,
       0,   441,   442,     0,   724,   725,   726,   444,   445,   446,
     727,   447,   448,   728,   449,   450,     0,   451,   452,     0,
       0,   453,     0,     0,   454,     0,   455,     0,   729,   457,
     458,     0,     0,   730,   731,   732,   733,   459,     0,     0,
     460,   734,     0,   735,   461,   462,   463,   736,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,   468,   469,
       0,     0,   737,     0,     0,     0,   738,   739,     0,     0,
       0,     0,   740,   741,     0,     0,   742,   743,     0,     0,
     744,   745,   135,     0,   643,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,     0,   644,     0,   143,
     144,   145,   146,   147,   645,   149,     0,   150,     0,     0,
     646,   151,   647,   648,   649,   152,   650,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,   651,
     652,   160,   161,     0,   162,   163,   653,   654,   165,     0,
     166,   167,   168,   169,   170,   655,   172,     0,   656,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,     0,   185,   186,   187,   657,   189,     0,   190,
     658,   659,   191,     0,     0,   192,   660,   661,     0,   193,
     662,   663,     0,   194,   195,   196,   664,   665,   666,     0,
       0,     0,     0,   667,   199,   668,     0,     0,  3290,   200,
       0,   201,     0,     0,     0,   202,     0,   203,   204,   205,
     206,     0,     0,     0,   207,     0,     0,   208,   209,   210,
       0,     0,     0,   211,     0,   212,   213,     0,   214,   215,
     216,     0,     0,   217,   218,     0,   219,   220,   221,   222,
     223,   670,     0,   224,   225,   226,   671,   672,   227,   228,
       0,   229,   230,   231,   673,     0,   232,     0,     0,     0,
     233,     0,   234,     0,   235,     0,   236,   674,   238,   675,
     240,     0,   241,     0,   676,     0,   242,   243,     0,   244,
     677,     0,   245,   246,     0,     0,     0,   678,   248,   249,
     250,   679,     0,   251,   252,   253,     0,   254,     0,   255,
       0,     0,     0,   680,   256,   257,   681,     0,     0,   258,
       0,   259,   260,     0,   261,   262,     0,     0,     0,   263,
       0,     0,   264,   265,     0,     0,   266,     0,   682,   267,
     268,     0,     0,     0,     0,     0,   683,   270,     0,   271,
       0,   272,     0,   273,   274,     0,     0,   684,     0,     0,
       0,     0,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,     0,   288,   289,   290,   685,
     291,   292,   293,   294,   686,   295,   296,     0,     0,     0,
       0,   297,   298,   299,   300,   687,   302,     0,     0,   688,
     304,   689,   305,     0,   306,   690,   691,   692,   693,   694,
     311,   312,   313,   314,   315,     0,   695,   316,   317,     0,
       0,   318,   319,   320,   321,   696,   697,   698,   322,   323,
       0,   699,   700,     0,   324,   325,   701,     0,   327,   328,
     329,     0,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   332,   333,   702,   334,   335,   336,   337,
     338,   703,   340,   341,   342,   704,   705,   345,   706,     0,
     346,   347,   348,     0,   349,     0,   350,   351,   352,   353,
     354,     0,   707,   356,   357,   358,     0,     0,   359,     0,
       0,     0,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,   368,   369,     0,   370,   371,     0,   372,   373,
     374,   708,   709,   375,     0,   376,     0,   377,   378,     0,
     379,   380,     0,     0,   710,   381,   382,   383,   384,   385,
     711,   387,   388,   389,   390,     0,   712,   392,     0,     0,
       0,   393,   394,   395,   396,     0,     0,     0,   397,     0,
       0,     0,   398,     0,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,     0,     0,     0,     0,     0,     0,
     408,   409,     0,   410,     0,     0,     0,   411,     0,     0,
     412,   413,   414,     0,   713,   714,   415,   416,     0,   417,
     418,   715,   420,   421,   422,   716,   717,   423,   424,   425,
     426,   718,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,   719,   434,   435,     0,   436,   720,   721,   722,
     723,     0,     0,     0,     0,     0,   441,   442,     0,   724,
     725,   726,   444,   445,   446,   727,   447,   448,   728,   449,
     450,     0,   451,   452,     0,     0,   453,     0,     0,   454,
       0,   455,     0,   729,   457,   458,     0,     0,   730,   731,
     732,   733,   459,     0,     0,   460,   734,     0,   735,   461,
     462,   463,   736,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,   468,   469,     0,     0,   737,     0,     0,
       0,   738,   739,     0,     0,     0,     0,   740,   741,     0,
       0,   742,   743,     0,     0,   744,   745,   135,     0,   643,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,     0,   644,     0,   143,   144,   145,   146,   147,   645,
     149,     0,   150,     0,     0,   646,   151,   647,   648,   649,
     152,   650,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,   651,   652,   160,   161,     0,   162,
     163,   653,   654,   165,     0,   166,   167,   168,   169,   170,
     655,   172,     0,   656,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,     0,   185,   186,
     187,   657,   189,     0,   190,   658,   659,   191,     0,     0,
     192,   660,   661,     0,   193,   662,   663,     0,   194,   195,
     196,   664,   665,   666,     0,     0,     0,     0,   667,   199,
     668,     0,     0,   669,   200,     0,   201,     0,     0,     0,
     202,     0,   203,   204,   205,   206,     0,     0,     0,   207,
       0,     0,   208,   209,   210,     0,     0,     0,   211,     0,
     212,   213,     0,   214,   215,   216,     0,     0,   217,   218,
       0,   219,   220,   221,   222,   223,   670,     0,   224,   225,
     226,   671,   672,   227,   228,     0,   229,   230,   231,   673,
       0,   232,     0,     0,     0,   233,     0,   234,     0,   235,
       0,   236,   674,   238,   675,   240,     0,   241,     0,   676,
       0,   242,   243,     0,   244,   677,     0,   245,   246,     0,
       0,     0,   678,   248,   249,   250,   679,     0,   251,   252,
     253,     0,   254,     0,   255,     0,     0,     0,   680,   256,
     257,   681,     0,     0,   258,     0,   259,   260,     0,   261,
     262,     0,     0,     0,   263,     0,     0,   264,   265,     0,
       0,   266,     0,   682,   267,   268,     0,     0,     0,     0,
       0,   683,   270,     0,   271,     0,   272,     0,   273,   274,
       0,     0,   684,     0,     0,     0,     0,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
       0,   288,   289,   290,   685,   291,   292,   293,   294,   686,
     295,   296,  4116,     0,     0,     0,   297,   298,   299,   300,
     687,   302,     0,     0,   688,   304,   689,   305,     0,   306,
     690,   691,   692,   693,   694,   311,   312,   313,   314,   315,
       0,   695,   316,   317,     0,     0,   318,   319,   320,   321,
     696,     0,   698,   322,   323,     0,   699,   700,     0,   324,
     325,   701,     0,   327,   328,   329,     0,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,   332,   333,
     702,   334,   335,   336,   337,   338,   703,   340,   341,   342,
     704,   705,   345,   706,     0,   346,   347,   348,     0,   349,
       0,   350,   351,   352,   353,   354,     0,   707,   356,   357,
     358,     0,     0,   359,     0,     0,     0,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   372,   373,   374,   708,   709,   375,     0,
     376,     0,   377,   378,     0,   379,   380,     0,     0,   710,
     381,   382,   383,   384,   385,   711,   387,   388,   389,   390,
       0,   712,   392,     0,     0,     0,   393,   394,   395,   396,
       0,     0,     0,   397,     0,     0,     0,   398,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,     0,
       0,     0,     0,     0,     0,   408,   409,     0,   410,     0,
       0,     0,   411,     0,     0,   412,   413,   414,     0,   713,
     714,   415,   416,     0,   417,   418,   715,   420,   421,   422,
     716,   717,   423,   424,   425,   426,   718,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   719,   434,   435,
       0,   436,   720,   721,   722,   723,     0,     0,     0,     0,
       0,   441,   442,     0,   724,   725,   726,   444,   445,   446,
     727,   447,   448,   728,   449,   450,     0,   451,   452,     0,
       0,   453,     0,     0,   454,     0,   455,     0,   729,   457,
     458,     0,     0,   730,   731,   732,   733,   459,     0,     0,
     460,   734,     0,   735,   461,   462,   463,   736,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,   468,   469,
       0,     0,   737,     0,     0,     0,   738,   739,     0,     0,
       0,     0,   740,   741,     0,     0,   742,   743,     0,     0,
     744,   745,   135,     0,   643,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,     0,   644,     0,   143,
     144,   145,   146,   147,   645,   149,     0,   150,     0,     0,
     646,   151,   647,   648,   649,   152,   650,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,   651,
     652,   160,   161,     0,   162,   163,   653,   654,   165,     0,
     166,   167,   168,   169,   170,   655,   172,     0,   656,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,     0,   185,   186,   187,   657,   189,     0,   190,
     658,   659,   191,     0,     0,   192,   660,   661,     0,   193,
     662,   663,     0,   194,   195,   196,   664,   665,   666,     0,
       0,     0,     0,   667,   199,   668,     0,     0,   669,   200,
       0,   201,     0,     0,     0,   202,     0,   203,   204,   205,
     206,     0,     0,     0,   207,     0,     0,   208,   209,   210,
       0,     0,     0,   211,     0,   212,   213,     0,   214,   215,
     216,     0,     0,   217,   218,     0,   219,   220,   221,   222,
     223,   670,     0,   224,   225,   226,   671,   672,   227,   228,
       0,   229,   230,   231,   673,     0,   232,     0,     0,     0,
     233,     0,   234,     0,   235,     0,   236,   674,   238,   675,
     240,     0,   241,     0,   676,     0,   242,   243,     0,   244,
     677,     0,   245,   246,     0,     0,     0,   678,   248,   249,
     250,   679,     0,   251,   252,   253,     0,   254,     0,   255,
       0,     0,     0,   680,   256,   257,   681,     0,     0,   258,
       0,   259,   260,     0,   261,   262,     0,     0,     0,   263,
       0,     0,   264,   265,     0,     0,   266,     0,   682,   267,
     268,     0,     0,     0,     0,     0,   683,   270,     0,   271,
       0,   272,     0,   273,   274,     0,     0,   684,     0,     0,
       0,     0,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,     0,   288,   289,   290,   685,
     291,   292,   293,   294,   686,   295,   296,     0,     0,     0,
       0,   297,   298,   299,   300,   687,   302,     0,     0,   688,
     304,   689,   305,     0,   306,   690,   691,   692,   693,   694,
     311,   312,   313,   314,   315,     0,   695,   316,   317,     0,
       0,   318,   319,   320,   321,   696,     0,   698,   322,   323,
       0,   699,   700,     0,   324,   325,   701,     0,   327,   328,
     329,     0,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   332,   333,   702,   334,   335,   336,   337,
     338,   703,   340,   341,   342,   704,   705,   345,   706,     0,
     346,   347,   348,     0,   349,     0,   350,   351,   352,   353,
     354,     0,   707,   356,   357,   358,     0,     0,   359,     0,
       0,     0,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,   368,   369,     0,   370,   371,     0,   372,   373,
     374,   708,   709,   375,     0,   376,     0,   377,   378,     0,
     379,   380,     0,     0,   710,   381,   382,   383,   384,   385,
     711,   387,   388,   389,   390,     0,   712,   392,     0,     0,
       0,   393,   394,   395,   396,     0,     0,     0,   397,     0,
       0,     0,   398,     0,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,     0,     0,     0,     0,     0,     0,
     408,   409,     0,   410,     0,     0,     0,   411,     0,     0,
     412,   413,   414,     0,   713,   714,   415,   416,     0,   417,
     418,   715,   420,   421,   422,   716,   717,   423,   424,   425,
     426,   718,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,   719,   434,   435,     0,   436,   720,   721,   722,
     723,     0,     0,     0,     0,     0,   441,   442,     0,   724,
     725,   726,   444,   445,   446,   727,   447,   448,   728,   449,
     450,     0,   451,   452,     0,     0,   453,     0,     0,   454,
       0,   455,     0,   729,   457,   458,     0,     0,   730,   731,
     732,   733,   459,     0,     0,   460,   734,     0,   735,   461,
     462,   463,   736,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,   468,   469,     0,     0,   737,     0,     0,
       0,   738,   739,     0,     0,     0,     0,   740,   741,     0,
       0,   742,   743,     0,     0,   744,   745,   135,     0,   643,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,     0,   644,     0,   143,   144,   145,   146,   147,   645,
     149,     0,   150,     0,     0,   646,   151,   647,   648,   649,
     152,   650,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,   651,   652,   160,   161,     0,   162,
     163,   653,   654,   165,     0,   166,   167,   168,   169,   170,
     655,   172,     0,   656,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,     0,   185,   186,
     187,   657,   189,     0,   190,   658,   659,   191,     0,     0,
     192,   660,   661,     0,   193,   662,   663,     0,   194,   195,
     196,   664,   665,   666,     0,     0,     0,     0,   667,   199,
     668,     0,     0,   669,   200,     0,   201,     0,     0,     0,
     202,     0,   203,   204,   205,   206,     0,     0,     0,   207,
       0,     0,   208,   209,   210,     0,     0,     0,   211,     0,
     212,   213,     0,   214,   215,   216,     0,     0,   217,   218,
       0,   219,   220,   221,   222,   223,   670,     0,   224,   225,
     226,   671,   672,   227,   228,     0,   229,   230,   231,   673,
       0,   232,     0,     0,     0,   233,     0,   234,     0,   235,
       0,   236,   674,   238,   675,   240,     0,   241,     0,   676,
       0,   242,   243,     0,   244,   677,     0,   245,   246,     0,
       0,     0,   678,   248,   249,   250,   679,     0,   251,   252,
     253,     0,   254,     0,   255,     0,     0,     0,   680,   256,
     257,  1666,     0,     0,   258,     0,   259,   260,     0,   261,
     262,     0,     0,     0,   263,     0,     0,   264,   265,     0,
       0,   266,     0,   682,   267,   268,     0,     0,     0,     0,
       0,   683,   270,     0,   271,     0,   272,     0,   273,   274,
       0,     0,   684,     0,     0,     0,     0,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
       0,   288,   289,   290,   685,   291,   292,   293,   294,   686,
     295,   296,     0,     0,     0,     0,   297,   298,   299,   300,
     687,   302,     0,     0,   688,   304,   689,   305,     0,   306,
     690,   691,   692,   693,   694,   311,   312,   313,   314,   315,
       0,   695,   316,   317,     0,     0,   318,   319,   320,   321,
     696,     0,   698,   322,   323,     0,   699,   700,     0,   324,
     325,   701,     0,   327,   328,   329,     0,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,   332,   333,
     702,   334,   335,   336,   337,   338,   703,   340,   341,   342,
     704,   705,   345,   706,     0,   346,   347,   348,     0,   349,
       0,   350,   351,   352,   353,   354,     0,   707,   356,   357,
     358,     0,     0,   359,     0,     0,     0,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   372,   373,   374,   708,   709,   375,     0,
     376,     0,   377,   378,     0,   379,   380,     0,     0,   710,
     381,   382,   383,   384,   385,   711,   387,   388,   389,   390,
       0,   712,   392,     0,     0,     0,   393,   394,   395,   396,
       0,     0,     0,   397,     0,     0,     0,   398,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,     0,
       0,     0,     0,     0,     0,   408,   409,     0,   410,     0,
       0,     0,   411,     0,     0,   412,   413,   414,     0,   713,
     714,   415,   416,     0,   417,   418,   715,   420,   421,   422,
     716,   717,   423,   424,   425,   426,   718,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   719,   434,   435,
       0,   436,   720,   721,   722,   723,     0,     0,     0,     0,
       0,   441,   442,     0,   724,   725,   726,   444,   445,   446,
     727,   447,   448,   728,   449,   450,     0,   451,   452,     0,
       0,   453,     0,     0,   454,     0,   455,     0,   729,   457,
     458,     0,     0,   730,   731,   732,   733,   459,     0,     0,
     460,   734,     0,   735,   461,   462,   463,   736,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,   468,   469,
       0,     0,   737,     0,     0,     0,   738,   739,     0,     0,
       0,     0,   740,   741,     0,     0,   742,   743,     0,     0,
     744,   745,   135,     0,   643,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,     0,   644,     0,   143,
     144,   145,   146,   147,   645,   149,     0,   150,     0,     0,
     646,   151,   647,   648,   649,   152,   650,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,   651,
     652,   160,   161,     0,   162,   163,   653,   654,   165,     0,
     166,   167,   168,   169,   170,   655,   172,     0,   656,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,     0,   185,   186,   187,   657,   189,     0,   190,
     658,   659,   191,     0,     0,   192,   660,   661,     0,   193,
     662,   663,     0,   194,   195,   196,   664,   665,   666,     0,
       0,     0,     0,   667,   199,   668,     0,     0,   669,   200,
       0,   201,     0,     0,     0,   202,     0,   203,   204,   205,
     206,     0,     0,     0,   207,     0,     0,   208,   209,   210,
       0,     0,     0,   211,     0,   212,   213,     0,   214,   215,
     216,     0,     0,   217,   218,     0,   219,   220,   221,   222,
     223,   670,     0,   224,   225,   226,   671,   672,   227,   228,
       0,   229,   230,   231,   673,     0,   232,     0,     0,     0,
     233,     0,   234,     0,   235,     0,   236,   674,   238,   675,
     240,     0,   241,     0,   676,     0,   242,   243,     0,   244,
     677,     0,   245,   246,     0,     0,     0,   678,   248,   249,
     250,   679,     0,   251,   252,   253,     0,   254,     0,   255,
       0,     0,     0,   680,   256,   257,  1668,     0,     0,   258,
       0,   259,   260,     0,   261,   262,     0,     0,     0,   263,
       0,     0,   264,   265,     0,     0,   266,     0,   682,   267,
     268,     0,     0,     0,     0,     0,   683,   270,     0,   271,
       0,   272,     0,   273,   274,     0,     0,   684,     0,     0,
       0,     0,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,     0,   288,   289,   290,   685,
     291,   292,   293,   294,   686,   295,   296,     0,     0,     0,
       0,   297,   298,   299,   300,   687,   302,     0,     0,   688,
     304,   689,   305,     0,   306,   690,   691,   692,   693,   694,
     311,   312,   313,   314,   315,     0,   695,   316,   317,     0,
       0,   318,   319,   320,   321,   696,     0,   698,   322,   323,
       0,   699,   700,     0,   324,   325,   701,     0,   327,   328,
     329,     0,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   332,   333,   702,   334,   335,   336,   337,
     338,   703,   340,   341,   342,   704,   705,   345,   706,     0,
     346,   347,   348,     0,   349,     0,   350,   351,   352,   353,
     354,     0,   707,   356,   357,   358,     0,     0,   359,     0,
       0,     0,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,   368,   369,     0,   370,   371,     0,   372,   373,
     374,   708,   709,   375,     0,   376,     0,   377,   378,     0,
     379,   380,     0,     0,   710,   381,   382,   383,   384,   385,
     711,   387,   388,   389,   390,     0,   712,   392,     0,     0,
       0,   393,   394,   395,   396,     0,     0,     0,   397,     0,
       0,     0,   398,     0,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,     0,     0,     0,     0,     0,     0,
     408,   409,     0,   410,     0,     0,     0,   411,     0,     0,
     412,   413,   414,     0,   713,   714,   415,   416,     0,   417,
     418,   715,   420,   421,   422,   716,   717,   423,   424,   425,
     426,   718,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,   719,   434,   435,     0,   436,   720,   721,   722,
     723,     0,     0,     0,     0,     0,   441,   442,     0,   724,
     725,   726,   444,   445,   446,   727,   447,   448,   728,   449,
     450,     0,   451,   452,     0,     0,   453,     0,     0,   454,
       0,   455,     0,   729,   457,   458,     0,     0,   730,   731,
     732,   733,   459,     0,     0,   460,   734,     0,   735,   461,
     462,   463,   736,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,   468,   469,     0,     0,   737,     0,     0,
       0,   738,   739,     0,     0,     0,     0,   740,   741,     0,
       0,   742,   743,     0,     0,   744,   745,   135,     0,   136,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,     0,   142,     0,   143,   144,   145,   146,   147,   148,
     149,     0,   150,     0,     0,     0,   151,   647,     0,     0,
     152,     0,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,     0,     0,   160,   161,     0,   162,
     163,   164,     0,   165,     0,   166,   167,   168,   169,   170,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,     0,   185,   186,
     187,   188,   189,     0,   190,     0,     0,   191,     0,     0,
     192,     0,     0,     0,   193,     0,     0,     0,   194,   195,
     196,     0,     0,  2271,     0,     0,     0,     0,   198,   199,
     668,     0,     0,     0,   200,     0,   201,     0,     0,     0,
     202,     0,   203,   204,   205,   206,     0,     0,     0,   207,
       0,     0,   208,   209,   210,     0,     0,     0,   211,     0,
     212,   213,     0,   214,   215,   216,     0,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,     0,   224,   225,
     226,     0,   672,   227,   228,     0,   229,   230,   231,   673,
       0,   232,     0,     0,     0,   233,     0,   234,     0,   235,
       0,   236,   237,   238,   239,   240,     0,   241,     0,     0,
       0,   242,   243,     0,   244,   677,     0,   245,   246,     0,
       0,     0,   247,   248,   249,   250,     0,     0,   251,   252,
     253,     0,   254,     0,   255,     0,     0,     0,     0,   256,
     257,     0,     0,     0,   258,     0,   259,   260,     0,   261,
     262,     0,     0,     0,   263,     0,     0,   264,   265,     0,
       0,   266,     0,     0,   267,   268,     0,     0,     0,     0,
       0,   269,   270,     0,   271,     0,   272,     0,   273,   274,
       0,     0,   684,     0,     0,     0,     0,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
       0,   288,   289,   290,     0,   291,   292,   293,   294,     0,
     295,   296,     0,     0,     0,     0,   297,   298,   299,   300,
     301,   302,     0,     0,   303,   304,     0,   305,     0,   306,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
       0,   695,   316,   317,     0,     0,   318,   319,   320,   321,
       0,     0,     0,   322,   323,     0,   699,   700,     0,   324,
     325,   326,     0,   327,   328,   329,     0,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,   332,   333,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,   348,     0,   349,
       0,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,     0,     0,   359,     0,     0,     0,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   372,   373,   374,     0,     0,   375,     0,
     376,     0,   377,   378,     0,   379,   380,     0,     0,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,     0,     0,     0,   393,   394,   395,   396,
       0,     0,     0,   397,     0,     0,     0,   398,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,     0,
       0,     0,     0,     0,     0,   408,   409,     0,   410,     0,
       0,     0,   411,     0,     0,   412,   413,   414,     0,     0,
       0,   415,   416,     0,   417,   418,   419,   420,   421,   422,
       0,     0,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   719,   434,   435,
       0,   436,  2272,   438,   439,  2273,     0,     0,     0,     0,
       0,   441,   442,     0,     0,   725,   443,   444,   445,   446,
     727,   447,   448,   728,   449,   450,     0,   451,   452,     0,
       0,   453,     0,     0,   454,     0,   455,     0,   456,   457,
     458,     0,     0,     0,     0,     0,     0,   459,     0,     0,
     460,     0,     0,     0,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,   468,   469,
       0,     0,   470,     0,     0,     0,     0,   135,     0,   136,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
     744,   745,   142,     0,   143,   144,   145,   146,   147,   148,
     149,     0,   150,     0,     0,     0,   151,     0,     0,     0,
     152,     0,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,     0,     0,   160,   161,     0,   162,
     163,   164,     0,   165,     0,   166,   167,   168,   169,   170,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,  2385,   185,   186,
     187,   188,   189,     0,   190,     0,     0,   191,     0,     0,
     192,     0,     0,     0,   193,     0,     0,     0,   194,   195,
     196,     0,     0,   197,     0,     0,     0,     0,   198,   199,
       0,     0,     0,     0,   200,     0,   201,     0,     0,     0,
     202,     0,   203,   204,   205,   206,     0,     0,     0,   207,
       0,     0,   208,   209,   210,     0,     0,     0,   211,     0,
     212,   213,     0,   214,   215,   216,     0,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,   233,     0,   234,   484,   235,
       0,   236,   237,   238,   239,   240,     0,   241,     0,     0,
       0,   242,   243,     0,   244,     0,     0,   245,   246,     0,
       0,     0,   247,   248,   249,   250,     0,     0,   251,   252,
     253,  1975,   254,     0,   255,     0,     0,     0,     0,   256,
     257,     0,     0,     0,   258,     0,   259,   260,     0,   261,
     262,     0,     0,     0,   263,  1976,     0,   264,   265,     0,
       0,   266,     0,     0,   267,   268,     0,  2905,     0,     0,
       0,   269,   270,     0,   271,     0,   272,     0,   273,   274,
       0,     0,     0,     0,     0,     0,     0,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
       0,   288,   289,   290,     0,   291,   292,   293,   294,     0,
     295,   296,     0,     0,     0,     0,   297,   298,   299,   300,
     301,   302,     0,     0,   303,   304,     0,   305,     0,   306,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
       0,     0,   316,   317,     0,     0,   318,   319,   320,   321,
       0,     0,     0,   322,   323,     0,     0,     0,     0,   324,
     325,   326,     0,   327,   328,   329,     0,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,   332,   333,
       0,   334,   335,   336,   337,  2906,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,   348,     0,   349,
       0,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,     0,     0,   359,     0,     0,     0,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   372,   373,   374,     0,     0,   375,     0,
     376,     0,   377,   378,     0,   379,   380,     0,     0,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,  -436,     0,     0,   393,   394,   395,   396,
       0,     0,     0,   397,     0,     0,     0,   398,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,   487,
       0,     0,     0,     0,     0,   408,   409,     0,   410,     0,
       0,     0,   411,     0,     0,   412,   413,   414,     0,     0,
       0,   415,   416,     0,   417,   418,   419,   420,   421,   422,
       0,     0,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,     0,   434,   435,
       0,   436,   437,   438,   439,   440,     0,     0,     0,     0,
       0,   441,   442,     0,     0,     0,   443,   444,   445,   446,
       0,   447,   448,     0,   449,   450,     0,   451,   452,     0,
       0,   453,     0,     0,   454,     0,   455,     0,   456,   457,
     458,     0,     0,     0,     0,     0,     0,   459,     0,     0,
     460,     0,     0,     0,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,   468,   469,
       0,     0,   470,     0,     0,   135,     0,   136,   137,   138,
     139,   140,     0,     0,     0,     0,     0,   141,     0,     0,
     142,  2450,   143,   144,   145,   146,   147,   148,   149,     0,
     150,     0,     0,     0,   151,     0,     0,     0,   152,     0,
       0,   153,   154,   155,     0,   156,     0,   157,   158,     0,
       0,   159,     0,     0,   160,   161,     0,   162,   163,   164,
       0,   165,     0,   166,   167,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,     0,   183,   184,  2385,   185,   186,   187,   188,
     189,     0,   190,     0,     0,   191,     0,     0,   192,     0,
       0,     0,   193,     0,     0,     0,   194,   195,   196,     0,
       0,   197,     0,     0,     0,     0,   198,   199,     0,     0,
       0,     0,   200,     0,   201,     0,     0,     0,   202,     0,
     203,   204,   205,   206,     0,     0,     0,   207,     0,     0,
     208,   209,   210,     0,     0,     0,   211,     0,   212,   213,
       0,   214,   215,   216,     0,     0,   217,   218,     0,   219,
     220,   221,   222,   223,     0,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,     0,     0,   232,
       0,     0,     0,   233,     0,   234,   484,   235,     0,   236,
     237,   238,   239,   240,     0,   241,     0,     0,     0,   242,
     243,     0,   244,     0,     0,   245,   246,     0,     0,     0,
     247,   248,   249,   250,     0,     0,   251,   252,   253,  1975,
     254,     0,   255,     0,     0,     0,     0,   256,   257,     0,
       0,     0,   258,     0,   259,   260,     0,   261,   262,     0,
       0,     0,   263,  1976,     0,   264,   265,     0,     0,   266,
       0,     0,   267,   268,     0,     0,     0,     0,     0,   269,
     270,     0,   271,     0,   272,     0,   273,   274,     0,     0,
       0,     0,     0,     0,     0,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,     0,   288,
     289,   290,     0,   291,   292,   293,   294,     0,   295,   296,
       0,     0,     0,     0,   297,   298,   299,   300,   301,   302,
       0,     0,   303,   304,     0,   305,     0,   306,     0,   307,
     308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     316,   317,     0,     0,   318,   319,   320,   321,     0,     0,
       0,   322,   323,     0,     0,     0,     0,   324,   325,   326,
       0,   327,   328,   329,     0,   330,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   331,   332,   333,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,   347,   348,     0,   349,     0,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,     0,
       0,   359,     0,     0,     0,   360,   361,   362,   363,   364,
       0,     0,   365,   366,   367,   368,   369,     0,   370,   371,
       0,   372,   373,   374,     0,     0,   375,     0,   376,     0,
     377,   378,     0,   379,   380,     0,     0,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,     0,     0,     0,   393,   394,   395,   396,     0,     0,
       0,   397,     0,     0,     0,   398,     0,   399,   400,   401,
     402,     0,   403,   404,   405,   406,   407,   487,     0,     0,
       0,     0,     0,   408,   409,     0,   410,     0,     0,     0,
     411,     0,     0,   412,   413,   414,     0,     0,     0,   415,
     416,     0,   417,   418,   419,   420,   421,   422,     0,     0,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,   433,     0,     0,   434,   435,     0,   436,
     437,   438,   439,   440,     0,     0,     0,     0,     0,   441,
     442,     0,     0,     0,   443,   444,   445,   446,     0,   447,
     448,     0,   449,   450,     0,   451,   452,     0,     0,   453,
       0,     0,   454,     0,   455,     0,   456,   457,   458,     0,
       0,     0,     0,     0,     0,   459,     0,     0,   460,     0,
       0,     0,   461,   462,   463,   464,     0,     0,     0,     0,
       0,     0,   465,   466,     0,   467,   468,   469,     0,     0,
     470,     0,     0,   135,     0,   136,   137,   138,   139,   140,
       0,     0,     0,     0,     0,   141,     0,     0,   142,  2450,
     143,   144,   145,   146,   147,   148,   149,     0,   150,     0,
       0,     0,   151,     0,     0,     0,   152,     0,     0,   153,
     154,   155,     0,   156,     0,   157,   158,     0,     0,   159,
       0,     0,   160,   161,     0,   162,   163,   164,     0,   165,
       0,   166,   167,   168,   169,   170,   171,   172,     0,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   188,   189,     0,
     190,     0,     0,   191,     0,     0,   192,     0,     0,     0,
     193,     0,     0,     0,   194,   195,   196,     0,     0,   197,
       0,     0,     0,     0,   198,   199,     0,     0,     0,     0,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,     0,     0,   232,     0,     0,
       0,   233,     0,   234,     0,   235,     0,   236,   237,   238,
     239,   240,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,     0,   245,   246,     0,     0,     0,   247,   248,
     249,   250,     0,     0,   251,   252,   253,     0,   254,     0,
     255,     0,     0,     0,     0,   256,   257,     0,     0,     0,
     258,     0,   259,   260,     0,   261,   262,     0,     0,     0,
     263,     0,     0,   264,   265,     0,     0,   266,     0,     0,
     267,   268,     0,     0,     0,     0,     0,   269,   270,     0,
     271,     0,   272,     0,   273,   274,     0,     0,     0,     0,
       0,     0,     0,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,     0,   288,   289,   290,
       0,   291,   292,   293,   294,     0,   295,   296,     0,     0,
       0,     0,   297,   298,   299,   300,   301,   302,     0,     0,
     303,   304,     0,   305,     0,   306,     0,   307,   308,   309,
     310,   311,   312,   313,   314,   315,     0,     0,   316,   317,
       0,     0,   318,   319,   320,   321,     0,     0,     0,   322,
     323,     0,     0,     0,     0,   324,   325,   326,     0,   327,
     328,   329,     0,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   331,   332,   333,     0,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,   347,   348,     0,   349,     0,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,     0,     0,   359,
       0,     0,     0,   360,   361,   362,   363,   364,     0,     0,
     365,   366,   367,   368,   369,     0,   370,   371,     0,   372,
     373,   374,     0,     0,   375,     0,   376,     0,   377,   378,
       0,   379,   380,     0,     0,     0,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,  2262,
       0,     0,   393,   394,   395,   396,     0,     0,     0,   397,
       0,     0,     0,   398,     0,   399,   400,   401,   402,     0,
     403,   404,   405,   406,   407,     0,     0,     0,     0,     0,
       0,   408,   409,     0,   410,     0,     0,     0,   411,     0,
       0,   412,   413,   414,     0,     0,     0,   415,   416,     0,
     417,   418,   419,   420,   421,   422,     0,     0,   423,   424,
     425,   426,     0,   427,   428,     0,     0,   429,   430,   431,
     432,   433,     0,     0,   434,   435,     0,   436,   437,   438,
     439,   440,     0,     0,     0,     0,     0,   441,   442,     0,
       0,     0,   443,   444,   445,   446,     0,   447,   448,     0,
     449,   450,     0,   451,   452,     0,     0,   453,     0,     0,
     454,     0,   455,     0,   456,   457,   458,     0,     0,     0,
       0,     0,     0,   459,     0,     0,   460,     0,     0,     0,
     461,   462,   463,   464,     0,     0,     0,     0,     0,     0,
     465,   466,     0,   467,   468,   469,     0,     0,   470,     0,
       0,   135,     0,   136,   137,   138,   139,   140,     0,     0,
    2678,     0,     0,   141,     0,     0,   142,   745,   143,   144,
     145,   146,   147,   148,   149,     0,   150,     0,     0,     0,
     151,     0,     0,     0,   152,     0,     0,   153,   154,   155,
       0,   156,     0,   157,   158,     0,     0,   159,     0,     0,
     160,   161,     0,   162,   163,   164,     0,   165,     0,   166,
     167,   168,   169,   170,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,     0,   185,   186,   187,   188,   189,     0,   190,     0,
       0,   191,     0,     0,   192,     0,     0,     0,   193,     0,
       0,     0,   194,   195,   196,     0,     0,   197,     0,     0,
       0,     0,   198,   199,     0,     0,     0,     0,   200,     0,
     201,     0,     0,     0,   202,     0,   203,   204,   205,   206,
       0,     0,     0,   207,     0,     0,   208,   209,   210,     0,
       0,     0,   211,     0,   212,   213,     0,   214,   215,   216,
       0,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,     0,     0,   232,     0,     0,     0,   233,
       0,   234,     0,   235,     0,   236,   237,   238,   239,   240,
       0,   241,     0,     0,     0,   242,   243,     0,   244,     0,
       0,   245,   246,     0,     0,     0,   247,   248,   249,   250,
       0,     0,   251,   252,   253,     0,   254,     0,   255,     0,
       0,     0,     0,   256,   257,     0,     0,     0,   258,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,     0,   288,   289,   290,     0,   291,
     292,   293,   294,     0,   295,   296,     0,     0,     0,     0,
     297,   298,   299,   300,   301,   302,     0,     0,   303,   304,
       0,   305,     0,   306,     0,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     0,     0,   316,   317,     0,     0,
     318,   319,   320,   321,     0,     0,     0,   322,   323,     0,
       0,     0,     0,   324,   325,   326,     0,   327,   328,   329,
       0,   330,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,   332,   333,     0,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
     347,   348,     0,   349,     0,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,     0,     0,   359,     0,     0,
       0,   360,   361,   362,   363,   364,     0,     0,   365,   366,
     367,   368,   369,     0,   370,   371,     0,   372,   373,   374,
       0,     0,   375,     0,   376,     0,   377,   378,     0,   379,
     380,     0,     0,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,     0,     0,     0,
     393,   394,   395,   396,     0,     0,     0,   397,     0,     0,
       0,   398,     0,   399,   400,   401,   402,     0,   403,   404,
     405,   406,   407,     0,     0,     0,     0,     0,     0,   408,
     409,     0,   410,     0,     0,     0,   411,     0,     0,   412,
     413,   414,     0,     0,     0,   415,   416,     0,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,     0,   434,   435,     0,   436,   437,   438,   439,   440,
       0,     0,     0,     0,     0,   441,   442,     0,     0,     0,
     443,   444,   445,   446,     0,   447,   448,     0,   449,   450,
       0,   451,   452,     0,     0,   453,     0,     0,   454,     0,
     455,     0,   456,   457,   458,     0,     0,     0,     0,     0,
       0,   459,     0,     0,   460,     0,     0,     0,   461,   462,
     463,   464,     0,     0,     0,     0,     0,     0,   465,   466,
       0,   467,   468,   469,     0,     0,   470,     0,     0,     0,
       0,   135,     0,   136,   137,   138,   139,   140,  4246,     0,
       0,     0,     0,   141,  4247,   745,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,   150,     0,     0,     0,
     151,     0,     0,     0,   152,     0,     0,   153,   154,   155,
       0,   156,     0,   157,   158,     0,     0,   159,     0,     0,
     160,   161,     0,   162,   163,   164,     0,   165,     0,   166,
     167,   168,   169,   170,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,     0,   185,   186,   187,   188,   189,     0,   190,     0,
       0,   191,     0,     0,   192,     0,     0,     0,   193,     0,
       0,     0,   194,   195,   196,     0,     0,   197,     0,     0,
       0,     0,   198,   199,     0,     0,     0,     0,   200,     0,
     201,     0,     0,     0,   202,     0,   203,   204,   205,   206,
       0,     0,     0,   207,     0,     0,   208,   209,   210,     0,
       0,     0,   211,     0,   212,   213,     0,   214,   215,   216,
       0,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,     0,     0,   232,     0,     0,     0,   233,
       0,   234,     0,   235,     0,   236,   237,   238,   239,   240,
       0,   241,     0,     0,     0,   242,   243,     0,   244,     0,
       0,   245,   246,     0,     0,     0,   247,   248,   249,   250,
       0,     0,   251,   252,   253,     0,   254,     0,   255,     0,
       0,     0,     0,   256,   257,     0,     0,     0,   258,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,     0,   288,   289,   290,     0,   291,
     292,   293,   294,     0,   295,   296,     0,     0,     0,     0,
     297,   298,   299,   300,   301,   302,     0,     0,   303,   304,
       0,   305,     0,   306,     0,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     0,     0,   316,   317,     0,     0,
     318,   319,   320,   321,     0,     0,     0,   322,   323,     0,
       0,     0,     0,   324,   325,   326,     0,   327,   328,   329,
       0,   330,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,   332,   333,     0,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
     347,   348,     0,   349,     0,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,     0,     0,   359,     0,     0,
       0,   360,   361,   362,   363,   364,     0,     0,   365,   366,
     367,   368,   369,     0,   370,   371,     0,   372,   373,   374,
       0,     0,   375,     0,   376,     0,   377,   378,     0,   379,
     380,     0,     0,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,     0,     0,     0,
     393,   394,   395,   396,     0,     0,     0,   397,     0,     0,
       0,   398,     0,   399,   400,   401,   402,     0,   403,   404,
     405,   406,   407,     0,     0,     0,     0,     0,     0,   408,
     409,     0,   410,     0,     0,     0,   411,     0,     0,   412,
     413,   414,     0,     0,     0,   415,   416,     0,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,     0,   434,   435,     0,   436,   437,   438,   439,   440,
       0,     0,     0,     0,     0,   441,   442,     0,     0,     0,
     443,   444,   445,   446,     0,   447,   448,     0,   449,   450,
       0,   451,   452,     0,     0,   453,     0,     0,   454,     0,
     455,     0,   456,   457,   458,     0,     0,     0,     0,     0,
       0,   459,     0,     0,   460,     0,     0,     0,   461,   462,
     463,   464,     0,     0,     0,     0,     0,     0,   465,   466,
       0,   467,   468,   469,     0,     0,   470,     0,     0,   135,
       0,   136,   137,   138,   139,   140,     0,  1081,     0,     0,
       0,   141,     0,     0,   142,   745,   143,   144,   145,   146,
     147,   148,   149,     0,   150,     0,     0,     0,   151,     0,
       0,     0,   152,     0,     0,   153,   154,   155,     0,   156,
       0,   157,   158,     0,     0,   159,     0,     0,   160,   161,
       0,   162,   163,   164,     0,   165,     0,   166,   167,   168,
     169,   170,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,     0,   183,   184,     0,
     185,   186,   187,   188,   189,     0,   190,     0,     0,   191,
       0,     0,   192,     0,     0,     0,   193,     0,     0,     0,
     194,   195,   196,     0,     0,   197,     0,     0,     0,     0,
     198,   199,     0,     0,     0,     0,   200,     0,   201,     0,
       0,     0,   202,     0,   203,   204,   205,   206,     0,     0,
       0,   207,     0,     0,   208,   209,   210,     0,     0,     0,
     211,     0,   212,   213,     0,   214,   215,   216,     0,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,     0,
     224,   225,   226,     0,     0,   227,   228,     0,   229,   230,
     231,     0,     0,   232,     0,     0,     0,   233,     0,   234,
       0,   235,     0,   236,   237,   238,   239,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,  1282,     0,   258,     0,   259,   260,
       0,   261,   262,     0,     0,     0,   263,     0,     0,   264,
     265,     0,     0,   266,     0,     0,   267,   268,     0,     0,
       0,     0,     0,   269,   270,     0,   271,     0,   272,     0,
     273,   274,     0,     0,     0,     0,     0,     0,     0,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,     0,   288,   289,   290,     0,   291,   292,   293,
     294,     0,   295,   296,     0,     0,     0,     0,   297,   298,
     299,   300,   301,   302,     0,     0,   303,   304,     0,   305,
       0,   306,     0,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,     0,   318,   319,
     320,   321,     0,     0,     0,   322,   323,     0,     0,     0,
       0,   324,   325,   326,     0,   327,   328,   329,     0,   330,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   331,
     332,   333,     0,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,   347,   348,
       0,   349,     0,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,     0,     0,   359,     0,     0,     0,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,   368,
     369,     0,   370,   371,     0,   372,   373,   374,     0,     0,
     375,     0,   376,     0,   377,   378,     0,   379,   380,     0,
       0,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,     0,     0,     0,   393,   394,
     395,   396,     0,     0,     0,   397,     0,     0,     0,   398,
       0,   399,   400,   401,   402,     0,   403,   404,   405,   406,
     407,     0,     0,     0,     0,     0,     0,   408,   409,     0,
     410,     0,     0,     0,   411,     0,     0,   412,   413,   414,
       0,     0,     0,   415,   416,     0,   417,   418,   419,   420,
     421,   422,     0,     0,   423,   424,   425,   426,     0,   427,
     428,     0,     0,   429,   430,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,     0,     0,
       0,     0,     0,   441,   442,     0,     0,     0,   443,   444,
     445,   446,     0,   447,   448,     0,   449,   450,     0,   451,
     452,     0,     0,   453,     0,     0,   454,     0,   455,     0,
     456,   457,   458,     0,     0,     0,     0,     0,     0,   459,
       0,     0,   460,     0,     0,     0,   461,   462,   463,   464,
       0,     0,     0,     0,     0,     0,   465,   466,     0,   467,
     468,   469,     0,     0,   470,     0,     0,   135,     0,   136,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,     0,   142,   518,   143,   144,   145,   146,   147,   148,
     149,     0,   150,     0,     0,     0,   151,     0,     0,     0,
     152,     0,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,     0,     0,   160,   161,     0,   162,
     163,   164,     0,   165,     0,   166,   167,   168,   169,   170,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,     0,   185,   186,
     187,   188,   189,     0,   190,     0,     0,   191,     0,     0,
     192,     0,     0,     0,   193,     0,     0,     0,   194,   195,
     196,     0,     0,   197,     0,     0,     0,     0,   198,   199,
       0,     0,     0,     0,   200,     0,   201,     0,     0,     0,
     202,     0,   203,   204,   205,   206,     0,     0,     0,   207,
       0,     0,   208,   209,   210,     0,     0,     0,   211,     0,
     212,   213,     0,   214,   215,   216,     0,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,   233,     0,   234,     0,   235,
       0,   236,   237,   238,   239,   240,     0,   241,     0,     0,
       0,   242,   243,     0,   244,     0,     0,   245,   246,     0,
       0,     0,   247,   248,   249,   250,     0,     0,   251,   252,
     253,     0,   254,     0,   255,     0,     0,     0,     0,   256,
     257,     0,     0,     0,   258,     0,   259,   260,     0,   261,
     262,     0,     0,     0,   263,     0,     0,   264,   265,     0,
       0,   266,     0,     0,   267,   268,     0,     0,     0,     0,
       0,   269,   270,     0,   271,     0,   272,     0,   273,   274,
       0,     0,     0,     0,     0,     0,     0,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
       0,   288,   289,   290,     0,   291,   292,   293,   294,     0,
     295,   296,     0,     0,     0,     0,   297,   298,   299,   300,
     301,   302,     0,     0,   303,   304,     0,   305,     0,   306,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
       0,     0,   316,   317,     0,     0,   318,   319,   320,   321,
       0,     0,     0,   322,   323,     0,     0,     0,     0,   324,
     325,   326,     0,   327,   328,   329,     0,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,   332,   333,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,   348,     0,   349,
       0,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,     0,     0,   359,     0,     0,     0,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   372,   373,   374,     0,     0,   375,     0,
     376,     0,   377,   378,     0,   379,   380,     0,     0,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,     0,     0,     0,   393,   394,   395,   396,
       0,     0,     0,   397,     0,     0,     0,   398,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,     0,
       0,     0,     0,     0,     0,   408,   409,     0,   410,     0,
       0,     0,   411,     0,     0,   412,   413,   414,     0,     0,
       0,   415,   416,     0,   417,   418,   419,   420,   421,   422,
       0,     0,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,     0,   434,   435,
       0,   436,   437,   438,   439,   440,     0,     0,     0,     0,
       0,   441,   442,     0,     0,     0,   443,   444,   445,   446,
       0,   447,   448,     0,   449,   450,     0,   451,   452,     0,
       0,   453,     0,     0,   454,     0,   455,     0,   456,   457,
     458,     0,     0,     0,     0,     0,     0,   459,     0,     0,
     460,     0,     0,     0,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,   468,   469,
       0,     0,   470,     0,     0,     0,     0,   135,  2206,   136,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,   518,   142,     0,   143,   144,   145,   146,   147,   148,
     149,     0,   150,     0,     0,     0,   151,     0,     0,     0,
     152,     0,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,     0,     0,   160,   161,     0,   162,
     163,   164,     0,   165,     0,   166,   167,   168,   169,   170,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,     0,   185,   186,
     187,   188,   189,     0,   190,     0,     0,   191,     0,     0,
     192,     0,     0,     0,   193,     0,     0,     0,   194,   195,
     196,     0,     0,   197,     0,     0,     0,     0,   198,   199,
       0,     0,     0,     0,   200,     0,   201,     0,     0,     0,
     202,     0,   203,   204,   205,   206,     0,     0,     0,   207,
       0,     0,   208,   209,   210,     0,     0,     0,   211,     0,
     212,   213,     0,   214,   215,   216,     0,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,   233,     0,   234,     0,   235,
       0,   236,   237,   238,   239,   240,     0,   241,     0,     0,
       0,   242,   243,     0,   244,     0,     0,   245,   246,     0,
       0,     0,   247,   248,   249,   250,     0,     0,   251,   252,
     253,     0,   254,     0,   255,     0,     0,     0,     0,   256,
     257,     0,     0,     0,   258,     0,   259,   260,     0,   261,
     262,     0,     0,     0,   263,     0,     0,   264,   265,     0,
       0,   266,     0,     0,   267,   268,     0,     0,     0,     0,
       0,   269,   270,     0,   271,     0,   272,     0,   273,   274,
       0,     0,     0,     0,     0,     0,     0,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
       0,   288,   289,   290,     0,   291,   292,   293,   294,     0,
     295,   296,     0,     0,     0,     0,   297,   298,   299,   300,
     301,   302,     0,     0,   303,   304,     0,   305,     0,   306,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
       0,     0,   316,   317,     0,     0,   318,   319,   320,   321,
       0,     0,     0,   322,   323,     0,     0,     0,     0,   324,
     325,   326,     0,   327,   328,   329,     0,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,   332,   333,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,   348,     0,   349,
       0,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,     0,     0,   359,     0,     0,     0,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   372,   373,   374,     0,     0,   375,     0,
     376,     0,   377,   378,     0,   379,   380,     0,     0,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,     0,     0,     0,   393,   394,   395,   396,
       0,     0,     0,   397,     0,     0,     0,   398,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,     0,
       0,     0,     0,     0,     0,   408,   409,     0,   410,     0,
       0,     0,   411,     0,     0,   412,   413,   414,     0,     0,
       0,   415,   416,     0,   417,   418,   419,   420,   421,   422,
       0,     0,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,     0,   434,   435,
       0,   436,   437,   438,   439,   440,     0,     0,     0,     0,
       0,   441,   442,     0,     0,     0,   443,   444,   445,   446,
       0,   447,   448,     0,   449,   450,     0,   451,   452,     0,
       0,   453,     0,     0,   454,     0,   455,     0,   456,   457,
     458,     0,     0,     0,     0,     0,     0,   459,     0,     0,
     460,     0,     0,     0,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,   468,   469,
       0,     0,   470,     0,     0,   135,     0,   136,   137,   138,
     139,   140,     0,  2449,     0,     0,     0,   141,     0,     0,
     142,  2450,   143,   144,   145,   146,   147,   148,   149,     0,
     150,     0,     0,     0,   151,     0,     0,     0,   152,     0,
       0,   153,   154,   155,     0,   156,     0,   157,   158,     0,
       0,   159,     0,     0,   160,   161,     0,   162,   163,   164,
       0,   165,     0,   166,   167,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,     0,   183,   184,     0,   185,   186,   187,   188,
     189,     0,   190,     0,     0,   191,     0,     0,   192,     0,
       0,     0,   193,     0,     0,     0,   194,   195,   196,     0,
       0,   197,     0,     0,     0,     0,   198,   199,     0,     0,
       0,     0,   200,     0,   201,     0,     0,     0,   202,     0,
     203,   204,   205,   206,     0,     0,     0,   207,     0,     0,
     208,   209,   210,     0,     0,     0,   211,     0,   212,   213,
       0,   214,   215,   216,     0,     0,   217,   218,     0,   219,
     220,   221,   222,   223,     0,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,     0,     0,   232,
       0,     0,     0,   233,     0,   234,     0,   235,     0,   236,
     237,   238,   239,   240,     0,   241,     0,     0,     0,   242,
     243,     0,   244,     0,     0,   245,   246,     0,     0,     0,
     247,   248,   249,   250,     0,     0,   251,   252,   253,     0,
     254,     0,   255,     0,     0,     0,     0,   256,   257,     0,
       0,     0,   258,     0,   259,   260,     0,   261,   262,     0,
       0,     0,   263,     0,     0,   264,   265,     0,     0,   266,
       0,     0,   267,   268,     0,     0,     0,     0,     0,   269,
     270,     0,   271,     0,   272,     0,   273,   274,     0,     0,
       0,     0,     0,     0,     0,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,     0,   288,
     289,   290,     0,   291,   292,   293,   294,     0,   295,   296,
       0,     0,     0,     0,   297,   298,   299,   300,   301,   302,
       0,     0,   303,   304,     0,   305,     0,   306,     0,   307,
     308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     316,   317,     0,     0,   318,   319,   320,   321,     0,     0,
       0,   322,   323,     0,     0,     0,     0,   324,   325,   326,
       0,   327,   328,   329,     0,   330,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   331,   332,   333,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,   347,   348,     0,   349,     0,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,     0,
       0,   359,     0,     0,     0,   360,   361,   362,   363,   364,
       0,     0,   365,   366,   367,   368,   369,     0,   370,   371,
       0,   372,   373,   374,     0,     0,   375,     0,   376,     0,
     377,   378,     0,   379,   380,     0,     0,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,     0,     0,     0,   393,   394,   395,   396,     0,     0,
       0,   397,     0,     0,     0,   398,     0,   399,   400,   401,
     402,     0,   403,   404,   405,   406,   407,     0,     0,     0,
       0,     0,     0,   408,   409,     0,   410,     0,     0,     0,
     411,     0,     0,   412,   413,   414,     0,     0,     0,   415,
     416,     0,   417,   418,   419,   420,   421,   422,     0,     0,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,   433,     0,     0,   434,   435,     0,   436,
     437,   438,   439,   440,     0,     0,     0,     0,     0,   441,
     442,     0,     0,     0,   443,   444,   445,   446,     0,   447,
     448,     0,   449,   450,     0,   451,   452,     0,     0,   453,
       0,     0,   454,     0,   455,     0,   456,   457,   458,     0,
       0,     0,     0,     0,     0,   459,     0,     0,   460,     0,
       0,     0,   461,   462,   463,   464,     0,     0,     0,     0,
       0,     0,   465,   466,     0,   467,   468,   469,     0,     0,
     470,     0,     0,     0,     0,   135,     0,   136,   137,   138,
     139,   140,     0,     0,     0,     0,     0,   141,  4247,   745,
     142,     0,   143,   144,   145,   146,   147,   148,   149,     0,
     150,     0,     0,     0,   151,     0,     0,     0,   152,     0,
       0,   153,   154,   155,     0,   156,     0,   157,   158,     0,
       0,   159,     0,     0,   160,   161,     0,   162,   163,   164,
       0,   165,     0,   166,   167,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,     0,   183,   184,     0,   185,   186,   187,   188,
     189,     0,   190,     0,     0,   191,     0,     0,   192,     0,
       0,     0,   193,     0,     0,     0,   194,   195,   196,     0,
       0,   197,     0,     0,     0,     0,   198,   199,     0,     0,
       0,     0,   200,     0,   201,     0,     0,     0,   202,     0,
     203,   204,   205,   206,     0,     0,     0,   207,     0,     0,
     208,   209,   210,     0,     0,     0,   211,     0,   212,   213,
       0,   214,   215,   216,     0,     0,   217,   218,     0,   219,
     220,   221,   222,   223,     0,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,     0,     0,   232,
       0,     0,     0,   233,     0,   234,     0,   235,     0,   236,
     237,   238,   239,   240,     0,   241,     0,     0,     0,   242,
     243,     0,   244,     0,     0,   245,   246,     0,     0,     0,
     247,   248,   249,   250,     0,     0,   251,   252,   253,     0,
     254,     0,   255,     0,     0,     0,     0,   256,   257,     0,
       0,     0,   258,     0,   259,   260,     0,   261,   262,     0,
       0,     0,   263,     0,     0,   264,   265,     0,     0,   266,
       0,     0,   267,   268,     0,     0,     0,     0,     0,   269,
     270,     0,   271,     0,   272,     0,   273,   274,     0,     0,
       0,     0,     0,     0,     0,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,     0,   288,
     289,   290,     0,   291,   292,   293,   294,     0,   295,   296,
       0,     0,     0,     0,   297,   298,   299,   300,   301,   302,
       0,     0,   303,   304,     0,   305,     0,   306,     0,   307,
     308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     316,   317,     0,     0,   318,   319,   320,   321,     0,     0,
       0,   322,   323,     0,     0,     0,     0,   324,   325,   326,
       0,   327,   328,   329,     0,   330,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   331,   332,   333,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,   347,   348,     0,   349,     0,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,     0,
       0,   359,     0,     0,     0,   360,   361,   362,   363,   364,
       0,     0,   365,   366,   367,   368,   369,     0,   370,   371,
       0,   372,   373,   374,     0,     0,   375,     0,   376,     0,
     377,   378,     0,   379,   380,     0,     0,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,     0,     0,     0,   393,   394,   395,   396,     0,     0,
       0,   397,     0,     0,     0,   398,     0,   399,   400,   401,
     402,     0,   403,   404,   405,   406,   407,     0,     0,     0,
       0,     0,     0,   408,   409,     0,   410,     0,     0,     0,
     411,     0,     0,   412,   413,   414,     0,     0,     0,   415,
     416,     0,   417,   418,   419,   420,   421,   422,     0,     0,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,   433,     0,     0,   434,   435,     0,   436,
     437,   438,   439,   440,     0,     0,     0,     0,     0,   441,
     442,     0,     0,     0,   443,   444,   445,   446,     0,   447,
     448,     0,   449,   450,     0,   451,   452,     0,     0,   453,
       0,     0,   454,     0,   455,     0,   456,   457,   458,     0,
       0,     0,     0,     0,     0,   459,     0,     0,   460,     0,
       0,     0,   461,   462,   463,   464,     0,     0,     0,     0,
       0,     0,   465,   466,     0,   467,   468,   469,     0,     0,
     470,     0,     0,   135,     0,   136,   137,   138,   139,   140,
       0,     0,     0,     0,     0,   141,     0,     0,   142,   518,
     143,   144,   145,   146,   147,   148,   149,     0,   150,     0,
       0,     0,   151,     0,     0,     0,   152,     0,     0,   153,
     154,   155,     0,   156,     0,   157,   158,     0,     0,   159,
       0,     0,   160,   161,     0,   162,   163,   164,     0,   165,
       0,   166,   167,   168,   169,   170,   171,   172,     0,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   188,   189,     0,
     190,     0,     0,   191,     0,     0,   192,     0,     0,     0,
     193,     0,     0,     0,   194,   195,   196,     0,     0,   197,
       0,     0,     0,     0,   198,   199,     0,     0,     0,     0,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,     0,   224,   584,   226,     0,     0,   227,
     228,     0,   229,   230,   231,     0,     0,   232,     0,     0,
       0,   233,     0,   234,     0,   235,     0,   236,   237,   238,
     239,   240,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,     0,   245,   246,     0,     0,     0,   247,   248,
     249,   250,     0,     0,   251,   252,   253,     0,   254,     0,
     255,     0,     0,     0,     0,   256,   257,     0,     0,     0,
     258,     0,   259,   260,     0,   261,   262,     0,     0,     0,
     263,     0,     0,   264,   265,     0,     0,   266,     0,     0,
     267,   268,     0,     0,     0,     0,     0,   269,   270,     0,
     271,     0,   272,     0,   273,   274,     0,     0,     0,     0,
       0,     0,     0,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,     0,   288,   289,   290,
       0,   291,   292,   293,   294,     0,   295,   296,     0,     0,
       0,     0,   297,   298,   299,   300,   301,   302,     0,     0,
     303,   304,     0,   305,     0,   306,     0,   307,   308,   309,
     310,   311,   312,   313,   314,   315,     0,     0,   316,   317,
       0,     0,   318,   319,   320,   321,     0,     0,     0,   322,
     323,     0,     0,     0,     0,   324,   325,   326,     0,   327,
     328,   329,     0,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   331,   332,   333,     0,   334,   335,   336,
     585,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,   347,   348,     0,   349,     0,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,     0,     0,   359,
       0,     0,     0,   360,   361,   362,   363,   364,     0,     0,
     365,   366,   367,   368,   369,     0,   370,   371,     0,   372,
     373,   374,     0,     0,   375,     0,   376,     0,   377,   378,
       0,   379,   380,     0,     0,     0,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,     0,
       0,     0,   393,   394,   395,   396,     0,     0,     0,   397,
       0,     0,     0,   398,     0,   399,   400,   401,   402,     0,
     403,   404,   405,   406,   407,     0,     0,     0,     0,     0,
       0,   408,   409,     0,   410,     0,     0,     0,   411,     0,
       0,   412,   413,   414,     0,     0,     0,   415,   416,     0,
     417,   418,   419,   420,   421,   422,     0,     0,   423,   424,
     425,   426,     0,   427,   428,     0,     0,   429,   430,   431,
     432,   433,     0,     0,   434,   435,     0,   436,   437,   438,
     439,   440,     0,     0,     0,     0,     0,   441,   442,     0,
       0,     0,   443,   444,   445,   446,     0,   447,   448,     0,
     449,   450,     0,   451,   452,     0,     0,   453,     0,     0,
     454,     0,   455,     0,   456,   457,   458,     0,     0,     0,
       0,     0,     0,   459,     0,     0,   460,     0,     0,     0,
     461,   462,   463,   464,     0,     0,     0,     0,     0,     0,
     465,   466,     0,   467,   468,   469,     0,     0,   470,     0,
       0,   135,     0,   136,   137,   138,   139,   140,     0,     0,
       0,     0,     0,   141,     0,     0,   142,   518,   143,   144,
     145,   146,   147,   148,   149,     0,   150,     0,     0,     0,
     151,     0,     0,     0,   152,     0,     0,   153,   154,   155,
       0,   156,     0,   157,   158,     0,     0,   159,     0,     0,
     160,   161,     0,   162,   163,   164,     0,   165,     0,   166,
     167,   168,   169,   170,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,     0,   185,   186,   187,   188,   189,     0,   190,     0,
       0,   191,     0,     0,   192,     0,     0,     0,   193,     0,
       0,     0,   194,   195,   196,     0,     0,   197,     0,     0,
       0,     0,   198,   199,     0,     0,     0,     0,   200,     0,
     201,     0,     0,     0,   202,     0,   203,   204,   205,   206,
       0,     0,     0,   207,     0,     0,   208,   209,   210,     0,
       0,     0,   211,     0,   212,   213,     0,   214,   215,   216,
       0,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,     0,     0,   232,     0,     0,     0,   233,
       0,   234,     0,   235,     0,   236,   237,   238,   239,   240,
       0,   241,     0,     0,     0,   242,   243,     0,   244,     0,
       0,   245,   246,     0,     0,     0,   247,   248,   249,   250,
       0,     0,   251,   252,   253,     0,   254,     0,   255,     0,
       0,     0,     0,   256,   257,     0,     0,     0,   258,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,     0,   288,   289,   290,     0,   291,
     292,   293,   294,     0,   295,   296,     0,     0,     0,     0,
     297,   298,   299,   300,   301,   302,     0,     0,   303,   304,
       0,   305,     0,   306,     0,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     0,     0,   316,   317,     0,     0,
     318,   319,   320,   321,     0,     0,     0,   322,   323,     0,
       0,     0,     0,   324,   325,   326,     0,   327,   328,   329,
       0,   330,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,   332,   333,     0,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
     347,   348,     0,   349,     0,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,     0,     0,   359,     0,     0,
       0,   360,   361,   362,   363,   364,     0,     0,   365,   366,
     367,   368,   369,     0,   370,   371,     0,   372,   373,   374,
       0,     0,   375,     0,   376,     0,   377,   378,     0,   379,
     380,     0,     0,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,     0,     0,     0,
     393,   394,   395,   396,     0,     0,     0,   397,     0,     0,
       0,   398,     0,   399,   400,   401,   402,     0,   403,   404,
     405,   406,   407,     0,     0,     0,     0,     0,     0,   408,
     409,     0,   410,     0,     0,     0,   411,     0,     0,   412,
     413,   414,     0,     0,     0,   415,   416,     0,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,     0,   434,   435,     0,   436,   437,   438,   439,   440,
       0,     0,     0,     0,     0,   441,   442,     0,     0,     0,
     443,   444,   445,   446,     0,   447,   448,     0,   449,   450,
       0,   451,   452,     0,     0,   453,     0,     0,   454,     0,
     455,     0,   456,   457,   458,     0,     0,     0,     0,     0,
       0,   459,     0,     0,   460,     0,     0,     0,   461,   462,
     463,   464,     0,     0,     0,     0,     0,     0,   465,   466,
       0,   467,   468,   469,     0,     0,   470,     0,     0,   135,
       0,   136,   137,   138,   139,   140,     0,     0,     0,     0,
       0,   141,     0,     0,   142,   745,   143,   144,   145,   146,
     147,   148,   149,     0,   150,     0,     0,     0,   151,     0,
       0,     0,   152,     0,     0,   153,   154,   155,     0,   156,
       0,   157,   158,     0,     0,   159,     0,     0,   160,   161,
       0,   162,   163,   164,     0,   165,     0,   166,   167,   168,
     169,   170,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,     0,   183,   184,     0,
     185,   186,   187,   188,   189,     0,   190,     0,     0,   191,
       0,     0,   192,     0,     0,     0,   193,     0,     0,     0,
     194,   195,   196,     0,     0,   197,     0,     0,     0,     0,
     198,   199,     0,     0,     0,     0,   200,     0,   201,     0,
       0,     0,   202,     0,   203,   204,   205,   206,     0,     0,
       0,   207,     0,     0,   208,   209,   210,     0,     0,     0,
     211,     0,   212,   213,     0,   214,   215,   216,     0,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,     0,
     224,   225,   226,     0,     0,   227,   228,     0,   229,   230,
     231,     0,     0,   232,     0,     0,     0,   233,     0,   234,
       0,   235,     0,   236,   237,   238,   239,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,   259,   260,
       0,   261,   262,     0,     0,     0,   263,     0,     0,   264,
     265,     0,     0,   266,     0,     0,   267,   268,     0,     0,
       0,     0,     0,   269,   270,     0,   271,     0,   272,     0,
     273,   274,     0,     0,     0,     0,     0,     0,     0,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,     0,   288,   289,   290,     0,   291,   292,   293,
     294,     0,   295,   296,     0,     0,     0,     0,   297,   298,
     299,   300,   301,   302,     0,     0,   303,   304,     0,   305,
       0,   306,     0,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,     0,   318,   319,
     320,   321,     0,     0,     0,   322,   323,     0,     0,     0,
       0,   324,   325,   326,     0,   327,   328,   329,     0,   330,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   331,
     332,   333,     0,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,   347,   348,
       0,   349,     0,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,     0,     0,   359,     0,     0,     0,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,   368,
     369,     0,   370,   371,     0,   372,   373,   374,     0,     0,
     375,     0,   376,     0,   377,   378,     0,   379,   380,     0,
       0,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,     0,     0,     0,   393,   394,
     395,   396,     0,     0,     0,   397,     0,     0,     0,   398,
       0,   399,   400,   401,   402,     0,   403,   404,   405,   406,
     407,     0,     0,     0,     0,     0,     0,   408,   409,     0,
     410,     0,     0,     0,   411,     0,     0,   412,   413,   414,
       0,     0,     0,   415,   416,     0,   417,   418,   419,   420,
     421,   422,     0,     0,   423,   424,   425,   426,     0,   427,
     428,     0,     0,   429,   430,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,     0,     0,
       0,     0,     0,   441,   442,     0,     0,     0,   443,   444,
     445,   446,     0,   447,   448,     0,   449,   450,     0,   451,
     452,     0,     0,   453,     0,     0,   454,     0,   455,     0,
     456,   457,   458,     0,     0,     0,     0,     0,     0,   459,
       0,     0,   460,     0,     0,     0,   461,   462,   463,   464,
       0,     0,     0,     0,     0,     0,   465,   466,     0,   467,
     468,   469,     0,     0,   470,     0,     0,   135,     0,   136,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,     0,   142,  2450,   143,   144,   145,   146,   147,   148,
     149,     0,   150,     0,     0,     0,   151,     0,     0,     0,
     152,     0,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,     0,     0,   160,   161,     0,   162,
     163,   164,     0,   165,     0,   166,   167,   168,   169,   170,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,     0,   185,   186,
     187,   188,   189,     0,   190,     0,     0,   191,     0,     0,
     192,     0,     0,     0,   193,     0,     0,     0,   194,   195,
     196,     0,     0,   197,     0,     0,     0,     0,   198,   199,
       0,     0,     0,     0,   200,     0,   201,     0,     0,     0,
     202,     0,   203,   204,   205,   206,     0,     0,     0,   207,
       0,     0,   208,   209,   210,     0,     0,     0,   211,     0,
     212,   213,     0,   214,   215,   216,     0,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,   233,     0,   234,     0,   235,
       0,   236,   237,   238,   239,   240,     0,   241,     0,     0,
       0,   242,   243,     0,   244,     0,     0,   245,   246,     0,
       0,     0,   247,   248,   249,   250,     0,     0,   251,   252,
     253,     0,   254,     0,   255,     0,     0,     0,     0,   256,
     257,     0,     0,     0,   258,     0,   259,   260,     0,   261,
     262,     0,     0,     0,   263,     0,     0,   264,   265,     0,
       0,   266,     0,     0,   267,   268,   596,     0,     0,     0,
       0,   269,   270,     0,   271,     0,   272,     0,   273,   274,
       0,     0,     0,     0,     0,     0,     0,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
       0,   288,   289,   290,     0,   291,   292,   293,   294,     0,
     295,   296,     0,     0,     0,     0,   297,   298,   299,   300,
     301,   302,     0,     0,   303,   304,     0,   305,     0,   306,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
       0,     0,   316,   317,     0,     0,   318,   319,   320,   321,
       0,     0,     0,   322,   323,     0,     0,     0,     0,   324,
     325,   326,     0,   327,   328,   329,     0,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,   332,   333,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,   348,     0,   349,
       0,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,     0,     0,   359,     0,     0,     0,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   372,   373,   374,     0,     0,   375,     0,
     376,     0,   377,   378,     0,   379,   380,     0,     0,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,     0,     0,     0,   393,   394,   395,   396,
       0,     0,     0,   397,     0,     0,     0,   398,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,     0,
       0,     0,     0,     0,     0,   408,   409,     0,   410,     0,
       0,     0,   411,     0,     0,   412,   413,   414,     0,     0,
       0,   415,   416,     0,   417,   418,   419,   420,   421,   422,
       0,     0,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   132,   434,   435,
       0,   436,   437,   438,   439,   440,     0,     0,     0,     0,
       0,   441,   442,     0,     0,     0,   443,   444,   445,   446,
       0,   447,   448,     0,   449,   450,     0,   451,   452,     0,
       0,   453,     0,     0,   454,     0,   455,     0,   456,   457,
     458,     0,     0,     0,     0,     0,     0,   459,     0,     0,
     460,     0,     0,     0,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,   468,   469,
       0,     0,   470,     0,   135,     0,   136,   137,   138,   139,
     140,     0,     0,     0,     0,     0,   141,     0,     0,   142,
    1638,   143,   144,   145,   146,   147,   148,   149,     0,   150,
       0,     0,     0,   151,     0,     0,     0,   152,     0,     0,
     153,   154,   155,     0,   156,     0,   157,   158,     0,     0,
     159,     0,     0,   160,   161,     0,   162,   163,   164,     0,
     165,     0,   166,   167,   168,   169,   170,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,     0,   185,   186,   187,   188,   189,
       0,   190,     0,     0,   191,     0,     0,   192,     0,     0,
       0,   193,     0,     0,     0,   194,   195,   196,     0,     0,
     197,     0,     0,     0,     0,   198,   199,     0,     0,     0,
       0,   200,     0,   201,     0,     0,     0,   202,     0,   203,
     204,   205,   206,     0,     0,     0,   207,     0,     0,   208,
     209,   210,     0,     0,     0,   211,     0,   212,   213,     0,
     214,   215,   216,     0,     0,   217,   218,     0,   219,   220,
     221,   222,   223,     0,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,     0,     0,   232,     0,
       0,     0,   233,     0,   234,     0,   235,     0,   236,   237,
     238,   239,   240,     0,   241,     0,     0,     0,   242,   243,
       0,   244,     0,     0,   245,   246,     0,     0,     0,   247,
     248,   249,   250,     0,     0,   251,   252,   253,     0,   254,
       0,   255,     0,     0,     0,     0,   256,   257,     0,     0,
       0,   258,     0,   259,   260,     0,   261,   262,     0,     0,
       0,   263,     0,     0,   264,   265,     0,     0,   266,     0,
       0,   267,   268,   596,     0,     0,     0,     0,   269,   270,
       0,   271,     0,   272,     0,   273,   274,     0,     0,     0,
       0,     0,     0,     0,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,     0,   288,   289,
     290,     0,   291,   292,   293,   294,     0,   295,   296,     0,
       0,     0,     0,   297,   298,   299,   300,   301,   302,     0,
       0,   303,   304,     0,   305,     0,   306,     0,   307,   308,
     309,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,     0,   318,   319,   320,   321,     0,     0,     0,
     322,   323,     0,     0,     0,     0,   324,   325,   326,     0,
     327,   328,   329,     0,   330,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   331,   332,   333,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,   346,   347,   348,     0,   349,     0,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,     0,   411,
       0,     0,   412,   413,   414,     0,     0,     0,   415,   416,
       0,   417,   418,   419,   420,   421,   422,     0,     0,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     431,   432,   433,     0,   132,   434,   435,     0,   436,   437,
     438,   439,   440,     0,     0,     0,     0,     0,   441,   442,
       0,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,   449,   450,     0,   451,   452,     0,     0,   453,     0,
       0,   454,     0,   455,     0,   456,   457,   458,     0,     0,
       0,     0,     0,     0,   459,     0,     0,   460,     0,     0,
       0,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,   468,   469,     0,     0,   470,
       0,   135,     0,   136,   137,   138,   139,   140,     0,     0,
       0,     0,     0,   141,     0,     0,   142,  2718,   143,   144,
     145,   146,   147,   148,   149,     0,   150,     0,     0,     0,
     151,     0,     0,     0,   152,     0,     0,   153,   154,   155,
       0,   156,     0,   157,   158,     0,     0,   159,     0,     0,
     160,   161,     0,   162,   163,   164,     0,   165,     0,   166,
     167,   168,   169,   170,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,     0,   185,   186,   187,   188,   189,     0,   190,     0,
       0,   191,     0,     0,   192,     0,     0,     0,   193,     0,
       0,     0,   194,   195,   196,     0,     0,   197,     0,     0,
       0,     0,   198,   199,     0,     0,     0,     0,   200,     0,
     201,     0,     0,     0,   202,     0,   203,   204,   205,   206,
       0,     0,     0,   207,     0,     0,   208,   209,   210,     0,
       0,     0,   211,     0,   212,   213,     0,   214,   215,   216,
       0,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,     0,     0,   232,     0,     0,     0,   233,
       0,   234,     0,   235,     0,   236,   237,   238,   239,   240,
       0,   241,     0,     0,     0,   242,   243,     0,   244,     0,
       0,   245,   246,     0,     0,     0,   247,   248,   249,   250,
       0,     0,   251,   252,   253,     0,   254,     0,   255,     0,
       0,     0,     0,   256,   257,     0,     0,     0,   258,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
     596,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,     0,   288,   289,   290,     0,   291,
     292,   293,   294,     0,   295,   296,     0,     0,     0,     0,
     297,   298,   299,   300,   301,   302,     0,     0,   303,   304,
       0,   305,     0,   306,     0,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     0,     0,   316,   317,     0,     0,
     318,   319,   320,   321,     0,     0,     0,   322,   323,     0,
       0,     0,     0,   324,   325,   326,     0,   327,   328,   329,
       0,   330,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,   332,   333,     0,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
     347,   348,     0,   349,     0,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,     0,     0,   359,     0,     0,
       0,   360,   361,   362,   363,   364,     0,     0,   365,   366,
     367,   368,   369,     0,   370,   371,     0,   372,   373,   374,
       0,     0,   375,     0,   376,     0,   377,   378,     0,   379,
     380,     0,     0,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,     0,     0,     0,
     393,   394,   395,   396,     0,     0,     0,   397,     0,     0,
       0,   398,     0,   399,   400,   401,   402,     0,   403,   404,
     405,   406,   407,     0,     0,     0,     0,     0,     0,   408,
     409,     0,   410,     0,     0,     0,   411,     0,     0,   412,
     413,   414,     0,     0,     0,   415,   416,     0,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   132,   434,   435,     0,   436,   437,   438,   439,   440,
       0,     0,     0,     0,     0,   441,   442,     0,     0,     0,
     443,   444,   445,   446,     0,   447,   448,     0,   449,   450,
       0,   451,   452,     0,     0,   453,     0,     0,   454,     0,
     455,     0,   456,   457,   458,     0,     0,     0,     0,     0,
       0,   459,     0,     0,   460,     0,     0,     0,   461,   462,
     463,   464,     0,     0,     0,     0,     0,     0,   465,   466,
       0,   467,   468,   469,     0,     0,   470,     0,   135,     0,
     136,   137,   138,   139,   140,     0,     0,     0,     0,     0,
     141,     0,     0,     0,  3322,   143,   144,   145,   146,   147,
     148,     0,     0,  -327,     0,     0,     0,   151,     0,     0,
       0,   152,     0,     0,   153,   154,   155,     0,   156,     0,
       0,     0,     0,     0,   159,  3848,     0,   160,   161,     0,
     162,   163,     0,     0,     0,     0,   166,   167,   168,   169,
    3849,   171,   172,     0,   173,   174,     0,   175,     0,   177,
       0,   179,   180,   181,   182,     0,   183,   184,     0,   185,
     186,   187,     0,   189,     0,   190,     0,     0,   191,     0,
       0,   192,     0,     0,     0,   193,     0,     0,     0,   194,
     195,   196,     0,     0,   197,     0,     0,     0,     0,   198,
       0,     0,     0,     0,     0,   200,     0,   201,     0,     0,
       0,   202,     0,   203,   204,   205,   206,     0,     0,     0,
       0,     0,     0,   208,   209,   210,     0,     0,     0,   211,
       0,     0,   213,     0,   214,   215,   216,     0,     0,   217,
     218,     0,   219,   220,   221,   222,     0,     0,     0,   224,
     225,   226,     0,     0,   227,   228,  3850,   229,   230,   231,
       0,     0,     0,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,   240,     0,   241,     0,
       0,     0,     0,   243,     0,     0,     0,     0,     0,   246,
       0,     0,     0,   247,   248,   249,   250,  3851,     0,   251,
     252,   253,     0,   254,     0,   255,     0,     0,     0,     0,
     256,     0,     0,     0,     0,   258,     0,   259,   260,     0,
     261,   262,  3852,     0,     0,   263,     0,     0,     0,   265,
       0,     0,   266,  3853,     0,   267,   268,     0,     0,     0,
       0,     0,   269,   270,     0,   271,     0,   272,     0,   273,
     274,     0,     0,     0,     0,  -282,     0,     0,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,     0,   288,   289,   290,     0,   291,   292,   293,   294,
       0,   295,   296,     0,     0,     0,     0,   297,   298,   299,
     300,   301,   302,     0,     0,   303,   304,     0,   305,     0,
     306,     0,   307,   308,   309,   310,   311,   312,   313,   314,
     315,     0,     0,   316,   317,     0,     0,   318,   319,   320,
     321,     0,     0,     0,     0,   323,     0,     0,     0,     0,
     324,   325,   326,     0,   327,   328,  3854,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   332,
     333,     0,     0,   335,   336,   337,     0,   339,   340,   341,
     342,   343,   344,     0,     0,     0,     0,   347,   348,     0,
     349,     0,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,     0,     0,   359,     0,     0,     0,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,   368,   369,
       0,   370,     0,     0,   372,     0,   374,  -282,     0,   375,
       0,     0,     0,   377,     0,     0,   379,   380,  3855,     0,
       0,     0,   382,   383,   384,   385,   386,   387,     0,   389,
     390,     0,   391,     0,     0,     0,     0,   393,   394,   395,
       0,     0,     0,     0,   397,     0,     0,     0,   398,     0,
       0,   400,     0,   402,     0,   403,     0,     0,   406,   407,
       0,     0,     0,     0,     0,     0,   408,   409,     0,   410,
       0,     0,     0,   411,     0,     0,   412,     0,   414,     0,
       0,     0,     0,   416,     0,   417,   418,   419,   420,   421,
     422,     0,     0,   423,   424,   425,   426,     0,   427,   428,
       0,     0,   429,   430,   431,   432,   433,     0,     0,   434,
     435,     0,   436,   437,   438,   439,   440,     0,     0,     0,
       0,     0,   441,   442,     0,     0,     0,     0,   444,   445,
     446,     0,   447,   448,     0,   449,   450,     0,     0,     0,
       0,     0,   453,     0,     0,   454,     0,     0,     0,   456,
     457,   458,     0,     0,     0,     0,     0,     0,   459,     0,
       0,   460,     0,     0,     0,   461,   462,   463,   464,     0,
       0,  -282,     0,     0,     0,   465,     0,     0,   467,     0,
     469,     0,   135,   470,   136,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,  4272,   142,     0,   143,
     144,   145,   146,   147,   148,   149,     0,   150,     0,     0,
       0,   151,     0,     0,     0,   152,     0,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,     0,
       0,   160,   161,     0,   162,   163,   164,     0,   165,     0,
     166,   167,   168,   169,   170,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,     0,   185,   186,   187,   188,   189,     0,   190,
       0,     0,   191,     0,     0,   192,     0,     0,     0,   193,
       0,     0,     0,   194,   195,   196,     0,     0,   197,     0,
       0,     0,     0,   198,   199,     0,     0,     0,     0,   200,
       0,   201,     0,     0,     0,   202,     0,   203,   204,   205,
     206,     0,     0,     0,   207,     0,     0,   208,   209,   210,
       0,     0,     0,   211,     0,   212,   213,     0,   214,   215,
     216,     0,     0,   217,   218,     0,   219,   220,   221,   222,
     223,     0,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,     0,     0,   232,     0,     0,     0,
     233,     0,   234,     0,   235,     0,   236,   237,   238,   239,
     240,     0,   241,     0,     0,     0,   242,   243,     0,   244,
       0,     0,   245,   246,     0,     0,     0,   247,   248,   249,
     250,     0,     0,   251,   252,   253,     0,   254,     0,   255,
       0,     0,     0,     0,   256,   257,     0,     0,     0,   258,
       0,   259,   260,     0,   261,   262,     0,     0,     0,   263,
       0,     0,   264,   265,     0,     0,   266,     0,     0,   267,
     268,     0,     0,     0,     0,     0,   269,   270,     0,   271,
       0,   272,     0,   273,   274,     0,     0,     0,     0,     0,
       0,     0,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,     0,   288,   289,   290,     0,
     291,   292,   293,   294,     0,   295,   296,     0,     0,     0,
       0,   297,   298,   299,   300,   301,   302,     0,     0,   303,
     304,     0,   305,     0,   306,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     0,     0,   316,   317,     0,
       0,   318,   319,   320,   321,     0,     0,     0,   322,   323,
       0,     0,     0,     0,   324,   325,   326,     0,   327,   328,
     329,     0,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   332,   333,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,   348,     0,   349,     0,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,     0,     0,   359,     0,
       0,     0,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,   368,   369,     0,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,   376,     0,   377,   378,     0,
     379,   380,     0,     0,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,     0,     0,
       0,   393,   394,   395,   396,     0,     0,     0,   397,     0,
       0,     0,   398,     0,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,     0,     0,     0,     0,     0,     0,
     408,   409,     0,   410,     0,     0,     0,   411,     0,     0,
     412,   413,   414,     0,     0,     0,   415,   416,     0,   417,
     418,   419,   420,   421,   422,     0,     0,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,     0,   434,   435,     0,   436,   437,   438,   439,
     440,     0,     0,     0,     0,     0,   441,   442,     0,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,   449,
     450,     0,   451,   452,     0,     0,   453,     0,     0,   454,
       0,   455,     0,   456,   457,   458,     0,     0,     0,     0,
       0,     0,   459,     0,     0,   460,     0,     0,     0,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,   468,   469,     0,   135,   470,   136,   137,
     138,   139,   140,  2045,     0,     0,     0,     0,   141,     0,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,   150,     0,     0,     0,   151,     0,     0,     0,   152,
       0,     0,   153,   154,   155,     0,   156,     0,   157,   158,
       0,     0,   159,     0,     0,   160,   161,     0,   162,   163,
     164,     0,   165,     0,   166,   167,   168,   169,   170,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,     0,   185,   186,   187,
     188,   189,     0,   190,     0,     0,   191,     0,     0,   192,
       0,     0,     0,   193,     0,     0,     0,   194,   195,   196,
       0,     0,   197,     0,     0,     0,     0,   198,   199,     0,
       0,     0,     0,   200,     0,   201,     0,     0,     0,   202,
       0,   203,   204,   205,   206,     0,     0,     0,   207,     0,
       0,   208,   209,   210,     0,     0,     0,   211,     0,   212,
     213,     0,   214,   215,   216,     0,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,     0,     0,
     232,     0,     0,     0,   233,     0,   234,     0,   235,     0,
     236,   237,   238,   239,   240,     0,   241,     0,     0,     0,
     242,   243,     0,   244,     0,     0,   245,   246,     0,     0,
       0,   247,   248,   249,   250,     0,     0,   251,   252,   253,
       0,   254,     0,   255,     0,     0,     0,     0,   256,   257,
       0,     0,     0,   258,     0,   259,   260,     0,   261,   262,
       0,     0,     0,   263,     0,     0,   264,   265,     0,     0,
     266,     0,     0,   267,   268,     0,     0,     0,     0,     0,
     269,   270,     0,   271,     0,   272,     0,   273,   274,     0,
       0,     0,     0,     0,     0,     0,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,     0,
     288,   289,   290,     0,   291,   292,   293,   294,     0,   295,
     296,     0,     0,     0,     0,   297,   298,   299,   300,   301,
     302,     0,     0,   303,   304,     0,   305,     0,   306,     0,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
       0,   316,   317,     0,     0,   318,   319,   320,   321,     0,
       0,     0,   322,   323,     0,     0,     0,     0,   324,   325,
     326,     0,   327,   328,   329,     0,   330,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   331,   332,   333,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,   346,   347,   348,     0,   349,     0,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
       0,     0,   359,     0,     0,     0,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,   368,   369,     0,   370,
     371,     0,   372,   373,   374,     0,     0,   375,     0,   376,
       0,   377,   378,     0,   379,   380,     0,     0,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,     0,     0,     0,   393,   394,   395,   396,     0,
       0,     0,   397,     0,     0,     0,   398,     0,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,     0,     0,
       0,     0,     0,     0,   408,   409,     0,   410,     0,     0,
       0,   411,     0,     0,   412,   413,   414,     0,     0,     0,
     415,   416,     0,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,   433,     0,     0,   434,   435,     0,
     436,   437,   438,   439,   440,     0,     0,     0,     0,     0,
     441,   442,     0,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,   449,   450,     0,   451,   452,     0,     0,
     453,     0,     0,   454,     0,   455,     0,   456,   457,   458,
       0,     0,     0,     0,     0,     0,   459,     0,     0,   460,
       0,     0,     0,   461,   462,   463,   464,     0,     0,     0,
       0,     0,     0,   465,   466,     0,   467,   468,   469,     0,
     135,   470,   136,   137,   138,   139,   140,  2706,     0,     0,
       0,     0,   141,     0,     0,   142,     0,   143,   144,   145,
     146,   147,   148,   149,     0,   150,     0,     0,     0,   151,
       0,     0,     0,   152,     0,     0,   153,   154,   155,     0,
     156,     0,   157,   158,     0,     0,   159,     0,     0,   160,
     161,     0,   162,   163,   164,     0,   165,     0,   166,   167,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,     0,   183,   184,
       0,   185,   186,   187,   188,   189,     0,   190,     0,     0,
     191,     0,     0,   192,     0,     0,     0,   193,     0,     0,
       0,   194,   195,   196,     0,     0,   197,     0,     0,     0,
       0,   198,   199,     0,     0,     0,     0,   200,     0,   201,
       0,     0,     0,   202,     0,   203,   204,   205,   206,     0,
       0,     0,   207,     0,     0,   208,   209,   210,     0,     0,
       0,   211,     0,   212,   213,     0,   214,   215,   216,     0,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,     0,     0,   232,     0,     0,     0,   233,     0,
     234,     0,   235,     0,   236,   237,   238,   239,   240,     0,
     241,     0,     0,     0,   242,   243,     0,   244,     0,     0,
     245,   246,     0,     0,     0,   247,   248,   249,   250,     0,
       0,   251,   252,   253,     0,   254,     0,   255,     0,     0,
       0,     0,   256,   257,     0,     0,     0,   258,     0,   259,
     260,     0,   261,   262,     0,     0,     0,   263,     0,     0,
     264,   265,     0,     0,   266,     0,     0,   267,   268,     0,
       0,     0,     0,     0,   269,   270,     0,   271,     0,   272,
       0,   273,   274,     0,     0,     0,     0,     0,     0,     0,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,     0,   288,   289,   290,     0,   291,   292,
     293,   294,     0,   295,   296,     0,     0,     0,     0,   297,
     298,   299,   300,   301,   302,     0,     0,   303,   304,     0,
     305,     0,   306,     0,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,     0,   316,   317,     0,     0,   318,
     319,   320,   321,     0,     0,     0,   322,   323,     0,     0,
       0,     0,   324,   325,   326,     0,   327,   328,   329,     0,
     330,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     331,   332,   333,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,   347,
     348,     0,   349,     0,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,     0,     0,   359,     0,     0,     0,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
     368,   369,     0,   370,   371,     0,   372,   373,   374,     0,
       0,   375,     0,   376,     0,   377,   378,     0,   379,   380,
       0,     0,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,     0,     0,     0,   393,
     394,   395,   396,     0,     0,     0,   397,     0,     0,     0,
     398,     0,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,     0,     0,     0,     0,     0,     0,   408,   409,
       0,   410,     0,     0,     0,   411,     0,     0,   412,   413,
     414,     0,     0,     0,   415,   416,     0,   417,   418,   419,
     420,   421,   422,     0,     0,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
       0,   434,   435,     0,   436,   437,   438,   439,   440,     0,
       0,     0,     0,     0,   441,   442,     0,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,   449,   450,     0,
     451,   452,     0,     0,   453,     0,     0,   454,     0,   455,
       0,   456,   457,   458,     0,     0,     0,     0,     0,     0,
     459,     0,     0,   460,     0,     0,     0,   461,   462,   463,
     464,     0,     0,     0,     0,     0,     0,   465,   466,     0,
     467,   468,   469,     0,   135,   470,   136,   137,   138,   139,
     140,  3003,     0,     0,     0,     0,   141,     0,     0,   142,
       0,   143,   144,   145,   146,   147,   148,   149,     0,   150,
       0,     0,     0,   151,     0,     0,     0,   152,     0,     0,
     153,   154,   155,     0,   156,     0,   157,   158,     0,     0,
     159,     0,     0,   160,   161,     0,   162,   163,   164,     0,
     165,     0,   166,   167,   168,   169,   170,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,     0,   185,   186,   187,   188,   189,
       0,   190,     0,     0,   191,     0,     0,   192,     0,     0,
       0,   193,     0,     0,     0,   194,   195,   196,     0,     0,
     197,     0,     0,     0,     0,   198,   199,     0,     0,     0,
       0,   200,     0,   201,     0,     0,     0,   202,     0,   203,
     204,   205,   206,     0,     0,     0,   207,     0,     0,   208,
     209,   210,     0,     0,     0,   211,     0,   212,   213,     0,
     214,   215,   216,     0,     0,   217,   218,     0,   219,   220,
     221,   222,   223,     0,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,     0,     0,   232,     0,
       0,     0,   233,     0,   234,     0,   235,     0,   236,   237,
     238,   239,   240,     0,   241,     0,     0,     0,   242,   243,
       0,   244,     0,     0,   245,   246,     0,     0,     0,   247,
     248,   249,   250,     0,     0,   251,   252,   253,     0,   254,
       0,   255,     0,     0,     0,     0,   256,   257,     0,     0,
       0,   258,     0,   259,   260,     0,   261,   262,     0,     0,
       0,   263,     0,     0,   264,   265,     0,     0,   266,     0,
       0,   267,   268,     0,     0,     0,     0,     0,   269,   270,
       0,   271,     0,   272,     0,   273,   274,     0,     0,     0,
       0,     0,     0,     0,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,     0,   288,   289,
     290,     0,   291,   292,   293,   294,     0,   295,   296,     0,
       0,     0,     0,   297,   298,   299,   300,   301,   302,     0,
       0,   303,   304,     0,   305,     0,   306,     0,   307,   308,
     309,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,     0,   318,   319,   320,   321,     0,     0,     0,
     322,   323,     0,     0,     0,     0,   324,   325,   326,     0,
     327,   328,   329,     0,   330,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   331,   332,   333,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,   346,   347,   348,     0,   349,     0,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,     0,   411,
       0,     0,   412,   413,   414,     0,     0,     0,   415,   416,
       0,   417,   418,   419,   420,   421,   422,     0,     0,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     431,   432,   433,     0,     0,   434,   435,     0,   436,   437,
     438,   439,   440,     0,     0,     0,     0,     0,   441,   442,
       0,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,   449,   450,     0,   451,   452,     0,     0,   453,     0,
       0,   454,     0,   455,     0,   456,   457,   458,     0,     0,
       0,     0,     0,     0,   459,     0,     0,   460,     0,     0,
       0,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,   468,   469,     0,   135,   470,
     136,   137,   138,   139,   140,  3327,     0,     0,     0,     0,
     141,     0,     0,   142,     0,   143,   144,   145,   146,   147,
     148,   149,     0,   150,     0,     0,     0,   151,     0,     0,
       0,   152,     0,     0,   153,   154,   155,     0,   156,     0,
     157,   158,     0,     0,   159,     0,     0,   160,   161,     0,
     162,   163,   164,     0,   165,     0,   166,   167,   168,   169,
     170,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,     0,   185,
     186,   187,   188,   189,     0,   190,     0,     0,   191,     0,
       0,   192,     0,     0,     0,   193,     0,     0,     0,   194,
     195,   196,     0,     0,   197,     0,     0,     0,     0,   198,
     199,  2364,     0,     0,     0,   200,     0,   201,     0,     0,
       0,   202,     0,   203,   204,   205,   206,     0,     0,     0,
     207,     0,     0,   208,   209,   210,     0,     0,     0,   211,
       0,   212,   213,     0,   214,   215,   216,     0,     0,   217,
     218,     0,   219,   220,   221,   222,   223,     0,     0,   224,
     225,   226,     0,     0,   227,   228,     0,   229,   230,   231,
    2365,     0,   232,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,   240,     0,   241,     0,
       0,     0,   242,   243,     0,   244,  2366,     0,   245,   246,
       0,     0,     0,   247,   248,   249,   250,     0,     0,   251,
     252,   253,     0,   254,     0,   255,     0,     0,     0,     0,
     256,   257,     0,     0,     0,   258,     0,   259,   260,     0,
     261,   262,     0,     0,     0,   263,     0,     0,   264,   265,
       0,     0,   266,     0,     0,   267,   268,     0,     0,     0,
       0,     0,   269,   270,     0,   271,     0,   272,     0,   273,
     274,     0,     0,  2367,     0,     0,     0,     0,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,     0,   288,   289,   290,     0,   291,   292,   293,   294,
       0,   295,   296,     0,     0,     0,     0,   297,   298,   299,
     300,   301,   302,     0,     0,   303,   304,     0,   305,     0,
     306,     0,   307,   308,   309,   310,   311,   312,   313,   314,
     315,     0,     0,   316,   317,     0,     0,   318,   319,   320,
     321,   997,   998,     0,   322,   323,     0,     0,  2368,     0,
     324,   325,   326,     0,   327,   328,   329,     0,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   331,   332,
     333,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,   347,   348,     0,
     349,     0,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,     0,     0,   359,     0,     0,     0,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,   368,   369,
       0,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,   376,     0,   377,   378,     0,   379,   380,     0,     0,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,     0,     0,     0,   393,   394,   395,
     396,     0,     0,     0,   397,     0,     0,     0,   398,     0,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
       0,     0,  4256,   543,  4257,     0,   408,   409,     0,   410,
       0,     0,     0,   411,     0,     0,   412,   413,   414,     0,
       0,     0,   415,   416,     0,   417,   418,   419,   420,   421,
     422,     0,     0,   423,   424,   425,   426,     0,   427,   428,
       0,     0,   429,   430,   431,   432,   433,     0,     0,   434,
     435,     0,   436,   437,   438,   439,   440,     0,     0,     0,
       0,     0,   441,   442,     0,     0,     0,   443,   444,   445,
     446,  2369,   447,   448,     0,   449,   450,     0,   451,   452,
       0,     0,   453,     0,     0,   454,     0,   455,     0,   456,
     457,   458,     0,     0,     0,     0,     0,     0,   459,     0,
       0,   460,     0,     0,     0,   461,   462,   463,   464,     0,
       0,     0,     0,     0,     0,   465,   466,     0,   467,   468,
     469,     0,   135,   470,   136,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,     0,   142,     0,   143,
     144,   145,   146,   147,   148,   149,     0,   150,     0,     0,
    2557,   151,     0,     0,     0,   152,     0,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,     0,
       0,   160,   161,     0,   162,   163,   164,     0,   165,     0,
     166,   167,   168,   169,   170,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,     0,   185,   186,   187,   188,   189,     0,   190,
       0,     0,   191,     0,     0,   192,     0,     0,     0,   193,
       0,     0,     0,   194,   195,   196,     0,     0,   197,     0,
       0,     0,     0,   198,   199,     0,     0,     0,  2712,   200,
       0,   201,     0,     0,     0,   202,     0,   203,   204,   205,
     206,     0,     0,     0,   207,     0,     0,   208,   209,   210,
       0,     0,     0,   211,     0,   212,   213,     0,   214,   215,
     216,  2188,     0,   217,   218,     0,   219,   220,   221,   222,
     223,     0,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,     0,     0,   232,     0,     0,     0,
     233,     0,   234,     0,   235,     0,   236,   237,   238,   239,
     240,     0,   241,     0,     0,     0,   242,   243,     0,   244,
       0,     0,   245,   246,     0,     0,     0,   247,   248,   249,
     250,     0,     0,   251,   252,   253,     0,   254,     0,   255,
       0,     0,     0,     0,   256,   257,     0,     0,     0,   258,
       0,   259,   260,     0,   261,   262,     0,     0,     0,   263,
       0,     0,   264,   265,     0,     0,   266,     0,     0,   267,
     268,   596,     0,     0,     0,     0,   269,   270,     0,   271,
       0,   272,     0,   273,   274,     0,     0,     0,     0,     0,
       0,     0,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,     0,   288,   289,   290,     0,
     291,   292,   293,   294,     0,   295,   296,     0,     0,     0,
       0,   297,   298,   299,   300,   301,   302,     0,     0,   303,
     304,     0,   305,     0,   306,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     0,     0,   316,   317,     0,
       0,   318,   319,   320,   321,     0,     0,     0,   322,   323,
       0,     0,     0,     0,   324,   325,   326,     0,   327,   328,
     329,     0,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   332,   333,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,   348,     0,   349,     0,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,     0,     0,   359,     0,
       0,     0,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,   368,   369,     0,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,   376,     0,   377,   378,     0,
     379,   380,     0,     0,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,     0,     0,
       0,   393,   394,   395,   396,     0,     0,  2189,   397,     0,
       0,     0,   398,     0,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,     0,     0,     0,     0,     0,     0,
     408,   409,     0,   410,     0,     0,     0,   411,     0,     0,
     412,   413,   414,     0,     0,     0,   415,   416,     0,   417,
     418,   419,   420,   421,   422,     0,     0,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,   132,   434,   435,     0,   436,   437,   438,   439,
     440,     0,     0,     0,     0,     0,   441,   442,     0,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,   449,
     450,     0,   451,   452,     0,     0,   453,     0,     0,   454,
       0,   455,     0,   456,   457,   458,     0,     0,     0,     0,
       0,     0,   459,     0,     0,   460,     0,     0,     0,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,   468,   469,     0,   135,   470,   136,   137,
     138,   139,   140,     0,     0,     0,     0,     0,   141,     0,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,   150,     0,     0,     0,   151,     0,     0,     0,   152,
       0,     0,   153,   154,   155,     0,   156,     0,   157,   158,
       0,     0,   159,     0,     0,   160,   161,     0,   162,   163,
     164,     0,   165,     0,   166,   167,   168,   169,   170,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,     0,   185,   186,   187,
     188,   189,     0,   190,     0,     0,   191,     0,     0,   192,
       0,     0,     0,   193,     0,     0,     0,   194,   195,   196,
       0,     0,   197,     0,     0,     0,     0,   198,   199,     0,
       0,     0,     0,   200,     0,   201,     0,     0,     0,   202,
       0,   203,   204,   205,   206,     0,     0,     0,   207,     0,
       0,   208,   209,   210,     0,     0,     0,   211,     0,   212,
     213,     0,   214,   215,   216,     0,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,     0,     0,
     232,     0,     0,     0,   233,     0,   234,     0,   235,     0,
     236,   237,   238,   239,   240,     0,   241,     0,     0,     0,
     242,   243,     0,   244,     0,     0,   245,   246,     0,     0,
       0,   247,   248,   249,   250,     0,     0,   251,   252,   253,
       0,   254,     0,   255,     0,     0,     0,     0,   256,   257,
       0,     0,     0,   258,     0,   259,   260,     0,   261,   262,
       0,     0,     0,   263,     0,     0,   264,   265,     0,     0,
     266,     0,     0,   267,   268,     0,     0,     0,     0,     0,
     269,   270,     0,   271,     0,   272,     0,   273,   274,     0,
       0,  1806,     0,     0,     0,     0,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,     0,
     288,   289,   290,     0,   291,   292,   293,   294,     0,   295,
     296,     0,     0,     0,     0,   297,   298,   299,   300,   301,
     302,     0,     0,   303,   304,     0,   305,     0,   306,     0,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
       0,   316,   317,     0,     0,   318,   319,   320,   321,     0,
       0,     0,   322,   323,     0,     0,  1807,     0,   324,   325,
     326,     0,   327,   328,   329,     0,   330,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   331,   332,   333,   702,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,   346,   347,   348,     0,   349,     0,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
       0,     0,   359,     0,     0,     0,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,   368,   369,     0,   370,
     371,     0,   372,   373,   374,     0,     0,   375,     0,   376,
       0,   377,   378,     0,   379,   380,     0,     0,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,     0,     0,     0,   393,   394,   395,   396,     0,
       0,     0,   397,     0,     0,     0,   398,     0,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,     0,     0,
       0,     0,     0,     0,   408,   409,     0,   410,     0,     0,
       0,   411,     0,     0,   412,   413,   414,     0,     0,     0,
     415,   416,     0,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,   433,     0,     0,   434,   435,     0,
     436,   437,   438,   439,   440,     0,     0,     0,     0,     0,
     441,   442,     0,     0,     0,   443,   444,   445,   446,  1808,
     447,   448,     0,   449,   450,     0,   451,   452,     0,     0,
     453,     0,     0,   454,     0,   455,     0,   456,   457,   458,
       0,     0,     0,     0,     0,     0,   459,     0,     0,   460,
       0,     0,     0,   461,   462,   463,   464,     0,     0,     0,
       0,     0,     0,   465,   466,     0,   467,   468,   469,     0,
     135,   470,   136,   137,   138,   139,   140,     0,     0,     0,
       0,     0,   141,     0,     0,   142,     0,   143,   144,   145,
     146,   147,   148,   149,     0,   150,     0,     0,  2720,   151,
       0,     0,     0,   152,     0,     0,   153,   154,   155,     0,
     156,     0,   157,   158,     0,     0,   159,     0,     0,   160,
     161,     0,   162,   163,   164,     0,   165,     0,   166,   167,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,     0,   183,   184,
       0,   185,   186,   187,   188,   189,     0,   190,     0,     0,
     191,     0,     0,   192,     0,     0,     0,   193,     0,     0,
       0,   194,   195,   196,     0,     0,   197,     0,     0,     0,
       0,   198,   199,     0,     0,     0,  2721,   200,     0,   201,
       0,     0,     0,   202,     0,   203,   204,   205,   206,     0,
       0,     0,   207,     0,     0,   208,   209,   210,     0,     0,
       0,   211,     0,   212,   213,     0,   214,   215,   216,     0,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,     0,     0,   232,     0,     0,     0,   233,     0,
     234,     0,   235,     0,   236,   237,   238,   239,   240,     0,
     241,     0,     0,     0,   242,   243,     0,   244,     0,     0,
     245,   246,     0,     0,     0,   247,   248,   249,   250,     0,
       0,   251,   252,   253,     0,   254,     0,   255,     0,     0,
       0,     0,   256,   257,     0,     0,     0,   258,     0,   259,
     260,     0,   261,   262,     0,     0,     0,   263,     0,     0,
     264,   265,     0,     0,   266,     0,     0,   267,   268,   596,
       0,     0,     0,     0,   269,   270,     0,   271,     0,   272,
       0,   273,   274,     0,     0,     0,     0,     0,     0,     0,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,     0,   288,   289,   290,     0,   291,   292,
     293,   294,     0,   295,   296,     0,     0,     0,     0,   297,
     298,   299,   300,   301,   302,     0,     0,   303,   304,     0,
     305,     0,   306,     0,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,     0,   316,   317,     0,     0,   318,
     319,   320,   321,     0,     0,     0,   322,   323,     0,     0,
       0,     0,   324,   325,   326,     0,   327,   328,   329,     0,
     330,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     331,   332,   333,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,   347,
     348,     0,   349,     0,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,     0,     0,   359,     0,     0,     0,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
     368,   369,     0,   370,   371,     0,   372,   373,   374,     0,
       0,   375,     0,   376,     0,   377,   378,     0,   379,   380,
       0,     0,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,     0,     0,     0,   393,
     394,   395,   396,     0,     0,     0,   397,     0,     0,     0,
     398,     0,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,     0,     0,     0,     0,     0,     0,   408,   409,
       0,   410,     0,     0,     0,   411,     0,     0,   412,   413,
     414,     0,     0,     0,   415,   416,     0,   417,   418,   419,
     420,   421,   422,     0,     0,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     132,   434,   435,     0,   436,   437,   438,   439,   440,     0,
       0,     0,     0,     0,   441,   442,     0,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,   449,   450,     0,
     451,   452,     0,     0,   453,     0,     0,   454,     0,   455,
       0,   456,   457,   458,     0,     0,     0,     0,     0,     0,
     459,     0,     0,   460,     0,     0,     0,   461,   462,   463,
     464,     0,     0,     0,     0,     0,     0,   465,   466,     0,
     467,   468,   469,     0,   135,   470,   136,   137,   138,   139,
     140,     0,     0,     0,     0,     0,   141,     0,     0,   142,
       0,   143,   144,   145,   146,   147,   148,   149,     0,   150,
       0,     0,  2557,   151,     0,     0,     0,   152,     0,     0,
     153,   154,   155,     0,   156,     0,   157,   158,     0,     0,
     159,     0,     0,   160,   161,     0,   162,   163,   164,     0,
     165,     0,   166,   167,   168,   169,   170,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,     0,   185,   186,   187,   188,   189,
       0,   190,     0,     0,   191,     0,     0,   192,     0,     0,
       0,   193,     0,     0,     0,   194,   195,   196,     0,     0,
     197,     0,     0,     0,     0,   198,   199,     0,     0,     0,
    2712,   200,     0,   201,     0,     0,     0,   202,     0,   203,
     204,   205,   206,     0,     0,     0,   207,     0,     0,   208,
     209,   210,     0,     0,     0,   211,     0,   212,   213,     0,
     214,   215,   216,     0,     0,   217,   218,     0,   219,   220,
     221,   222,   223,     0,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,     0,     0,   232,     0,
       0,     0,   233,     0,   234,     0,   235,     0,   236,   237,
     238,   239,   240,     0,   241,     0,     0,     0,   242,   243,
       0,   244,     0,     0,   245,   246,     0,     0,     0,   247,
     248,   249,   250,     0,     0,   251,   252,   253,     0,   254,
       0,   255,     0,     0,     0,     0,   256,   257,     0,     0,
       0,   258,     0,   259,   260,     0,   261,   262,     0,     0,
       0,   263,     0,     0,   264,   265,     0,     0,   266,     0,
       0,   267,   268,   596,     0,     0,     0,     0,   269,   270,
       0,   271,     0,   272,     0,   273,   274,     0,     0,     0,
       0,     0,     0,     0,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,     0,   288,   289,
     290,     0,   291,   292,   293,   294,     0,   295,   296,     0,
       0,     0,     0,   297,   298,   299,   300,   301,   302,     0,
       0,   303,   304,     0,   305,     0,   306,     0,   307,   308,
     309,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,     0,   318,   319,   320,   321,     0,     0,     0,
     322,   323,     0,     0,     0,     0,   324,   325,   326,     0,
     327,   328,   329,     0,   330,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   331,   332,   333,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,   346,   347,   348,     0,   349,     0,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,     0,   411,
       0,     0,   412,   413,   414,     0,     0,     0,   415,   416,
       0,   417,   418,   419,   420,   421,   422,     0,     0,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     431,   432,   433,     0,   132,   434,   435,     0,   436,   437,
     438,   439,   440,     0,     0,     0,     0,     0,   441,   442,
       0,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,   449,   450,     0,   451,   452,     0,     0,   453,     0,
       0,   454,     0,   455,     0,   456,   457,   458,     0,     0,
       0,     0,     0,     0,   459,     0,     0,   460,     0,     0,
       0,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,   468,   469,     0,   135,   470,
     136,   137,   138,   139,   140,     0,     0,     0,     0,     0,
     141,     0,     0,   142,     0,   143,   144,   145,   146,   147,
     148,   149,     0,   150,     0,     0,     0,   151,     0,     0,
       0,   152,     0,     0,   153,   154,   155,     0,   156,     0,
     157,   158,     0,     0,   159,     0,     0,   160,   161,     0,
     162,   163,   164,     0,   165,     0,   166,   167,   168,   169,
     170,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,     0,   185,
     186,   187,   188,   189,     0,   190,     0,     0,   191,     0,
       0,   192,     0,   956,     0,   193,     0,     0,     0,   194,
     195,   196,     0,     0,   197,     0,     0,     0,     0,   198,
     199,     0,     0,     0,     0,   200,     0,   201,     0,     0,
       0,   202,     0,   203,   204,   205,   206,     0,     0,     0,
     207,     0,     0,   208,   209,   210,     0,     0,     0,   211,
       0,   212,   213,     0,   214,   215,   216,     0,     0,   217,
     218,     0,   219,   220,   221,   222,   223,     0,     0,   224,
     225,   226,     0,     0,   227,   228,     0,   229,   230,   231,
       0,     0,   232,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,   240,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,     0,   245,   246,
       0,     0,     0,   247,   248,   249,   250,     0,     0,   251,
     252,   253,     0,   254,     0,   255,     0,     0,     0,     0,
     256,   257,     0,     0,     0,   258,     0,   259,   260,     0,
     261,   262,     0,     0,     0,   263,     0,     0,   264,   265,
       0,     0,   266,     0,     0,   267,   268,   596,     0,     0,
       0,     0,   269,   270,     0,   271,     0,   272,     0,   273,
     274,     0,     0,     0,     0,     0,     0,     0,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,     0,   288,   289,   290,     0,   291,   292,   293,   294,
       0,   295,   296,     0,     0,     0,     0,   297,   298,   299,
     300,   301,   302,     0,     0,   303,   304,     0,   305,     0,
     306,     0,   307,   308,   309,   310,   311,   312,   313,   314,
     315,     0,     0,   316,   317,     0,     0,   318,   319,   320,
     321,     0,     0,     0,   322,   323,     0,     0,     0,     0,
     324,   325,   326,     0,   327,   328,   329,     0,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   331,   332,
     333,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,   347,   348,     0,
     349,     0,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,     0,     0,   359,     0,     0,     0,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,   368,   369,
       0,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,   376,     0,   377,   378,     0,   379,   380,     0,     0,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,     0,     0,     0,   393,   394,   395,
     396,     0,     0,     0,   397,     0,     0,     0,   398,     0,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
       0,     0,     0,     0,     0,     0,   408,   409,     0,   410,
       0,     0,     0,   411,     0,     0,   412,   413,   414,     0,
       0,     0,   415,   416,     0,   417,   418,   419,   420,   421,
     422,     0,     0,   423,   424,   425,   426,     0,   427,   428,
       0,     0,   429,   430,   431,   432,   433,     0,   132,   434,
     435,     0,   436,   437,   438,   439,   440,     0,     0,     0,
       0,     0,   441,   442,     0,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,   449,   450,     0,   451,   452,
       0,     0,   453,     0,     0,   454,     0,   455,     0,   456,
     457,   458,     0,     0,     0,     0,     0,     0,   459,     0,
       0,   460,     0,     0,     0,   461,   462,   463,   464,     0,
       0,     0,     0,     0,     0,   465,   466,     0,   467,   468,
     469,     0,   135,   470,   136,   137,   138,   139,   140,  1336,
       0,     0,     0,     0,   141,     0,     0,   142,     0,   143,
     144,   145,   146,   147,   148,   149,     0,   150,     0,     0,
       0,   151,     0,     0,     0,   152,     0,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,     0,
       0,   160,   161,     0,   162,   163,   164,     0,   165,     0,
     166,   167,   168,   169,   170,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,     0,   185,   186,   187,   188,   189,     0,   190,
       0,     0,   191,     0,     0,   192,     0,     0,     0,   193,
       0,     0,     0,   194,   195,   196,     0,     0,   197,     0,
       0,     0,     0,   198,   199,     0,     0,     0,     0,   200,
       0,   201,     0,     0,     0,   202,     0,   203,   204,   205,
     206,     0,     0,     0,   207,     0,     0,   208,   209,   210,
       0,     0,     0,   211,     0,   212,   213,     0,   214,   215,
     216,     0,     0,   217,   218,     0,   219,   220,   221,   222,
     223,     0,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,     0,     0,   232,     0,     0,     0,
     233,     0,   234,     0,   235,     0,   236,   237,   238,   239,
     240,     0,   241,     0,     0,     0,   242,   243,     0,   244,
       0,     0,   245,   246,     0,     0,     0,   247,   248,   249,
     250,     0,     0,   251,   252,   253,     0,   254,     0,   255,
       0,     0,     0,     0,   256,   257,     0,     0,     0,   258,
       0,   259,   260,     0,   261,   262,     0,     0,     0,   263,
       0,     0,   264,   265,     0,     0,   266,     0,     0,   267,
     268,   596,     0,     0,     0,     0,   269,   270,     0,   271,
       0,   272,     0,   273,   274,     0,     0,     0,     0,     0,
       0,     0,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,     0,   288,   289,   290,     0,
     291,   292,   293,   294,     0,   295,   296,     0,     0,     0,
       0,   297,   298,   299,   300,   301,   302,     0,     0,   303,
     304,     0,   305,     0,   306,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     0,     0,   316,   317,     0,
       0,   318,   319,   320,   321,     0,     0,     0,   322,   323,
       0,     0,     0,     0,   324,   325,   326,     0,   327,   328,
     329,     0,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   332,   333,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,   348,     0,   349,     0,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,     0,     0,   359,     0,
       0,     0,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,   368,   369,     0,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,   376,     0,   377,   378,     0,
     379,   380,     0,     0,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,     0,     0,
       0,   393,   394,   395,   396,     0,     0,     0,   397,     0,
       0,     0,   398,     0,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,     0,     0,     0,     0,     0,     0,
     408,   409,     0,   410,     0,     0,     0,   411,     0,     0,
     412,   413,   414,     0,     0,     0,   415,   416,     0,   417,
     418,   419,   420,   421,   422,     0,     0,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,   132,   434,   435,     0,   436,   437,   438,   439,
     440,     0,     0,     0,     0,     0,   441,   442,     0,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,   449,
     450,     0,   451,   452,     0,     0,   453,     0,     0,   454,
       0,   455,     0,   456,   457,   458,     0,     0,     0,     0,
       0,     0,   459,     0,     0,   460,     0,     0,     0,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,   468,   469,     0,   135,   470,   136,   137,
     138,   139,   140,     0,     0,     0,     0,     0,   141,     0,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,   150,     0,     0,     0,   151,   934,     0,     0,   152,
       0,     0,   153,   154,   155,     0,   156,     0,   157,   158,
       0,     0,   159,     0,     0,   160,   161,     0,   162,   163,
     164,     0,   165,     0,   166,   167,   168,   169,   170,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,     0,   185,   186,   187,
     188,   189,     0,   190,     0,     0,   191,     0,     0,   192,
       0,     0,     0,   193,     0,     0,     0,   194,   195,   196,
       0,     0,   197,     0,     0,     0,     0,   198,   199,     0,
       0,     0,     0,   200,     0,   201,     0,     0,     0,   202,
       0,   203,   204,   205,   206,     0,     0,     0,   207,     0,
       0,   208,   209,   210,     0,     0,     0,   211,     0,   212,
     213,     0,   214,   215,   216,     0,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,     0,     0,
     232,     0,     0,     0,   233,     0,   234,     0,   235,     0,
     236,   237,   238,   239,   240,     0,   241,     0,     0,     0,
     242,   243,     0,   244,   935,     0,   245,   246,     0,     0,
       0,   247,   248,   249,   250,     0,     0,   251,   252,   253,
       0,   254,     0,   255,     0,     0,     0,     0,   256,   257,
       0,     0,     0,   258,     0,   259,   260,     0,   261,   262,
       0,     0,     0,   263,     0,     0,   264,   265,     0,     0,
     266,     0,     0,   267,   268,     0,     0,     0,     0,     0,
     269,   270,     0,   271,     0,   272,     0,   273,   274,     0,
       0,     0,     0,     0,     0,     0,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,     0,
     288,   289,   290,     0,   291,   292,   293,   294,     0,   295,
     296,     0,     0,     0,     0,   297,   298,   299,   300,   301,
     302,     0,     0,   303,   304,     0,   305,     0,   306,     0,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
       0,   316,   317,     0,     0,   318,   319,   320,   321,     0,
       0,     0,   322,   323,     0,     0,     0,     0,   324,   325,
     326,     0,   327,   328,   329,     0,   330,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   331,   332,   333,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,   346,   347,   348,     0,   349,     0,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
       0,     0,   359,     0,     0,     0,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,   368,   369,     0,   370,
     371,     0,   372,   373,   374,     0,     0,   375,     0,   376,
       0,   377,   378,     0,   379,   380,     0,     0,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,     0,     0,     0,   393,   394,   395,   396,     0,
       0,     0,   397,     0,     0,     0,   398,     0,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,     0,     0,
       0,     0,     0,     0,   408,   409,     0,   410,     0,     0,
       0,   411,     0,     0,   412,   413,   414,     0,     0,     0,
     415,   416,     0,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,   433,     0,   936,   434,   435,     0,
     436,   437,   438,   439,   440,     0,     0,     0,     0,     0,
     441,   442,     0,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,   449,   450,     0,   451,   452,     0,     0,
     453,     0,     0,   454,     0,   455,     0,   456,   457,   458,
       0,     0,     0,     0,     0,     0,   459,     0,     0,   460,
       0,     0,     0,   461,   462,   463,   464,     0,     0,     0,
       0,     0,     0,   465,   466,     0,   467,   468,   469,     0,
     135,   470,   136,   137,   138,   139,   140,     0,     0,     0,
       0,     0,   141,     0,     0,   142,     0,   143,   144,   145,
     146,   147,   148,   149,     0,   150,     0,     0,  2557,   151,
       0,     0,     0,   152,     0,     0,   153,   154,   155,     0,
     156,     0,   157,   158,     0,     0,   159,     0,     0,   160,
     161,     0,   162,   163,   164,     0,   165,     0,   166,   167,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,     0,   183,   184,
       0,   185,   186,   187,   188,   189,     0,   190,     0,     0,
     191,     0,     0,   192,     0,     0,     0,   193,     0,     0,
       0,   194,   195,   196,     0,     0,   197,     0,     0,     0,
       0,   198,   199,     0,     0,     0,     0,   200,     0,   201,
       0,     0,     0,   202,     0,   203,   204,   205,   206,     0,
       0,     0,   207,     0,     0,   208,   209,   210,     0,     0,
       0,   211,     0,   212,   213,     0,   214,   215,   216,     0,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,     0,     0,   232,     0,     0,     0,   233,     0,
     234,     0,   235,     0,   236,   237,   238,   239,   240,     0,
     241,     0,     0,     0,   242,   243,     0,   244,     0,     0,
     245,   246,     0,     0,     0,   247,   248,   249,   250,     0,
       0,   251,   252,   253,     0,   254,     0,   255,     0,     0,
       0,     0,   256,   257,     0,     0,     0,   258,     0,   259,
     260,     0,   261,   262,     0,     0,     0,   263,     0,     0,
     264,   265,     0,     0,   266,     0,     0,   267,   268,   596,
       0,     0,     0,     0,   269,   270,     0,   271,     0,   272,
       0,   273,   274,     0,     0,     0,     0,     0,     0,     0,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,     0,   288,   289,   290,     0,   291,   292,
     293,   294,     0,   295,   296,     0,     0,     0,     0,   297,
     298,   299,   300,   301,   302,     0,     0,   303,   304,     0,
     305,     0,   306,     0,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,     0,   316,   317,     0,     0,   318,
     319,   320,   321,     0,     0,     0,   322,   323,     0,     0,
       0,     0,   324,   325,   326,     0,   327,   328,   329,     0,
     330,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     331,   332,   333,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,   347,
     348,     0,   349,     0,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,     0,     0,   359,     0,     0,     0,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
     368,   369,     0,   370,   371,     0,   372,   373,   374,     0,
       0,   375,     0,   376,     0,   377,   378,     0,   379,   380,
       0,     0,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,     0,     0,     0,   393,
     394,   395,   396,     0,     0,     0,   397,     0,     0,     0,
     398,     0,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,     0,     0,     0,     0,     0,     0,   408,   409,
       0,   410,     0,     0,     0,   411,     0,     0,   412,   413,
     414,     0,     0,     0,   415,   416,     0,   417,   418,   419,
     420,   421,   422,     0,     0,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     132,   434,   435,     0,   436,   437,   438,   439,   440,     0,
       0,     0,     0,     0,   441,   442,     0,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,   449,   450,     0,
     451,   452,     0,     0,   453,     0,     0,   454,     0,   455,
       0,   456,   457,   458,     0,     0,     0,     0,     0,     0,
     459,     0,     0,   460,     0,     0,     0,   461,   462,   463,
     464,     0,     0,     0,     0,     0,     0,   465,   466,     0,
     467,   468,   469,     0,   135,   470,   136,   137,   138,   139,
     140,     0,     0,     0,     0,     0,   141,     0,     0,   142,
       0,   143,   144,   145,   146,   147,   148,   149,     0,   150,
       0,     0,     0,   151,     0,     0,     0,   152,     0,     0,
     153,   154,   155,     0,   156,     0,   157,   158,     0,     0,
     159,     0,     0,   160,   161,     0,   162,   163,   164,     0,
     165,     0,   166,   167,   168,   169,   170,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,     0,   185,   186,   187,   188,   189,
       0,   190,     0,     0,   191,     0,     0,   192,     0,     0,
       0,   193,     0,     0,     0,   194,   195,   196,     0,     0,
     197,     0,     0,     0,     0,   198,   199,     0,     0,     0,
    2760,   200,     0,   201,     0,     0,     0,   202,     0,   203,
     204,   205,   206,     0,     0,     0,   207,     0,     0,   208,
     209,   210,     0,     0,     0,   211,     0,   212,   213,     0,
     214,   215,   216,     0,     0,   217,   218,     0,   219,   220,
     221,   222,   223,     0,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,     0,     0,   232,     0,
       0,     0,   233,     0,   234,     0,   235,     0,   236,   237,
     238,   239,   240,     0,   241,     0,     0,     0,   242,   243,
       0,   244,     0,     0,   245,   246,     0,     0,     0,   247,
     248,   249,   250,     0,     0,   251,   252,   253,     0,   254,
       0,   255,     0,     0,     0,     0,   256,   257,     0,     0,
       0,   258,     0,   259,   260,     0,   261,   262,     0,     0,
       0,   263,     0,     0,   264,   265,     0,     0,   266,     0,
       0,   267,   268,   596,     0,     0,     0,     0,   269,   270,
       0,   271,     0,   272,     0,   273,   274,     0,     0,     0,
       0,     0,     0,     0,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,     0,   288,   289,
     290,     0,   291,   292,   293,   294,     0,   295,   296,     0,
       0,     0,     0,   297,   298,   299,   300,   301,   302,     0,
       0,   303,   304,     0,   305,     0,   306,     0,   307,   308,
     309,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,     0,   318,   319,   320,   321,     0,     0,     0,
     322,   323,     0,     0,     0,     0,   324,   325,   326,     0,
     327,   328,   329,     0,   330,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   331,   332,   333,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,   346,   347,   348,     0,   349,     0,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,     0,   411,
       0,     0,   412,   413,   414,     0,     0,     0,   415,   416,
       0,   417,   418,   419,   420,   421,   422,     0,     0,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     431,   432,   433,     0,   132,   434,   435,     0,   436,   437,
     438,   439,   440,     0,     0,     0,     0,     0,   441,   442,
       0,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,   449,   450,     0,   451,   452,     0,     0,   453,     0,
       0,   454,     0,   455,     0,   456,   457,   458,     0,     0,
       0,     0,     0,     0,   459,     0,     0,   460,     0,     0,
       0,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,   468,   469,     0,   135,   470,
     136,   137,   138,   139,   140,     0,     0,     0,     0,     0,
     141,     0,     0,   142,     0,   143,   144,   145,   146,   147,
     148,   149,     0,   150,     0,     0,     0,   151,     0,     0,
       0,   152,     0,     0,   153,   154,   155,     0,   156,     0,
     157,   158,     0,     0,   159,     0,     0,   160,   161,     0,
     162,   163,   164,     0,   165,     0,   166,   167,   168,   169,
     170,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,     0,   185,
     186,   187,   188,   189,     0,   190,     0,     0,   191,     0,
       0,   192,     0,     0,     0,   193,     0,     0,     0,   194,
     195,   196,     0,     0,   197,     0,     0,     0,     0,   198,
     199,     0,     0,     0,     0,   200,     0,   201,     0,     0,
       0,   202,     0,   203,   204,   205,   206,     0,     0,     0,
     207,     0,     0,   208,   209,   210,     0,     0,     0,   211,
       0,   212,   213,     0,   214,   215,   216,     0,     0,   217,
     218,     0,   219,   220,   221,   222,   223,     0,     0,   224,
     225,   226,     0,     0,   227,   228,     0,   229,   230,   231,
       0,     0,   232,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,   240,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,     0,   245,   246,
       0,     0,     0,   247,   248,   249,   250,     0,     0,   251,
     252,   253,     0,   254,     0,   255,     0,     0,     0,     0,
     256,   257,     0,     0,     0,   258,     0,   259,   260,     0,
     261,   262,     0,     0,     0,   263,     0,     0,   264,   265,
       0,     0,   266,     0,     0,   267,   268,   596,     0,     0,
       0,     0,   269,   270,     0,   271,     0,   272,     0,   273,
     274,     0,     0,     0,     0,     0,     0,     0,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,     0,   288,   289,   290,     0,   291,   292,   293,   294,
       0,   295,   296,     0,     0,     0,     0,   297,   298,   299,
     300,   301,   302,     0,     0,   303,   304,     0,   305,     0,
     306,     0,   307,   308,   309,   310,   311,   312,   313,   314,
     315,     0,     0,   316,   317,     0,     0,   318,   319,   320,
     321,     0,     0,     0,   322,   323,     0,     0,     0,     0,
     324,   325,   326,     0,   327,   328,   329,     0,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   331,   332,
     333,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,   347,   348,     0,
     349,     0,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,     0,     0,   359,     0,     0,     0,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,   368,   369,
       0,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,   376,     0,   377,   378,     0,   379,   380,     0,     0,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,     0,     0,     0,   393,   394,   395,
     396,     0,     0,     0,   397,     0,     0,     0,   398,     0,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
       0,     0,     0,     0,     0,     0,   408,   409,     0,   410,
       0,     0,     0,   411,     0,     0,   412,   413,   414,     0,
       0,     0,   415,   416,     0,   417,   418,   419,   420,   421,
     422,     0,     0,   423,   424,   425,   426,     0,   427,   428,
       0,     0,   429,   430,   431,   432,   433,     0,   132,   434,
     435,     0,   436,   437,   438,   439,   440,     0,     0,     0,
       0,     0,   441,   442,     0,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,   449,   450,     0,   451,   452,
       0,     0,   453,     0,     0,   454,     0,   455,     0,   456,
     457,   458,     0,     0,     0,     0,     0,     0,   459,     0,
       0,   460,     0,     0,     0,   461,   462,   463,   464,     0,
       0,     0,     0,     0,     0,   465,   466,     0,   467,   468,
     469,     0,   135,   470,   136,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,  2702,     0,   142,     0,   143,
     144,   145,   146,   147,   148,   149,     0,   150,     0,     0,
       0,   151,     0,     0,     0,   152,     0,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,     0,
       0,   160,   161,     0,   162,   163,   164,     0,   165,     0,
     166,   167,   168,   169,   170,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,     0,   185,   186,   187,   188,   189,     0,   190,
       0,     0,   191,     0,     0,   192,     0,     0,     0,   193,
       0,     0,     0,   194,   195,   196,     0,     0,   197,     0,
       0,     0,     0,   198,   199,     0,     0,     0,     0,   200,
       0,   201,     0,     0,     0,   202,     0,   203,   204,   205,
     206,     0,     0,     0,   207,     0,     0,   208,   209,   210,
       0,     0,     0,   211,     0,   212,   213,     0,   214,   215,
     216,     0,     0,   217,   218,     0,   219,   220,   221,   222,
     223,     0,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,     0,     0,   232,     0,     0,     0,
     233,     0,   234,     0,   235,     0,   236,   237,   238,   239,
     240,     0,   241,     0,     0,     0,   242,   243,     0,   244,
       0,     0,   245,   246,     0,     0,     0,   247,   248,   249,
     250,     0,     0,   251,   252,   253,     0,   254,     0,   255,
       0,     0,     0,     0,   256,   257,     0,     0,     0,   258,
       0,   259,   260,     0,   261,   262,     0,     0,     0,   263,
       0,     0,   264,   265,     0,     0,   266,     0,     0,   267,
     268,     0,     0,     0,     0,     0,   269,   270,     0,   271,
       0,   272,     0,   273,   274,     0,     0,     0,     0,     0,
       0,     0,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,     0,   288,   289,   290,     0,
     291,   292,   293,   294,     0,   295,   296,     0,     0,     0,
       0,   297,   298,   299,   300,   301,   302,     0,     0,   303,
     304,     0,   305,     0,   306,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     0,     0,   316,   317,     0,
       0,   318,   319,   320,   321,     0,     0,     0,   322,   323,
       0,     0,     0,     0,   324,   325,   326,     0,   327,   328,
     329,     0,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   332,   333,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,   348,     0,   349,     0,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,     0,     0,   359,     0,
       0,     0,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,   368,   369,     0,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,   376,     0,   377,   378,     0,
     379,   380,     0,     0,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,     0,     0,
       0,   393,   394,   395,   396,     0,     0,     0,   397,     0,
       0,     0,   398,     0,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,     0,     0,     0,     0,     0,     0,
     408,   409,     0,   410,     0,     0,     0,   411,     0,     0,
     412,   413,   414,     0,     0,     0,   415,   416,     0,   417,
     418,   419,   420,   421,   422,     0,     0,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,   132,   434,   435,     0,   436,   437,   438,   439,
     440,     0,     0,     0,     0,     0,   441,   442,     0,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,   449,
     450,     0,   451,   452,     0,     0,   453,     0,     0,   454,
       0,   455,     0,   456,   457,   458,     0,     0,     0,     0,
       0,     0,   459,     0,     0,   460,     0,     0,     0,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,   468,   469,     0,   135,   470,   136,   137,
     138,   139,   140,     0,     0,     0,     0,     0,   141,     0,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,   150,     0,     0,     0,   151,     0,     0,     0,   152,
       0,     0,   153,   154,   155,     0,   156,     0,   157,   158,
       0,     0,   159,     0,     0,   160,   161,     0,   162,   163,
     164,     0,   165,     0,   166,   167,   168,   169,   170,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,     0,   185,   186,   187,
     188,   189,  4179,   190,     0,     0,   191,     0,     0,   192,
       0,     0,     0,   193,     0,     0,     0,   194,   195,   196,
       0,     0,   197,     0,     0,     0,     0,   198,   199,     0,
       0,     0,     0,   200,     0,   201,     0,     0,     0,   202,
       0,   203,   204,   205,   206,     0,     0,     0,   207,     0,
       0,   208,   209,   210,     0,     0,     0,   211,     0,   212,
     213,     0,   214,   215,   216,     0,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,  4180,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,     0,     0,
     232,     0,     0,     0,   233,     0,   234,     0,   235,     0,
     236,   237,   238,   239,   240,     0,   241,     0,     0,     0,
     242,   243,     0,   244,     0,     0,   245,   246,     0,     0,
       0,   247,   248,   249,   250,     0,     0,   251,   252,   253,
       0,   254,     0,   255,     0,     0,     0,     0,   256,   257,
       0,     0,     0,   258,     0,   259,   260,     0,   261,   262,
       0,     0,     0,   263,     0,     0,   264,   265,     0,     0,
     266,     0,     0,   267,   268,     0,     0,     0,     0,     0,
     269,   270,     0,   271,     0,   272,     0,   273,   274,     0,
       0,     0,     0,     0,     0,     0,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,     0,
     288,   289,   290,     0,   291,   292,   293,   294,     0,   295,
     296,     0,     0,     0,     0,   297,   298,   299,   300,   301,
     302,     0,     0,   303,   304,     0,   305,     0,   306,     0,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
       0,   316,   317,     0,     0,   318,   319,   320,   321,     0,
       0,     0,   322,   323,     0,     0,     0,     0,   324,   325,
     326,     0,   327,   328,   329,     0,   330,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   331,   332,   333,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,   346,   347,   348,     0,   349,     0,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
       0,     0,   359,     0,     0,     0,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,   368,   369,     0,   370,
     371,     0,   372,   373,   374,     0,     0,   375,     0,   376,
       0,   377,   378,     0,   379,   380,     0,     0,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,     0,     0,     0,   393,   394,   395,   396,     0,
       0,     0,   397,     0,     0,     0,   398,     0,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,     0,     0,
       0,     0,     0,     0,   408,   409,     0,   410,     0,     0,
       0,   411,     0,     0,   412,   413,   414,     0,     0,     0,
     415,   416,     0,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,   433,     0,     0,   434,   435,     0,
     436,   437,   438,   439,   440,     0,     0,     0,     0,     0,
     441,   442,     0,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,   449,   450,     0,   451,   452,     0,     0,
     453,     0,     0,   454,     0,   455,     0,   456,   457,   458,
       0,     0,     0,     0,     0,     0,   459,     0,     0,   460,
       0,     0,     0,   461,   462,   463,   464,     0,     0,     0,
       0,     0,     0,   465,   466,     0,   467,   468,   469,     0,
     135,   470,   136,   137,   138,   139,   140,     0,     0,     0,
       0,     0,   141,     0,     0,   142,     0,   143,   144,   145,
     146,   147,   148,   149,     0,   150,     0,     0,     0,   151,
       0,     0,     0,   152,     0,     0,   153,   154,   155,     0,
     156,     0,   157,   158,     0,     0,   159,     0,     0,   160,
     161,     0,   162,   163,   164,     0,   165,     0,   166,   167,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,     0,   183,   184,
       0,   185,   186,   187,   188,   189,     0,   190,     0,     0,
     191,     0,     0,   192,     0,     0,     0,   193,     0,     0,
       0,   194,   195,   196,     0,     0,   197,     0,     0,     0,
       0,   198,   199,     0,     0,     0,     0,   200,     0,   201,
       0,     0,     0,   202,     0,   203,   204,   205,   206,     0,
       0,     0,   207,     0,     0,   208,   209,   210,     0,     0,
       0,   211,     0,   212,   213,     0,   214,   215,   216,     0,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,     0,     0,   232,     0,     0,     0,   233,     0,
     234,     0,   235,     0,   236,   237,   238,   239,   240,     0,
     241,     0,     0,     0,   242,   243,     0,   244,     0,     0,
     245,   246,     0,     0,     0,   247,   248,   249,   250,     0,
       0,   251,   252,   253,     0,   254,     0,   255,     0,     0,
       0,     0,   256,   257,     0,     0,     0,   258,     0,   259,
     260,     0,   261,   262,     0,     0,     0,   263,     0,     0,
     264,   265,     0,     0,   266,     0,     0,   267,   268,     0,
       0,     0,     0,     0,   269,   270,     0,   271,     0,   272,
       0,   273,   274,     0,     0,     0,     0,     0,     0,     0,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,     0,   288,   289,   290,     0,   291,   292,
     293,   294,     0,   295,   296,     0,     0,     0,     0,   297,
     298,   299,   300,   301,   302,     0,     0,   303,   304,     0,
     305,     0,   306,     0,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,     0,   316,   317,     0,     0,   318,
     319,   320,   321,     0,     0,     0,   322,   323,     0,     0,
       0,     0,   324,   325,   326,     0,   327,   328,   329,     0,
     330,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     331,   332,   333,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,   347,
     348,     0,   349,     0,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,     0,     0,   359,     0,     0,     0,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
     368,   369,     0,   370,   371,     0,   372,   373,   374,     0,
       0,   375,     0,   376,     0,   377,   378,     0,   379,   380,
       0,     0,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,     0,     0,     0,   393,
     394,   395,   396,     0,     0,     0,   397,     0,     0,     0,
     398,     0,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,     0,     0,     0,   543,     0,     0,   408,   409,
       0,   410,     0,     0,     0,   411,     0,     0,   412,   413,
     414,     0,     0,     0,   415,   416,     0,   417,   418,   419,
     420,   421,   422,     0,     0,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
       0,   434,   435,     0,   436,   437,   438,   439,   440,     0,
       0,     0,     0,     0,   441,   442,     0,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,   449,   450,     0,
     451,   452,     0,     0,   453,     0,     0,   454,     0,   455,
       0,   456,   457,   458,     0,     0,     0,     0,     0,     0,
     459,     0,     0,   460,     0,     0,     0,   461,   462,   463,
     464,     0,     0,     0,     0,     0,     0,   465,   466,     0,
     467,   468,   469,     0,   135,   470,   136,   137,   138,   139,
     140,     0,     0,     0,     0,     0,   141,     0,     0,   142,
       0,   143,   144,   145,   146,   147,   148,   149,     0,   150,
       0,     0,     0,   151,     0,     0,     0,   152,     0,     0,
     153,   154,   155,     0,   156,     0,   157,   158,     0,     0,
     159,     0,     0,   160,   161,     0,   162,   163,   164,     0,
     165,     0,   166,   167,   168,   169,   170,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,     0,   185,   186,   187,   188,   189,
       0,   190,     0,     0,   191,     0,     0,   192,     0,     0,
       0,   193,     0,     0,     0,   194,   195,   196,     0,     0,
     197,     0,     0,     0,     0,   198,   199,     0,     0,     0,
       0,   200,     0,   201,     0,     0,     0,   202,     0,   203,
     204,   205,   206,     0,     0,     0,   207,     0,     0,   208,
     209,   210,     0,     0,     0,   211,     0,   212,   213,     0,
     214,   215,   216,     0,     0,   217,   218,     0,   219,   220,
     221,   222,   223,     0,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,     0,     0,   232,     0,
       0,     0,   233,  1033,   234,     0,   235,     0,   236,   237,
     238,   239,   240,     0,   241,     0,     0,     0,   242,   243,
       0,   244,     0,     0,   245,   246,     0,     0,     0,   247,
     248,   249,   250,     0,     0,   251,   252,   253,     0,   254,
       0,   255,     0,     0,     0,     0,   256,   257,     0,     0,
       0,   258,     0,   259,   260,     0,   261,   262,     0,     0,
       0,   263,     0,     0,   264,   265,     0,     0,   266,     0,
       0,   267,   268,     0,     0,     0,     0,     0,   269,   270,
       0,   271,     0,   272,     0,   273,   274,     0,     0,     0,
       0,     0,     0,     0,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,     0,   288,   289,
     290,     0,   291,   292,   293,   294,     0,   295,   296,     0,
       0,     0,     0,   297,   298,   299,   300,   301,   302,     0,
       0,   303,   304,     0,   305,     0,   306,     0,   307,   308,
     309,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,     0,   318,   319,   320,   321,     0,     0,     0,
     322,   323,     0,     0,     0,     0,   324,   325,   326,     0,
     327,   328,   329,     0,   330,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   331,   332,   333,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,   346,   347,   348,     0,   349,     0,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,     0,   411,
       0,     0,   412,   413,   414,     0,     0,     0,   415,   416,
       0,   417,   418,   419,   420,   421,   422,     0,     0,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     431,   432,   433,     0,     0,   434,   435,     0,   436,   437,
     438,   439,   440,     0,     0,     0,     0,     0,   441,   442,
       0,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,   449,   450,     0,   451,   452,     0,     0,   453,     0,
       0,   454,     0,   455,     0,   456,   457,   458,     0,     0,
       0,     0,     0,     0,   459,     0,     0,   460,     0,     0,
       0,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,   468,   469,     0,   135,   470,
     136,   137,   138,   139,   140,     0,     0,     0,     0,     0,
     141,     0,     0,   142,     0,   143,   144,   145,   146,   147,
     148,   149,     0,   150,     0,     0,     0,   151,     0,     0,
       0,   152,     0,     0,   153,   154,   155,     0,   156,     0,
     157,   158,     0,     0,   159,     0,     0,   160,   161,     0,
     162,   163,   164,     0,   165,     0,   166,   167,   168,   169,
     170,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,     0,   185,
     186,   187,   188,   189,     0,   190,     0,     0,   191,     0,
       0,   192,     0,     0,     0,   193,     0,     0,     0,   194,
     195,   196,     0,     0,   197,     0,     0,     0,     0,   198,
     199,     0,     0,     0,  1968,   200,     0,   201,     0,     0,
       0,   202,     0,   203,   204,   205,   206,     0,     0,     0,
     207,     0,     0,   208,   209,   210,     0,     0,     0,   211,
       0,   212,   213,     0,   214,   215,   216,     0,     0,   217,
     218,     0,   219,   220,   221,   222,   223,     0,     0,   224,
     225,   226,     0,     0,   227,   228,     0,   229,   230,   231,
       0,     0,   232,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,   240,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,     0,   245,   246,
       0,     0,     0,   247,   248,   249,   250,     0,     0,   251,
     252,   253,     0,   254,     0,   255,     0,     0,     0,     0,
     256,   257,     0,     0,     0,   258,     0,   259,   260,     0,
     261,   262,     0,     0,     0,   263,     0,     0,   264,   265,
       0,     0,   266,     0,     0,   267,   268,     0,     0,     0,
       0,     0,   269,   270,     0,   271,     0,   272,     0,   273,
     274,     0,     0,     0,     0,     0,     0,     0,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,     0,   288,   289,   290,     0,   291,   292,   293,   294,
       0,   295,   296,     0,     0,     0,     0,   297,   298,   299,
     300,   301,   302,     0,     0,   303,   304,     0,   305,     0,
     306,     0,   307,   308,   309,   310,   311,   312,   313,   314,
     315,     0,     0,   316,   317,     0,     0,   318,   319,   320,
     321,     0,     0,     0,   322,   323,     0,     0,     0,     0,
     324,   325,   326,     0,   327,   328,   329,     0,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   331,   332,
     333,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,   347,   348,     0,
     349,     0,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,     0,     0,   359,     0,     0,     0,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,   368,   369,
       0,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,   376,     0,   377,   378,     0,   379,   380,     0,     0,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,     0,     0,     0,   393,   394,   395,
     396,     0,     0,     0,   397,     0,     0,     0,   398,     0,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
       0,     0,     0,     0,     0,     0,   408,   409,     0,   410,
       0,     0,     0,   411,     0,     0,   412,   413,   414,     0,
       0,     0,   415,   416,     0,   417,   418,   419,   420,   421,
     422,     0,     0,   423,   424,   425,   426,     0,   427,   428,
       0,     0,   429,   430,   431,   432,   433,     0,     0,   434,
     435,     0,   436,   437,   438,   439,   440,     0,     0,     0,
       0,     0,   441,   442,     0,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,   449,   450,     0,   451,   452,
       0,     0,   453,     0,     0,   454,     0,   455,     0,   456,
     457,   458,     0,     0,     0,     0,     0,     0,   459,     0,
       0,   460,     0,     0,     0,   461,   462,   463,   464,     0,
       0,     0,     0,     0,     0,   465,   466,     0,   467,   468,
     469,     0,   135,   470,   136,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,     0,   142,     0,   143,
     144,   145,   146,   147,   148,   149,     0,   150,     0,     0,
       0,   151,     0,     0,     0,   152,     0,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,     0,
       0,   160,   161,     0,   162,   163,   164,     0,   165,     0,
     166,   167,   168,   169,   170,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,     0,   185,   186,   187,   188,   189,     0,   190,
       0,     0,   191,     0,     0,   192,     0,     0,     0,   193,
       0,     0,     0,   194,   195,   196,     0,     0,   197,     0,
       0,     0,     0,   198,   199,     0,     0,     0,  2296,   200,
       0,   201,     0,     0,     0,   202,     0,   203,   204,   205,
     206,     0,     0,     0,   207,     0,     0,   208,   209,   210,
       0,     0,     0,   211,     0,   212,   213,     0,   214,   215,
     216,     0,     0,   217,   218,     0,   219,   220,   221,   222,
     223,     0,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,     0,     0,   232,     0,     0,     0,
     233,     0,   234,     0,   235,     0,   236,   237,   238,   239,
     240,     0,   241,     0,     0,     0,   242,   243,     0,   244,
       0,     0,   245,   246,     0,     0,     0,   247,   248,   249,
     250,     0,     0,   251,   252,   253,     0,   254,     0,   255,
       0,     0,     0,     0,   256,   257,     0,     0,     0,   258,
       0,   259,   260,     0,   261,   262,     0,     0,     0,   263,
       0,     0,   264,   265,     0,     0,   266,     0,     0,   267,
     268,     0,     0,     0,     0,     0,   269,   270,     0,   271,
       0,   272,     0,   273,   274,     0,     0,     0,     0,     0,
       0,     0,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,     0,   288,   289,   290,     0,
     291,   292,   293,   294,     0,   295,   296,     0,     0,     0,
       0,   297,   298,   299,   300,   301,   302,     0,     0,   303,
     304,     0,   305,     0,   306,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     0,     0,   316,   317,     0,
       0,   318,   319,   320,   321,     0,     0,     0,   322,   323,
       0,     0,     0,     0,   324,   325,   326,     0,   327,   328,
     329,     0,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   332,   333,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,   348,     0,   349,     0,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,     0,     0,   359,     0,
       0,     0,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,   368,   369,     0,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,   376,     0,   377,   378,     0,
     379,   380,     0,     0,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,     0,     0,
       0,   393,   394,   395,   396,     0,     0,     0,   397,     0,
       0,     0,   398,     0,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,     0,     0,     0,     0,     0,     0,
     408,   409,     0,   410,     0,     0,     0,   411,     0,     0,
     412,   413,   414,     0,     0,     0,   415,   416,     0,   417,
     418,   419,   420,   421,   422,     0,     0,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,     0,   434,   435,     0,   436,   437,   438,   439,
     440,     0,     0,     0,     0,     0,  2297,   442,     0,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,   449,
     450,     0,   451,   452,     0,     0,   453,     0,     0,   454,
       0,   455,     0,   456,   457,   458,     0,     0,     0,     0,
       0,     0,   459,     0,     0,   460,     0,     0,     0,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,   468,   469,     0,   135,   470,   136,   137,
     138,   139,   140,  2798,     0,     0,     0,     0,   141,     0,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,   150,     0,     0,     0,   151,     0,     0,     0,   152,
       0,     0,   153,   154,   155,     0,   156,     0,   157,   158,
       0,     0,   159,     0,     0,   160,   161,     0,   162,   163,
     164,     0,   165,     0,   166,   167,   168,   169,   170,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,     0,   185,   186,   187,
     188,   189,     0,   190,     0,     0,   191,     0,     0,   192,
       0,     0,     0,   193,     0,     0,     0,   194,   195,   196,
       0,     0,   197,     0,     0,     0,     0,   198,   199,     0,
       0,     0,     0,   200,     0,   201,     0,     0,     0,   202,
       0,   203,   204,   205,   206,     0,     0,     0,   207,     0,
       0,   208,   209,   210,     0,     0,     0,   211,     0,   212,
     213,     0,   214,   215,   216,     0,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,     0,     0,
     232,     0,     0,     0,   233,     0,   234,     0,   235,     0,
     236,   237,   238,   239,   240,     0,   241,     0,     0,     0,
     242,   243,     0,   244,     0,     0,   245,   246,     0,     0,
       0,   247,   248,   249,   250,     0,     0,   251,   252,   253,
       0,   254,     0,   255,     0,     0,     0,     0,   256,   257,
       0,     0,     0,   258,     0,   259,   260,     0,   261,   262,
       0,     0,     0,   263,     0,     0,   264,   265,     0,     0,
     266,     0,     0,   267,   268,     0,     0,     0,     0,     0,
     269,   270,     0,   271,     0,   272,     0,   273,   274,     0,
       0,     0,     0,     0,     0,     0,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,     0,
     288,   289,   290,     0,   291,   292,   293,   294,     0,   295,
     296,     0,     0,     0,     0,   297,   298,   299,   300,   301,
     302,     0,     0,   303,   304,     0,   305,     0,   306,     0,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
       0,   316,   317,     0,     0,   318,   319,   320,   321,     0,
       0,     0,   322,   323,     0,     0,     0,     0,   324,   325,
     326,     0,   327,   328,   329,     0,   330,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   331,   332,   333,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,   346,   347,   348,     0,   349,     0,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
       0,     0,   359,     0,     0,     0,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,   368,   369,     0,   370,
     371,     0,   372,   373,   374,     0,     0,   375,     0,   376,
       0,   377,   378,     0,   379,   380,     0,     0,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,     0,     0,     0,   393,   394,   395,   396,     0,
       0,     0,   397,     0,     0,     0,   398,     0,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,     0,     0,
       0,     0,     0,     0,   408,   409,     0,   410,     0,     0,
       0,   411,     0,     0,   412,   413,   414,     0,     0,     0,
     415,   416,     0,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,   433,     0,     0,   434,   435,     0,
     436,   437,   438,   439,   440,     0,     0,     0,     0,     0,
     441,   442,     0,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,   449,   450,     0,   451,   452,     0,     0,
     453,     0,     0,   454,     0,   455,     0,   456,   457,   458,
       0,     0,     0,     0,     0,     0,   459,     0,     0,   460,
       0,     0,     0,   461,   462,   463,   464,     0,     0,     0,
       0,     0,     0,   465,   466,     0,   467,   468,   469,     0,
     135,   470,   136,   137,   138,   139,   140,     0,     0,     0,
       0,     0,   141,     0,     0,   142,     0,   143,   144,   145,
     146,   147,   148,   149,     0,   150,     0,     0,     0,   151,
       0,     0,     0,   152,     0,     0,   153,   154,   155,     0,
     156,     0,   157,   158,     0,     0,   159,     0,     0,   160,
     161,     0,   162,   163,   164,     0,   165,     0,   166,   167,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,     0,   183,   184,
       0,   185,   186,   187,   188,   189,     0,   190,     0,     0,
     191,     0,     0,   192,     0,     0,     0,   193,     0,     0,
       0,   194,   195,   196,     0,     0,   197,     0,     0,     0,
       0,   198,   199,     0,     0,     0,     0,   200,     0,   201,
       0,     0,     0,   202,     0,   203,   204,   205,   206,     0,
       0,     0,   207,     0,     0,   208,   209,   210,     0,     0,
       0,   211,     0,   212,   213,     0,   214,   215,   216,     0,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,     0,     0,   232,     0,     0,     0,   233,     0,
     234,     0,   235,     0,   236,   237,   238,   239,   240,     0,
     241,     0,     0,     0,   242,   243,     0,   244,     0,     0,
     245,   246,     0,     0,     0,   247,   248,   249,   250,     0,
       0,   251,   252,   253,     0,   254,     0,   255,     0,     0,
       0,     0,   256,   257,     0,     0,     0,   258,     0,   259,
     260,     0,   261,   262,     0,     0,     0,   263,     0,     0,
     264,   265,     0,     0,   266,     0,     0,   267,   268,     0,
       0,     0,     0,     0,   269,   270,     0,   271,     0,   272,
       0,   273,   274,     0,     0,     0,     0,     0,     0,     0,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,     0,   288,   289,   290,     0,   291,   292,
     293,   294,     0,   295,   296,     0,     0,     0,     0,   297,
     298,   299,   300,   301,   302,     0,     0,   303,   304,     0,
     305,     0,   306,     0,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,     0,   316,   317,     0,     0,   318,
     319,   320,   321,     0,     0,     0,   322,   323,     0,     0,
       0,     0,   324,   325,   326,     0,   327,   328,   329,     0,
     330,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     331,   332,   333,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,   347,
     348,  2871,   349,     0,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,     0,     0,   359,     0,     0,     0,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
     368,   369,     0,   370,   371,     0,   372,   373,   374,     0,
       0,   375,     0,   376,     0,   377,   378,     0,   379,   380,
       0,     0,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,     0,     0,     0,   393,
     394,   395,   396,     0,     0,     0,   397,     0,     0,     0,
     398,     0,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,     0,     0,     0,     0,     0,     0,   408,   409,
       0,   410,     0,     0,     0,   411,     0,     0,   412,   413,
     414,     0,     0,     0,   415,   416,     0,   417,   418,   419,
     420,   421,   422,     0,     0,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
       0,   434,   435,     0,   436,   437,   438,   439,   440,     0,
       0,     0,     0,     0,   441,   442,     0,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,   449,   450,     0,
     451,   452,     0,     0,   453,     0,     0,   454,     0,   455,
       0,   456,   457,   458,     0,     0,     0,     0,     0,     0,
     459,     0,     0,   460,     0,     0,     0,   461,   462,   463,
     464,     0,     0,     0,     0,     0,     0,   465,   466,     0,
     467,   468,   469,     0,   135,   470,   136,   137,   138,   139,
     140,     0,     0,     0,     0,     0,   141,     0,     0,   142,
       0,   143,   144,   145,   146,   147,   148,   149,     0,   150,
       0,     0,     0,   151,     0,     0,     0,   152,     0,     0,
     153,   154,   155,     0,   156,     0,   157,   158,     0,     0,
     159,     0,     0,   160,   161,     0,   162,   163,   164,     0,
     165,     0,   166,   167,   168,   169,   170,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,     0,   185,   186,   187,   188,   189,
       0,   190,     0,     0,   191,     0,     0,   192,     0,     0,
       0,   193,     0,     0,     0,   194,   195,   196,     0,     0,
     197,     0,     0,     0,     0,   198,   199,     0,     0,     0,
       0,   200,     0,   201,     0,     0,     0,   202,     0,   203,
     204,   205,   206,     0,     0,     0,   207,     0,     0,   208,
     209,   210,     0,     0,     0,   211,     0,   212,   213,     0,
     214,   215,   216,     0,     0,   217,   218,     0,   219,   220,
     221,   222,   223,     0,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,     0,     0,   232,     0,
       0,     0,   233,     0,   234,     0,   235,     0,   236,   237,
     238,   239,   240,     0,   241,     0,     0,     0,   242,   243,
       0,   244,     0,     0,   245,   246,     0,     0,     0,   247,
     248,   249,   250,     0,     0,   251,   252,   253,     0,   254,
       0,   255,     0,     0,     0,     0,   256,   257,     0,     0,
       0,   258,     0,   259,   260,     0,   261,   262,     0,     0,
       0,   263,     0,     0,   264,   265,     0,     0,   266,     0,
       0,   267,   268,     0,     0,     0,     0,     0,   269,   270,
       0,   271,     0,   272,     0,   273,   274,     0,     0,     0,
       0,     0,     0,     0,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,     0,   288,   289,
     290,     0,   291,   292,   293,   294,     0,   295,   296,     0,
       0,     0,     0,   297,   298,   299,   300,   301,   302,     0,
       0,   303,   304,     0,   305,     0,   306,     0,   307,   308,
     309,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,     0,   318,   319,   320,   321,     0,     0,     0,
     322,   323,     0,     0,     0,     0,   324,   325,   326,     0,
     327,   328,   329,     0,   330,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   331,   332,   333,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,   346,   347,   348,     0,   349,     0,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,     0,   411,
       0,     0,   412,   413,   414,     0,     0,     0,   415,   416,
       0,   417,   418,   419,   420,   421,   422,     0,     0,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     431,   432,   433,     0,   132,   434,   435,     0,   436,   437,
     438,   439,   440,     0,     0,     0,     0,     0,   441,   442,
       0,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,   449,   450,     0,   451,   452,     0,     0,   453,     0,
       0,   454,     0,   455,     0,   456,   457,   458,     0,     0,
       0,     0,     0,     0,   459,     0,     0,   460,     0,     0,
       0,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,   468,   469,     0,   135,   470,
     136,   137,   138,   139,   140,     0,     0,     0,     0,     0,
     141,     0,     0,   142,     0,   143,   144,   145,   146,   147,
     148,   149,     0,   150,     0,     0,     0,   151,     0,     0,
       0,   152,     0,     0,   153,   154,   155,     0,   156,     0,
     157,   158,     0,     0,   159,     0,     0,   160,   161,     0,
     162,   163,   164,     0,   165,     0,   166,   167,   168,   169,
     170,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,     0,   185,
     186,   187,   188,   189,     0,   190,     0,     0,   191,     0,
       0,   192,     0,     0,     0,   193,     0,     0,     0,   194,
     195,   196,     0,     0,   197,     0,     0,     0,     0,   198,
     199,     0,     0,     0,  2296,   200,     0,   201,     0,     0,
       0,   202,     0,   203,   204,   205,   206,     0,     0,     0,
     207,     0,     0,   208,   209,   210,     0,     0,     0,   211,
       0,   212,   213,     0,   214,   215,   216,     0,     0,   217,
     218,     0,   219,   220,   221,   222,   223,     0,     0,   224,
     225,   226,     0,     0,   227,   228,     0,   229,   230,   231,
       0,     0,   232,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,   240,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,     0,   245,   246,
       0,     0,     0,   247,   248,   249,   250,     0,     0,   251,
     252,   253,     0,   254,     0,   255,     0,     0,     0,     0,
     256,   257,     0,     0,     0,   258,     0,   259,   260,     0,
     261,   262,     0,     0,     0,   263,     0,     0,   264,   265,
       0,     0,   266,     0,     0,   267,   268,     0,     0,     0,
       0,     0,   269,   270,     0,   271,     0,   272,     0,   273,
     274,     0,     0,     0,     0,     0,     0,     0,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,     0,   288,   289,   290,     0,   291,   292,   293,   294,
       0,   295,   296,     0,     0,     0,     0,   297,   298,   299,
     300,   301,   302,     0,     0,   303,   304,     0,   305,     0,
     306,     0,   307,   308,   309,   310,   311,   312,   313,   314,
     315,     0,     0,   316,   317,     0,     0,   318,   319,   320,
     321,     0,     0,     0,   322,   323,     0,     0,     0,     0,
     324,   325,   326,     0,   327,   328,   329,     0,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   331,   332,
     333,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,   347,   348,     0,
     349,     0,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,     0,     0,   359,     0,     0,     0,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,   368,   369,
       0,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,   376,     0,   377,   378,     0,   379,   380,     0,     0,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,     0,     0,     0,   393,   394,   395,
     396,     0,     0,     0,   397,     0,     0,     0,   398,     0,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
       0,     0,     0,     0,     0,     0,   408,   409,     0,   410,
       0,     0,     0,   411,     0,     0,   412,   413,   414,     0,
       0,     0,   415,   416,     0,   417,   418,   419,   420,   421,
     422,     0,     0,   423,   424,   425,   426,     0,   427,   428,
       0,     0,   429,   430,   431,   432,   433,     0,     0,   434,
     435,     0,   436,   437,   438,   439,   440,     0,     0,     0,
       0,     0,   441,   442,     0,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,   449,   450,     0,   451,   452,
       0,     0,   453,     0,     0,   454,     0,   455,     0,   456,
     457,   458,     0,     0,     0,     0,     0,     0,   459,     0,
       0,   460,     0,     0,     0,   461,   462,   463,   464,     0,
       0,     0,     0,     0,     0,   465,   466,     0,   467,   468,
     469,     0,   135,   470,   136,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,     0,   142,     0,   143,
     144,   145,   146,   147,   148,   149,     0,   150,     0,     0,
       0,   151,     0,     0,     0,   152,     0,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,     0,
       0,   160,   161,     0,   162,   163,   164,     0,   165,     0,
     166,   167,   168,   169,   170,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,     0,   185,   186,   187,   188,   189,     0,   190,
       0,     0,   191,     0,     0,   192,     0,     0,     0,   193,
       0,     0,     0,   194,   195,   196,     0,     0,   197,     0,
       0,     0,     0,   198,   199,     0,     0,     0,     0,   200,
       0,   201,     0,     0,     0,   202,     0,   203,   204,   205,
     206,     0,     0,     0,   207,     0,     0,   208,   209,   210,
       0,     0,     0,   211,     0,   212,   213,     0,   214,   215,
     216,     0,     0,   217,   218,     0,   219,   220,   221,   222,
     223,     0,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,     0,     0,   232,     0,     0,     0,
     233,     0,   234,     0,   235,     0,   236,   237,   238,   239,
     240,     0,   241,     0,     0,     0,   242,   243,     0,   244,
       0,     0,   245,   246,     0,     0,     0,   247,   248,   249,
     250,     0,     0,   251,   252,   253,     0,   254,     0,   255,
       0,     0,     0,     0,   256,   257,     0,     0,     0,   258,
       0,   259,   260,     0,   261,   262,     0,     0,     0,   263,
       0,     0,   264,   265,     0,     0,   266,     0,     0,   267,
     268,     0,     0,     0,     0,     0,   269,   270,     0,   271,
       0,   272,     0,   273,   274,     0,     0,     0,     0,     0,
       0,     0,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,     0,   288,   289,   290,     0,
     291,   292,   293,   294,     0,   295,   296,     0,     0,     0,
       0,   297,   298,   299,   300,   301,   302,     0,     0,   303,
     304,     0,   305,     0,   306,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     0,     0,   316,   317,     0,
       0,   318,   319,   320,   321,     0,     0,     0,   322,   323,
       0,     0,     0,     0,   324,   325,   326,     0,   327,   328,
     329,     0,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   332,   333,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,   348,     0,   349,     0,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,     0,     0,   359,     0,
       0,     0,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,   368,   369,     0,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,   376,     0,   377,   378,     0,
     379,   380,     0,     0,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,     0,     0,
       0,   393,   394,   395,   396,     0,     0,     0,   397,     0,
       0,     0,   398,     0,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,     0,     0,     0,     0,     0,     0,
     408,   409,     0,   410,     0,     0,     0,   411,     0,     0,
     412,   413,   414,     0,     0,     0,   415,   416,     0,   417,
     418,   419,   420,   421,   422,     0,     0,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,     0,   434,   435,     0,   436,   437,   438,   439,
     440,     0,     0,     0,     0,     0,   441,   442,     0,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,   449,
     450,     0,   451,   452,     0,     0,   453,     0,     0,   454,
       0,   455,     0,   456,   457,   458,     0,     0,     0,     0,
       0,     0,   459,     0,     0,   460,     0,     0,     0,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,   468,   469,     0,   135,   470,   136,   137,
     138,   139,   140,     0,     0,     0,     0,     0,   141,     0,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,   150,     0,     0,     0,   151,     0,     0,     0,   152,
       0,     0,   153,   154,   155,     0,   156,     0,   157,   158,
       0,     0,   159,     0,     0,   160,   161,     0,   162,   163,
     164,     0,   165,     0,   166,   167,   168,   169,   170,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,     0,   185,   186,   187,
     188,   189,     0,   190,     0,     0,   191,     0,     0,   192,
       0,     0,     0,   193,     0,     0,     0,   194,   195,   196,
       0,     0,   197,     0,     0,     0,     0,   198,   199,     0,
       0,     0,     0,   200,     0,   201,     0,     0,     0,   202,
       0,   203,   204,   205,   206,     0,     0,     0,   207,     0,
       0,   208,   209,   210,     0,     0,     0,   211,     0,   212,
     213,     0,   214,   215,   216,     0,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,  1719,   231,     0,     0,
     232,     0,     0,     0,   233,     0,   234,     0,   235,     0,
     236,   237,   238,   239,   240,     0,   241,     0,     0,     0,
     242,   243,     0,   244,     0,     0,   245,   246,     0,     0,
       0,   247,   248,   249,   250,     0,     0,   251,   252,   253,
       0,   254,     0,   255,     0,     0,     0,     0,   256,   257,
       0,     0,     0,   258,     0,   259,   260,     0,   261,   262,
       0,     0,     0,   263,     0,     0,   264,   265,     0,     0,
     266,     0,     0,   267,   268,     0,     0,     0,     0,     0,
     269,   270,     0,   271,     0,   272,     0,   273,   274,     0,
       0,     0,     0,     0,     0,     0,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,     0,
     288,   289,   290,     0,   291,   292,   293,   294,     0,   295,
     296,     0,     0,     0,     0,   297,   298,   299,   300,   301,
     302,     0,     0,   303,   304,     0,   305,     0,   306,     0,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
       0,   316,   317,     0,     0,   318,  1720,   320,   321,     0,
       0,     0,   322,   323,     0,     0,     0,     0,   324,   325,
     326,     0,   327,   328,   329,     0,   330,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   331,   332,   333,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,   346,   347,   348,     0,   349,     0,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
       0,     0,   359,     0,     0,     0,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,   368,   369,     0,   370,
     371,     0,   372,   373,   374,     0,     0,   375,     0,   376,
       0,   377,   378,     0,   379,   380,     0,     0,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,     0,     0,     0,   393,   394,   395,   396,     0,
       0,     0,   397,     0,     0,     0,   398,     0,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,     0,     0,
       0,     0,     0,     0,   408,   409,     0,   410,     0,     0,
       0,   411,     0,     0,   412,   413,   414,     0,     0,     0,
     415,   416,     0,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,   433,     0,     0,   434,   435,     0,
     436,   437,   438,   439,   440,     0,     0,     0,     0,     0,
     441,   442,     0,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,   449,   450,     0,   451,   452,     0,     0,
     453,     0,     0,   454,     0,   455,     0,   456,   457,   458,
       0,     0,     0,     0,     0,     0,   459,     0,     0,   460,
       0,     0,     0,   461,   462,   463,   464,     0,     0,     0,
       0,     0,     0,   465,   466,     0,   467,   468,   469,     0,
     135,   470,   136,   137,   138,   139,   140,     0,     0,     0,
       0,     0,   141,     0,     0,     0,     0,   143,   144,   145,
     146,   147,   148,     0,     0,  -327,     0,     0,     0,   151,
       0,     0,     0,   152,     0,     0,   153,   154,   155,     0,
     156,     0,     0,     0,     0,     0,   159,  3848,     0,   160,
     161,     0,   162,   163,     0,     0,     0,     0,   166,   167,
     168,   169,  3849,   171,   172,     0,   173,   174,     0,   175,
       0,   177,     0,   179,   180,   181,   182,     0,   183,   184,
       0,   185,   186,   187,     0,   189,     0,   190,     0,     0,
     191,     0,     0,   192,     0,     0,     0,   193,     0,     0,
       0,   194,   195,   196,     0,     0,   197,     0,     0,     0,
       0,   198,     0,     0,     0,     0,     0,   200,     0,   201,
       0,     0,     0,   202,     0,   203,   204,   205,   206,     0,
       0,     0,     0,     0,     0,   208,   209,   210,     0,  -297,
    -297,   211,     0,  -297,   213,     0,   214,   215,   216,     0,
       0,   217,   218,     0,   219,   220,   221,   222,     0,     0,
       0,   224,   225,   226,     0,     0,   227,   228,  3850,   229,
     230,   231,     0,     0,     0,     0,     0,     0,   233,     0,
     234,     0,   235,     0,   236,   237,   238,   239,   240,     0,
     241,     0,     0,     0,     0,   243,     0,     0,     0,     0,
       0,   246,     0,     0,     0,   247,   248,   249,   250,  3851,
       0,   251,   252,   253,     0,   254,     0,   255,     0,     0,
       0,     0,   256,     0,     0,     0,     0,   258,     0,   259,
     260,     0,   261,   262,  3852,     0,     0,   263,     0,     0,
       0,   265,     0,     0,   266,  3853,     0,   267,   268,     0,
       0,     0,     0,     0,   269,   270,     0,   271,     0,   272,
       0,   273,   274,     0,     0,     0,     0,  -282,     0,     0,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,     0,   288,   289,   290,     0,   291,   292,
     293,   294,     0,   295,   296,     0,     0,     0,     0,   297,
     298,   299,   300,   301,   302,     0,     0,   303,   304,     0,
     305,     0,   306,     0,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,     0,   316,   317,     0,     0,   318,
     319,   320,   321,     0,     0,     0,     0,   323,     0,     0,
       0,     0,   324,   325,   326,     0,   327,   328,  3854,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   332,   333,     0,     0,   335,   336,   337,     0,   339,
     340,   341,   342,   343,   344,     0,     0,     0,     0,   347,
     348,     0,   349,     0,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,     0,     0,   359,     0,     0,     0,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
     368,   369,     0,   370,     0,     0,   372,     0,   374,  -282,
       0,   375,     0,     0,     0,   377,     0,     0,   379,   380,
    3855,     0,     0,     0,   382,   383,   384,   385,   386,   387,
       0,   389,   390,     0,   391,     0,     0,     0,     0,   393,
     394,   395,     0,     0,     0,     0,   397,     0,     0,     0,
     398,     0,     0,   400,     0,   402,     0,   403,     0,     0,
     406,   407,     0,     0,     0,     0,     0,     0,   408,   409,
       0,   410,     0,     0,     0,   411,     0,     0,   412,     0,
     414,     0,     0,     0,     0,   416,     0,   417,   418,   419,
     420,   421,   422,     0,     0,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
       0,   434,   435,     0,   436,   437,   438,   439,   440,     0,
       0,     0,     0,     0,   441,   442,     0,     0,     0,     0,
     444,   445,   446,     0,   447,   448,     0,   449,   450,     0,
       0,     0,     0,     0,   453,     0,     0,   454,     0,     0,
       0,   456,   457,   458,     0,     0,     0,     0,     0,     0,
     459,     0,     0,   460,     0,     0,     0,   461,   462,   463,
     464,     0,     0,  -282,     0,     0,     0,   465,     0,     0,
     467,     0,   469,     0,   135,   470,   136,   137,   138,   139,
     140,     0,     0,     0,     0,     0,   141,     0,     0,     0,
       0,   143,   144,   145,   146,   147,   148,     0,     0,  -327,
       0,     0,     0,   151,     0,     0,     0,   152,     0,     0,
     153,   154,   155,     0,   156,     0,     0,     0,     0,     0,
     159,  3848,     0,   160,   161,     0,   162,   163,     0,     0,
       0,     0,   166,   167,   168,   169,  3849,   171,   172,     0,
     173,   174,     0,   175,     0,   177,     0,   179,   180,   181,
     182,     0,   183,   184,     0,   185,   186,   187,     0,   189,
       0,   190,     0,     0,   191,     0,     0,   192,     0,     0,
       0,   193,     0,     0,     0,   194,   195,   196,     0,     0,
     197,     0,     0,     0,     0,   198,     0,     0,     0,     0,
       0,   200,     0,   201,     0,     0,     0,   202,     0,   203,
     204,   205,   206,     0,     0,     0,     0,     0,     0,   208,
     209,   210,     0,  -318,     0,   211,     0,  -318,   213,     0,
     214,   215,   216,     0,     0,   217,   218,     0,   219,   220,
     221,   222,     0,     0,     0,   224,   225,   226,     0,     0,
     227,   228,  3850,   229,   230,   231,     0,     0,     0,     0,
       0,     0,   233,     0,   234,     0,   235,     0,   236,   237,
     238,   239,   240,     0,   241,     0,     0,     0,     0,   243,
       0,     0,     0,     0,     0,   246,     0,     0,     0,   247,
     248,   249,   250,  3851,     0,   251,   252,   253,     0,   254,
       0,   255,     0,     0,     0,     0,   256,     0,     0,     0,
       0,   258,     0,   259,   260,     0,   261,   262,  3852,     0,
       0,   263,     0,     0,     0,   265,     0,     0,   266,  3853,
       0,   267,   268,     0,     0,     0,     0,     0,   269,   270,
       0,   271,     0,   272,     0,   273,   274,     0,     0,     0,
       0,  -282,     0,     0,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,     0,   288,   289,
     290,     0,   291,   292,   293,   294,     0,   295,   296,     0,
       0,     0,     0,   297,   298,   299,   300,   301,   302,     0,
       0,   303,   304,     0,   305,     0,   306,     0,   307,   308,
     309,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,     0,   318,   319,   320,   321,     0,     0,     0,
       0,   323,     0,     0,     0,     0,   324,   325,   326,     0,
     327,   328,  3854,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,     0,     0,   335,
     336,   337,     0,   339,   340,   341,   342,   343,   344,     0,
       0,     0,     0,   347,   348,     0,   349,     0,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,     0,     0,
     372,     0,   374,  -282,     0,   375,     0,     0,     0,   377,
       0,     0,   379,   380,  3855,     0,     0,     0,   382,   383,
     384,   385,   386,   387,     0,   389,   390,     0,   391,     0,
       0,     0,     0,   393,   394,   395,     0,     0,     0,     0,
     397,     0,     0,     0,   398,     0,     0,   400,     0,   402,
       0,   403,     0,     0,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,     0,   411,
       0,     0,   412,     0,   414,     0,     0,     0,     0,   416,
       0,   417,   418,   419,   420,   421,   422,     0,     0,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     431,   432,   433,     0,     0,   434,   435,     0,   436,   437,
     438,   439,   440,     0,     0,     0,     0,     0,   441,   442,
       0,     0,     0,     0,   444,   445,   446,     0,   447,   448,
       0,   449,   450,     0,     0,     0,     0,     0,   453,     0,
       0,   454,     0,     0,     0,   456,   457,   458,     0,     0,
       0,     0,     0,     0,   459,     0,     0,   460,     0,     0,
       0,   461,   462,   463,   464,  -318,     0,  -282,     0,     0,
       0,   465,     0,     0,   467,     0,   469,     0,   135,   470,
     136,   137,   138,   139,   140,     0,     0,     0,     0,     0,
     141,     0,     0,     0,     0,   143,   144,   145,   146,   147,
     148,     0,     0,  -327,     0,     0,     0,   151,     0,     0,
       0,   152,     0,     0,   153,   154,   155,     0,   156,     0,
       0,     0,     0,     0,   159,  3848,     0,   160,   161,     0,
     162,   163,     0,     0,     0,     0,   166,   167,   168,   169,
    3849,   171,   172,     0,   173,   174,     0,   175,     0,   177,
       0,   179,   180,   181,   182,     0,   183,   184,     0,   185,
     186,   187,     0,   189,     0,   190,     0,     0,   191,     0,
       0,   192,     0,     0,     0,   193,     0,     0,     0,   194,
     195,   196,     0,     0,   197,     0,     0,     0,     0,   198,
       0,     0,     0,     0,     0,   200,     0,   201,     0,     0,
       0,   202,     0,   203,   204,   205,   206,     0,     0,     0,
       0,     0,     0,   208,   209,   210,     0,  -315,     0,   211,
       0,  -315,   213,     0,   214,   215,   216,     0,     0,   217,
     218,     0,   219,   220,   221,   222,     0,     0,     0,   224,
     225,   226,     0,     0,   227,   228,  3850,   229,   230,   231,
       0,     0,     0,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,   240,     0,   241,     0,
       0,     0,     0,   243,     0,     0,     0,     0,     0,   246,
       0,     0,     0,   247,   248,   249,   250,  3851,     0,   251,
     252,   253,     0,   254,     0,   255,     0,     0,     0,     0,
     256,     0,     0,     0,     0,   258,     0,   259,   260,     0,
     261,   262,  3852,     0,     0,   263,     0,     0,     0,   265,
       0,     0,   266,  3853,     0,   267,   268,     0,     0,     0,
       0,     0,   269,   270,     0,   271,     0,   272,     0,   273,
     274,     0,     0,     0,     0,  -282,     0,     0,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,     0,   288,   289,   290,     0,   291,   292,   293,   294,
       0,   295,   296,     0,     0,     0,     0,   297,   298,   299,
     300,   301,   302,     0,     0,   303,   304,     0,   305,     0,
     306,     0,   307,   308,   309,   310,   311,   312,   313,   314,
     315,     0,     0,   316,   317,     0,     0,   318,   319,   320,
     321,     0,     0,     0,     0,   323,     0,     0,     0,     0,
     324,   325,   326,     0,   327,   328,  3854,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   332,
     333,     0,     0,   335,   336,   337,     0,   339,   340,   341,
     342,   343,   344,     0,     0,     0,     0,   347,   348,     0,
     349,     0,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,     0,     0,   359,     0,     0,     0,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,   368,   369,
       0,   370,     0,     0,   372,     0,   374,  -282,     0,   375,
       0,     0,     0,   377,     0,     0,   379,   380,  3855,     0,
       0,     0,   382,   383,   384,   385,   386,   387,     0,   389,
     390,     0,   391,     0,     0,     0,     0,   393,   394,   395,
       0,     0,     0,     0,   397,     0,     0,     0,   398,     0,
       0,   400,     0,   402,     0,   403,     0,     0,   406,   407,
       0,     0,     0,     0,     0,     0,   408,   409,     0,   410,
       0,     0,     0,   411,     0,     0,   412,     0,   414,     0,
       0,     0,     0,   416,     0,   417,   418,   419,   420,   421,
     422,     0,     0,   423,   424,   425,   426,     0,   427,   428,
       0,     0,   429,   430,   431,   432,   433,     0,     0,   434,
     435,     0,   436,   437,   438,   439,   440,     0,     0,     0,
       0,     0,   441,   442,     0,     0,     0,     0,   444,   445,
     446,     0,   447,   448,     0,   449,   450,     0,     0,     0,
       0,     0,   453,     0,     0,   454,     0,     0,     0,   456,
     457,   458,     0,     0,     0,     0,     0,     0,   459,     0,
       0,   460,     0,     0,     0,   461,   462,   463,   464,  -315,
       0,  -282,     0,     0,     0,   465,     0,     0,   467,     0,
     469,     0,   135,   470,   136,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,     0,     0,     0,   143,
     144,   145,   146,   147,   148,     0,     0,  -327,     0,     0,
       0,   151,     0,     0,     0,   152,     0,     0,   153,   154,
     155,     0,   156,     0,     0,     0,     0,     0,   159,  3848,
       0,   160,   161,     0,   162,   163,     0,     0,     0,     0,
     166,   167,   168,   169,  3849,   171,   172,     0,   173,   174,
       0,   175,     0,   177,     0,   179,   180,   181,   182,     0,
     183,   184,     0,   185,   186,   187,     0,   189,     0,   190,
       0,     0,   191,     0,     0,   192,     0,     0,     0,   193,
       0,     0,     0,   194,   195,   196,     0,     0,   197,     0,
       0,     0,     0,   198,     0,     0,     0,     0,     0,   200,
       0,   201,     0,     0,     0,   202,     0,   203,   204,   205,
     206,     0,     0,     0,     0,     0,     0,   208,   209,   210,
       0,     0,     0,   211,     0,  4101,   213,     0,   214,   215,
     216,     0,     0,   217,   218,     0,   219,   220,   221,   222,
       0,     0,     0,   224,   225,   226,     0,     0,   227,   228,
    3850,   229,   230,   231,     0,     0,     0,     0,     0,     0,
     233,     0,   234,     0,   235,     0,   236,   237,   238,   239,
     240,     0,   241,     0,     0,     0,     0,   243,     0,     0,
       0,     0,     0,   246,     0,     0,     0,   247,   248,   249,
     250,  3851,     0,   251,   252,   253,     0,   254,     0,   255,
       0,     0,     0,     0,   256,     0,     0,     0,     0,   258,
       0,   259,   260,     0,   261,   262,  3852,     0,     0,   263,
       0,     0,     0,   265,     0,     0,   266,  3853,     0,   267,
     268,     0,     0,     0,     0,     0,   269,   270,     0,   271,
       0,   272,     0,   273,   274,     0,     0,     0,     0,  -282,
       0,     0,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,     0,   288,   289,   290,     0,
     291,   292,   293,   294,     0,   295,   296,     0,     0,     0,
       0,   297,   298,   299,   300,   301,   302,     0,     0,   303,
     304,     0,   305,     0,   306,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     0,     0,   316,   317,     0,
       0,   318,   319,   320,   321,     0,     0,     0,     0,   323,
       0,     0,     0,     0,   324,   325,   326,     0,   327,   328,
    3854,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   332,   333,     0,     0,   335,   336,   337,
       0,   339,   340,   341,   342,   343,   344,     0,     0,     0,
       0,   347,   348,     0,   349,     0,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,     0,     0,   359,     0,
       0,     0,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,   368,   369,     0,   370,     0,     0,   372,     0,
     374,  -282,     0,   375,     0,     0,     0,   377,     0,     0,
     379,   380,  3855,     0,     0,     0,   382,   383,   384,   385,
     386,   387,     0,   389,   390,     0,   391,     0,     0,     0,
       0,   393,   394,   395,     0,     0,     0,     0,   397,     0,
       0,     0,   398,     0,     0,   400,     0,   402,     0,   403,
       0,     0,   406,   407,     0,     0,     0,     0,     0,     0,
     408,   409,     0,   410,     0,     0,     0,   411,     0,     0,
     412,     0,   414,     0,     0,     0,     0,   416,     0,   417,
     418,   419,   420,   421,   422,     0,     0,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,     0,   434,   435,     0,   436,   437,   438,   439,
     440,     0,     0,     0,     0,     0,   441,   442,     0,     0,
       0,     0,   444,   445,   446,     0,   447,   448,     0,   449,
     450,     0,     0,     0,     0,     0,   453,     0,     0,   454,
       0,     0,     0,   456,   457,   458,     0,     0,     0,     0,
       0,     0,   459,     0,     0,   460,     0,     0,     0,   461,
     462,   463,   464,     0,     0,  -282,     0,     0,     0,   465,
       0,     0,   467,     0,   469,     0,   135,   470,   136,   137,
     138,   139,   140,     0,     0,     0,     0,     0,   141,     0,
       0,     0,     0,   143,   144,   145,   146,   147,   148,     0,
       0,  -327,     0,     0,     0,   151,     0,     0,     0,   152,
       0,     0,   153,   154,   155,     0,   156,     0,     0,     0,
       0,     0,   159,  3848,     0,   160,   161,     0,   162,   163,
       0,     0,     0,     0,   166,   167,   168,   169,  3849,   171,
     172,     0,   173,   174,     0,   175,     0,   177,     0,   179,
     180,   181,   182,     0,   183,   184,     0,   185,   186,   187,
       0,   189,     0,   190,     0,     0,   191,     0,     0,   192,
       0,     0,     0,   193,     0,     0,     0,   194,   195,   196,
       0,     0,   197,     0,     0,     0,     0,   198,     0,     0,
       0,     0,     0,   200,     0,   201,     0,     0,     0,   202,
       0,   203,   204,   205,   206,     0,     0,     0,     0,     0,
       0,   208,   209,   210,     0,     0,     0,   211,     0,  -320,
     213,     0,   214,   215,   216,     0,     0,   217,   218,     0,
     219,   220,   221,   222,     0,     0,     0,   224,   225,   226,
       0,     0,   227,   228,  3850,   229,   230,   231,     0,     0,
       0,     0,     0,     0,   233,     0,   234,     0,   235,     0,
     236,   237,   238,   239,   240,     0,   241,     0,     0,     0,
       0,   243,     0,     0,     0,     0,     0,   246,     0,     0,
       0,   247,   248,   249,   250,  3851,     0,   251,   252,   253,
       0,   254,     0,   255,     0,     0,     0,     0,   256,     0,
       0,     0,     0,   258,     0,   259,   260,     0,   261,   262,
    3852,     0,     0,   263,     0,     0,     0,   265,     0,     0,
     266,  3853,     0,   267,   268,     0,     0,     0,     0,     0,
     269,   270,     0,   271,     0,   272,     0,   273,   274,     0,
       0,     0,     0,  -282,     0,     0,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,     0,
     288,   289,   290,     0,   291,   292,   293,   294,     0,   295,
     296,     0,     0,     0,     0,   297,   298,   299,   300,   301,
     302,     0,     0,   303,   304,     0,   305,     0,   306,     0,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
       0,   316,   317,     0,     0,   318,   319,   320,   321,     0,
       0,     0,     0,   323,     0,     0,     0,     0,   324,   325,
     326,     0,   327,   328,  3854,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   332,   333,     0,
       0,   335,   336,   337,     0,   339,   340,   341,   342,   343,
     344,     0,     0,     0,     0,   347,   348,     0,   349,     0,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
       0,     0,   359,     0,     0,     0,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,   368,   369,     0,   370,
       0,     0,   372,     0,   374,  -282,     0,   375,     0,     0,
       0,   377,     0,     0,   379,   380,  3855,     0,     0,     0,
     382,   383,   384,   385,   386,   387,     0,   389,   390,     0,
     391,     0,     0,     0,     0,   393,   394,   395,     0,     0,
       0,     0,   397,     0,     0,     0,   398,     0,     0,   400,
       0,   402,     0,   403,     0,     0,   406,   407,     0,     0,
       0,     0,     0,     0,   408,   409,     0,   410,     0,     0,
       0,   411,     0,     0,   412,     0,   414,     0,     0,     0,
       0,   416,     0,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,   433,     0,     0,   434,   435,     0,
     436,   437,   438,   439,   440,     0,     0,     0,     0,     0,
     441,   442,     0,     0,     0,     0,   444,   445,   446,     0,
     447,   448,     0,   449,   450,     0,     0,     0,     0,     0,
     453,     0,     0,   454,     0,     0,     0,   456,   457,   458,
       0,     0,     0,     0,     0,     0,   459,     0,     0,   460,
       0,     0,     0,   461,   462,   463,   464,     0,     0,  -282,
       0,     0,     0,   465,     0,     0,   467,     0,   469,     0,
     135,   470,   136,   137,   138,   139,   140,     0,     0,     0,
       0,     0,   141,     0,     0,     0,     0,   143,   144,   145,
     146,   147,   148,     0,     0,  -327,     0,     0,     0,   151,
       0,     0,     0,   152,     0,     0,   153,   154,   155,     0,
     156,     0,     0,     0,     0,     0,   159,  3848,     0,   160,
     161,     0,   162,   163,     0,     0,     0,     0,   166,   167,
     168,   169,  3849,   171,   172,     0,   173,   174,     0,   175,
       0,   177,     0,   179,   180,   181,   182,     0,   183,   184,
       0,   185,   186,   187,     0,   189,     0,   190,     0,     0,
     191,     0,     0,   192,     0,     0,     0,   193,     0,     0,
       0,   194,   195,   196,     0,     0,   197,     0,     0,     0,
       0,   198,     0,     0,     0,     0,     0,   200,     0,   201,
       0,     0,     0,   202,     0,   203,   204,   205,   206,     0,
       0,     0,     0,     0,     0,   208,   209,   210,     0,     0,
       0,   211,     0,  4184,   213,     0,   214,   215,   216,     0,
       0,   217,   218,     0,   219,   220,   221,   222,     0,     0,
       0,   224,   225,   226,     0,     0,   227,   228,  3850,   229,
     230,   231,     0,     0,     0,     0,     0,     0,   233,     0,
     234,     0,   235,     0,   236,   237,   238,   239,   240,     0,
     241,     0,     0,     0,     0,   243,     0,     0,     0,     0,
       0,   246,     0,     0,     0,   247,   248,   249,   250,  3851,
       0,   251,   252,   253,     0,   254,     0,   255,     0,     0,
       0,     0,   256,     0,     0,     0,     0,   258,     0,   259,
     260,     0,   261,   262,  3852,     0,     0,   263,     0,     0,
       0,   265,     0,     0,   266,  3853,     0,   267,   268,     0,
       0,     0,     0,     0,   269,   270,     0,   271,     0,   272,
       0,   273,   274,     0,     0,     0,     0,  -282,     0,     0,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,     0,   288,   289,   290,     0,   291,   292,
     293,   294,     0,   295,   296,     0,     0,     0,     0,   297,
     298,   299,   300,   301,   302,     0,     0,   303,   304,     0,
     305,     0,   306,     0,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,     0,   316,   317,     0,     0,   318,
     319,   320,   321,     0,     0,     0,     0,   323,     0,     0,
       0,     0,   324,   325,   326,     0,   327,   328,  3854,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   332,   333,     0,     0,   335,   336,   337,     0,   339,
     340,   341,   342,   343,   344,     0,     0,     0,     0,   347,
     348,     0,   349,     0,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,     0,     0,   359,     0,     0,     0,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
     368,   369,     0,   370,     0,     0,   372,     0,   374,  -282,
       0,   375,     0,     0,     0,   377,     0,     0,   379,   380,
    3855,     0,     0,     0,   382,   383,   384,   385,   386,   387,
       0,   389,   390,     0,   391,     0,     0,     0,     0,   393,
     394,   395,     0,     0,     0,     0,   397,     0,     0,     0,
     398,     0,     0,   400,     0,   402,     0,   403,     0,     0,
     406,   407,     0,     0,     0,     0,     0,     0,   408,   409,
       0,   410,     0,     0,     0,   411,     0,     0,   412,     0,
     414,     0,     0,     0,     0,   416,     0,   417,   418,   419,
     420,   421,   422,     0,     0,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
       0,   434,   435,     0,   436,   437,   438,   439,   440,     0,
       0,     0,     0,     0,   441,   442,     0,     0,     0,     0,
     444,   445,   446,     0,   447,   448,     0,   449,   450,     0,
       0,     0,     0,     0,   453,     0,     0,   454,     0,     0,
       0,   456,   457,   458,     0,     0,     0,     0,     0,     0,
     459,     0,     0,   460,     0,     0,     0,   461,   462,   463,
     464,     0,     0,  -282,     0,     0,     0,   465,     0,     0,
     467,     0,   469,     0,   135,   470,   136,   137,   138,   139,
     140,     0,     0,     0,     0,     0,   141,     0,     0,     0,
       0,   143,   144,   145,   146,   147,   148,     0,     0,  -327,
       0,     0,     0,   151,     0,     0,     0,   152,     0,     0,
     153,   154,   155,     0,   156,     0,     0,     0,     0,     0,
     159,  3848,     0,   160,   161,     0,   162,   163,     0,     0,
       0,     0,   166,   167,   168,   169,  3849,   171,   172,     0,
     173,   174,     0,   175,     0,   177,     0,   179,   180,   181,
     182,     0,   183,   184,     0,   185,   186,   187,     0,   189,
       0,   190,     0,     0,   191,     0,     0,   192,     0,     0,
       0,   193,     0,     0,     0,   194,   195,   196,     0,     0,
     197,     0,     0,     0,     0,   198,     0,     0,     0,     0,
       0,   200,     0,   201,     0,     0,     0,   202,     0,   203,
     204,   205,   206,     0,     0,     0,     0,     0,     0,   208,
     209,   210,     0,     0,     0,   211,     0,  4221,   213,     0,
     214,   215,   216,     0,     0,   217,   218,     0,   219,   220,
     221,   222,     0,     0,     0,   224,   225,   226,     0,     0,
     227,   228,  3850,   229,   230,   231,     0,     0,     0,     0,
       0,     0,   233,     0,   234,     0,   235,     0,   236,   237,
     238,   239,   240,     0,   241,     0,     0,     0,     0,   243,
       0,     0,     0,     0,     0,   246,     0,     0,     0,   247,
     248,   249,   250,  3851,     0,   251,   252,   253,     0,   254,
       0,   255,     0,     0,     0,     0,   256,     0,     0,     0,
       0,   258,     0,   259,   260,     0,   261,   262,  3852,     0,
       0,   263,     0,     0,     0,   265,     0,     0,   266,  3853,
       0,   267,   268,     0,     0,     0,     0,     0,   269,   270,
       0,   271,     0,   272,     0,   273,   274,     0,     0,     0,
       0,  -282,     0,     0,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,     0,   288,   289,
     290,     0,   291,   292,   293,   294,     0,   295,   296,     0,
       0,     0,     0,   297,   298,   299,   300,   301,   302,     0,
       0,   303,   304,     0,   305,     0,   306,     0,   307,   308,
     309,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,     0,   318,   319,   320,   321,     0,     0,     0,
       0,   323,     0,     0,     0,     0,   324,   325,   326,     0,
     327,   328,  3854,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,     0,     0,   335,
     336,   337,     0,   339,   340,   341,   342,   343,   344,     0,
       0,     0,     0,   347,   348,     0,   349,     0,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,     0,     0,
     372,     0,   374,  -282,     0,   375,     0,     0,     0,   377,
       0,     0,   379,   380,  3855,     0,     0,     0,   382,   383,
     384,   385,   386,   387,     0,   389,   390,     0,   391,     0,
       0,     0,     0,   393,   394,   395,     0,     0,     0,     0,
     397,     0,     0,     0,   398,     0,     0,   400,     0,   402,
       0,   403,     0,     0,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,     0,   411,
       0,     0,   412,     0,   414,     0,     0,     0,     0,   416,
       0,   417,   418,   419,   420,   421,   422,     0,     0,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     431,   432,   433,     0,     0,   434,   435,     0,   436,   437,
     438,   439,   440,     0,     0,     0,     0,     0,   441,   442,
       0,     0,     0,     0,   444,   445,   446,     0,   447,   448,
       0,   449,   450,     0,     0,     0,     0,     0,   453,     0,
       0,   454,     0,     0,     0,   456,   457,   458,     0,     0,
       0,     0,     0,     0,   459,     0,     0,   460,     0,     0,
       0,   461,   462,   463,   464,     0,     0,  -282,     0,     0,
       0,   465,     0,     0,   467,     0,   469,     0,   135,   470,
     136,   137,   138,   139,   140,     0,     0,     0,     0,     0,
     141,     0,     0,     0,     0,   143,   144,   145,   146,   147,
     148,     0,     0,  -327,     0,     0,     0,   151,     0,     0,
       0,   152,     0,     0,   153,   154,   155,     0,   156,     0,
       0,     0,     0,     0,   159,  3848,     0,   160,   161,     0,
     162,   163,     0,     0,     0,     0,   166,   167,   168,   169,
    3849,   171,   172,     0,   173,   174,     0,   175,     0,   177,
       0,   179,   180,   181,   182,     0,   183,   184,     0,   185,
     186,   187,     0,   189,     0,   190,     0,     0,   191,     0,
       0,   192,     0,     0,     0,   193,     0,     0,     0,   194,
     195,   196,     0,     0,   197,     0,     0,     0,     0,   198,
       0,     0,     0,     0,     0,   200,     0,   201,     0,     0,
       0,   202,     0,   203,   204,   205,   206,     0,     0,     0,
       0,     0,     0,   208,   209,   210,     0,     0,     0,   211,
       0,  -301,   213,     0,   214,   215,   216,     0,     0,   217,
     218,     0,   219,   220,   221,   222,     0,     0,     0,   224,
     225,   226,     0,     0,   227,   228,  3850,   229,   230,   231,
       0,     0,     0,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,   240,     0,   241,     0,
       0,     0,     0,   243,     0,     0,     0,     0,     0,   246,
       0,     0,     0,   247,   248,   249,   250,  3851,     0,   251,
     252,   253,     0,   254,     0,   255,     0,     0,     0,     0,
     256,     0,     0,     0,     0,   258,     0,   259,   260,     0,
     261,   262,  3852,     0,     0,   263,     0,     0,     0,   265,
       0,     0,   266,  3853,     0,   267,   268,     0,     0,     0,
       0,     0,   269,   270,     0,   271,     0,   272,     0,   273,
     274,     0,     0,     0,     0,  -282,     0,     0,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,     0,   288,   289,   290,     0,   291,   292,   293,   294,
       0,   295,   296,     0,     0,     0,     0,   297,   298,   299,
     300,   301,   302,     0,     0,   303,   304,     0,   305,     0,
     306,     0,   307,   308,   309,   310,   311,   312,   313,   314,
     315,     0,     0,   316,   317,     0,     0,   318,   319,   320,
     321,     0,     0,     0,     0,   323,     0,     0,     0,     0,
     324,   325,   326,     0,   327,   328,  3854,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   332,
     333,     0,     0,   335,   336,   337,     0,   339,   340,   341,
     342,   343,   344,     0,     0,     0,     0,   347,   348,     0,
     349,     0,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,     0,     0,   359,     0,     0,     0,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,   368,   369,
       0,   370,     0,     0,   372,     0,   374,  -282,     0,   375,
       0,     0,     0,   377,     0,     0,   379,   380,  3855,     0,
       0,     0,   382,   383,   384,   385,   386,   387,     0,   389,
     390,     0,   391,     0,     0,     0,     0,   393,   394,   395,
       0,     0,     0,     0,   397,     0,     0,     0,   398,     0,
       0,   400,     0,   402,     0,   403,     0,     0,   406,   407,
       0,     0,     0,     0,     0,     0,   408,   409,     0,   410,
       0,     0,     0,   411,     0,     0,   412,     0,   414,     0,
       0,     0,     0,   416,     0,   417,   418,   419,   420,   421,
     422,     0,     0,   423,   424,   425,   426,     0,   427,   428,
       0,     0,   429,   430,   431,   432,   433,     0,     0,   434,
     435,     0,   436,   437,   438,   439,   440,     0,     0,     0,
       0,     0,   441,   442,     0,     0,     0,     0,   444,   445,
     446,     0,   447,   448,     0,   449,   450,     0,     0,     0,
       0,     0,   453,     0,     0,   454,     0,     0,     0,   456,
     457,   458,     0,     0,     0,     0,     0,     0,   459,     0,
       0,   460,     0,     0,     0,   461,   462,   463,   464,     0,
       0,  -282,     0,     0,     0,   465,     0,     0,   467,     0,
     469,     0,   135,   470,   136,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,     0,     0,     0,   143,
     144,   145,   146,   147,   148,     0,     0,  -327,     0,     0,
       0,   151,     0,     0,     0,   152,     0,     0,   153,   154,
     155,     0,   156,     0,     0,     0,     0,     0,   159,  3848,
       0,   160,   161,     0,   162,   163,     0,     0,     0,     0,
     166,   167,   168,   169,  3849,   171,   172,     0,   173,   174,
       0,   175,     0,   177,     0,   179,   180,   181,   182,     0,
     183,   184,     0,   185,   186,   187,     0,   189,     0,   190,
       0,     0,   191,     0,     0,   192,     0,     0,     0,   193,
       0,     0,     0,   194,   195,   196,     0,     0,   197,     0,
       0,     0,     0,   198,     0,     0,     0,     0,     0,   200,
       0,   201,     0,     0,     0,   202,     0,   203,   204,   205,
     206,     0,     0,     0,     0,     0,     0,   208,   209,   210,
       0,     0,     0,   211,     0,     0,   213,     0,   214,   215,
     216,     0,     0,   217,   218,     0,   219,   220,   221,   222,
       0,     0,     0,   224,   225,   226,     0,     0,   227,   228,
    3850,   229,   230,   231,     0,     0,     0,     0,     0,     0,
     233,     0,   234,     0,   235,     0,   236,   237,   238,   239,
     240,     0,   241,     0,     0,     0,     0,   243,     0,     0,
       0,     0,     0,   246,     0,     0,     0,   247,   248,   249,
     250,  3851,     0,   251,   252,   253,     0,   254,     0,   255,
       0,     0,     0,     0,   256,     0,     0,     0,     0,   258,
       0,   259,   260,     0,   261,   262,  3852,     0,     0,   263,
       0,     0,     0,   265,     0,     0,   266,  3853,     0,   267,
     268,     0,     0,     0,     0,     0,   269,   270,     0,   271,
       0,   272,     0,   273,   274,     0,     0,     0,     0,  -282,
       0,     0,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,     0,   288,   289,   290,     0,
     291,   292,   293,   294,     0,   295,   296,     0,     0,     0,
       0,   297,   298,   299,   300,   301,   302,     0,     0,   303,
     304,     0,   305,     0,   306,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     0,     0,   316,   317,     0,
       0,   318,   319,   320,   321,     0,     0,     0,     0,   323,
       0,     0,     0,     0,   324,   325,   326,     0,   327,   328,
    3854,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   332,   333,     0,     0,   335,   336,   337,
       0,   339,   340,   341,   342,   343,   344,     0,     0,     0,
       0,   347,   348,     0,   349,     0,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,     0,     0,   359,     0,
       0,     0,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,   368,   369,     0,   370,     0,     0,   372,     0,
     374,  -282,     0,   375,     0,     0,     0,   377,     0,     0,
     379,   380,  3855,     0,     0,     0,   382,   383,   384,   385,
     386,   387,     0,   389,   390,     0,   391,     0,     0,     0,
       0,   393,   394,   395,     0,     0,     0,     0,   397,     0,
       0,     0,   398,     0,     0,   400,     0,   402,     0,   403,
       0,     0,   406,   407,     0,     0,     0,     0,     0,     0,
     408,   409,     0,   410,     0,     0,     0,   411,     0,     0,
     412,     0,   414,     0,     0,     0,     0,   416,     0,   417,
     418,   419,   420,   421,   422,     0,     0,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,     0,   434,   435,     0,   436,   437,   438,   439,
     440,     0,     0,     0,     0,     0,   441,   442,     0,     0,
       0,     0,   444,   445,   446,     0,   447,   448,     0,   449,
     450,     0,     0,     0,     0,     0,   453,     0,     0,   454,
       0,     0,     0,   456,   457,   458,     0,     0,     0,     0,
       0,     0,   459,     0,     0,   460,     0,     0,     0,   461,
     462,   463,   464,     0,     0,  -282,     0,     0,     0,   465,
       0,     0,   467,     0,   469,     0,   135,   470,   136,   137,
     138,   139,   140,     0,     0,     0,     0,     0,   141,     0,
       0,     0,     0,   143,   144,   145,   146,   147,   148,     0,
       0,  -327,     0,     0,     0,   151,     0,     0,     0,   152,
       0,     0,   153,   154,   155,     0,   156,     0,     0,     0,
       0,     0,   159,  3848,     0,   160,   161,     0,   162,   163,
       0,     0,     0,     0,   166,   167,   168,   169,  3849,   171,
     172,     0,   173,   174,     0,   175,     0,   177,     0,   179,
     180,   181,   182,     0,   183,   184,     0,   185,   186,   187,
       0,   189,     0,   190,     0,     0,   191,     0,     0,   192,
       0,     0,     0,   193,     0,     0,     0,   194,   195,   196,
       0,     0,   197,     0,     0,     0,     0,   198,     0,     0,
       0,     0,     0,   200,     0,   201,     0,     0,     0,   202,
       0,   203,   204,   205,   206,     0,     0,     0,     0,     0,
       0,   208,   209,   210,     0,     0,     0,   211,     0,     0,
     213,     0,   214,   215,   216,     0,     0,   217,   218,     0,
     219,   220,   221,   222,     0,     0,     0,   224,   225,   226,
       0,     0,   227,   228,  3850,   229,   230,   231,     0,     0,
       0,     0,     0,     0,   233,     0,   234,     0,   235,     0,
     236,   237,   238,   239,   240,     0,   241,     0,     0,     0,
       0,   243,     0,     0,     0,     0,     0,   246,     0,     0,
       0,   247,   248,   249,   250,  3851,     0,   251,   252,   253,
       0,   254,     0,   255,     0,     0,     0,     0,   256,     0,
       0,     0,     0,   258,     0,   259,   260,     0,   261,   262,
    3852,     0,     0,   263,     0,     0,     0,   265,     0,     0,
     266,  3853,     0,   267,   268,     0,     0,     0,     0,     0,
     269,   270,     0,   271,     0,   272,     0,   273,   274,     0,
       0,     0,     0,  -282,     0,     0,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,     0,
     288,   289,   290,     0,   291,   292,   293,   294,     0,   295,
     296,     0,     0,     0,     0,   297,   298,   299,   300,   301,
     302,     0,     0,   303,   304,     0,   305,     0,   306,     0,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
       0,   316,   317,     0,     0,   318,   319,   320,   321,     0,
       0,     0,     0,   323,     0,     0,     0,     0,   324,   325,
     326,     0,   327,   328,  3854,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   332,   333,     0,
       0,   335,   336,   337,     0,   339,   340,   341,   342,   343,
     344,     0,     0,     0,     0,   347,   348,     0,   349,     0,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
       0,     0,   359,     0,     0,     0,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,   368,   369,     0,   370,
       0,     0,   372,     0,   374,  -282,     0,   375,     0,     0,
       0,   377,     0,     0,   379,   380,  3855,     0,     0,     0,
     382,   383,   384,   385,   386,   387,     0,   389,   390,     0,
     391,     0,     0,     0,     0,   393,   394,   395,     0,     0,
       0,     0,   397,     0,     0,     0,   398,     0,     0,   400,
       0,   402,     0,   403,     0,     0,   406,   407,     0,     0,
       0,     0,     0,     0,   408,   409,     0,   410,     0,     0,
       0,   411,     0,     0,   412,     0,   414,     0,     0,     0,
       0,   416,     0,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,   433,     0,     0,   434,   435,     0,
     436,   437,   438,   439,   440,     0,     0,     0,     0,     0,
     441,   442,     0,     0,     0,     0,   444,   445,   446,     0,
     447,   448,     0,   449,   450,     0,     0,     0,     0,     0,
     453,     0,     0,  4104,     0,     0,     0,   456,   457,   458,
       0,     0,     0,     0,     0,     0,   459,     0,     0,   460,
       0,     0,     0,   461,   462,   463,   464,     0,     0,  -282,
       0,     0,     0,   465,     0,     0,   467,     0,   469,     0,
     135,   470,   136,   137,   138,   139,   140,     0,     0,     0,
       0,     0,   141,     0,     0,     0,     0,   143,   144,   145,
     146,   147,   148,     0,     0,     0,     0,     0,     0,   151,
       0,     0,     0,   152,     0,     0,   153,   154,   155,     0,
     156,     0,     0,     0,     0,     0,   159,     0,     0,   160,
     161,     0,   162,   163,     0,     0,     0,     0,   166,   167,
     168,   169,     0,   171,   172,     0,   173,   174,     0,   175,
       0,   177,     0,   179,   180,   181,   182,     0,   183,   184,
       0,   185,   186,   187,     0,   189,     0,   190,     0,     0,
     191,     0,     0,   192,     0,     0,     0,   193,     0,     0,
       0,   194,   195,   196,     0,     0,   197,     0,     0,     0,
       0,   198,     0,     0,     0,     0,     0,   200,     0,   201,
       0,     0,     0,   202,     0,   203,   204,   205,   206,     0,
       0,     0,     0,     0,     0,   208,   209,   210,     0,     0,
       0,   211,     0,     0,   213,     0,   214,   215,   216,     0,
       0,   217,   218,     0,   219,   220,   221,   222,     0,     0,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,     0,     0,     0,     0,     0,     0,   233,     0,
     234,     0,   235,     0,   236,   237,   238,   239,   240,     0,
     241,     0,     0,     0,     0,   243,     0,     0,     0,     0,
       0,   246,     0,     0,     0,   247,   248,   249,   250,     0,
       0,   251,   252,   253,     0,   254,     0,   255,     0,     0,
       0,     0,   256,     0,     0,     0,     0,   258,     0,   259,
     260,     0,   261,   262,     0,     0,     0,   263,     0,     0,
       0,   265,     0,     0,   266,     0,     0,   267,   268,     0,
       0,     0,     0,     0,   269,   270,     0,   271,     0,   272,
       0,   273,   274,     0,     0,     0,     0,     0,     0,     0,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,     0,   288,   289,   290,     0,   291,   292,
     293,   294,     0,   295,   296,     0,     0,     0,     0,   297,
     298,   299,   300,   301,   302,     0,     0,   303,   304,     0,
     305,     0,   306,     0,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,     0,   316,   317,     0,     0,   318,
     319,   320,   321,     0,     0,     0,     0,   323,     0,     0,
       0,     0,   324,   325,   326,     0,   327,   328,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   332,   333,     0,     0,   335,   336,   337,     0,   339,
     340,   341,   342,   343,   344,     0,     0,     0,     0,   347,
     348,     0,   349,     0,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,     0,     0,   359,     0,     0,     0,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
     368,   369,     0,   370,     0,     0,   372,     0,   374,     0,
       0,   375,     0,     0,     0,   377,     0,     0,   379,   380,
       0,     0,     0,     0,   382,   383,   384,   385,   386,   387,
       0,   389,   390,     0,   391,     0,     0,     0,     0,   393,
     394,   395,     0,     0,     0,     0,   397,     0,     0,     0,
     398,     0,     0,   400,     0,   402,     0,   403,     0,     0,
     406,   407,     0,     0,     0,     0,     0,     0,   408,   409,
       0,   410,     0,     0,     0,   411,     0,     0,   412,     0,
     414,     0,     0,     0,     0,   416,     0,   417,   418,   419,
     420,   421,   422,     0,     0,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
       0,   434,   435,     0,   436,   437,   438,   439,   440,     0,
       0,     0,     0,     0,   441,   442,     0,     0,     0,     0,
     444,   445,   446,     0,   447,   448,     0,   449,   450,     0,
       0,     0,     0,     0,   453,     0,     0,   454,     0,     0,
       0,   456,   457,   458,     0,     0,     0,     0,     0,     0,
     459,     0,     0,   460,     0,     0,     0,   461,   462,   463,
     464,     0,     0,     0,     0,     0,     0,   465,     0,     0,
     467,     0,   469,     0,     0,   470
};

#define yypact_value_is_default(yystate) \
  ((yystate) == (-3592))

#define yytable_value_is_error(yytable_value) \
  YYID (0)

static const yytype_int16 yycheck[] =
{
       6,   124,   619,   556,   949,    20,   950,   556,   578,   666,
     859,     6,   121,    19,    29,  1274,    22,  1078,  1635,  1037,
      35,   661,   662,   685,  1778,    31,   646,  1738,   592,  1339,
    1765,  1262,    38,   501,  1444,    41,  1031,  1032,   776,    45,
    1996,   881,  2299,  2300,  2301,   885,  2416,    53,   914,  2061,
    1131,  2685,  1442,  1153,  2066,   895,  1131,  2487,   698,  2346,
    1160,   887,  2224,   720,  1069,   905,   723,  2266,  2534,  3095,
    1268,   911,   912,   913,  2737,   915,  1102,  1433,   718,     4,
     954,   615,   616,  1908,  1906,  2520,   954,    93,   914,  2040,
     730,   731,   732,  1906,  1765,    22,  2310,  2311,  2153,  2334,
    1194,   633,  1961,  2021,  1837,  2021,  1909,  2411,   841,   115,
    1913,   117,  1425,    46,   120,   121,   122,  1776,   738,   739,
     740,  1924,   117,  3101,  3312,   120,    16,  2289,    24,  2390,
     750,  1934,   749,     9,    33,  1161,  1162,  2196,  2985,  1165,
    1166,  1167,  1168,  1415,  1170,  1171,  1172,  1173,  1174,  1175,
    1176,  1177,    28,    18,    18,  1351,  2327,  2548,    34,  3158,
    3159,  2552,    72,  3162,  2335,  1880,    93,  2010,    18,  3119,
      24,    16,   107,  1486,  1370,  1852,   144,  1861,  1862,    15,
      16,   157,  3181,  2205,  1898,  1381,  1382,    69,  3187,  2333,
     167,    15,    16,  1889,  1878,   167,    75,   930,   144,  2021,
      20,    60,    59,    60,   105,    20,  2379,    50,  2021,    79,
     127,  1895,  1896,    29,   778,  2496,  3369,  2678,    33,    15,
      16,    67,    62,   121,    65,  2551,   255,  1911,  1912,   273,
    1914,  2788,    47,  1917,  1918,   300,   353,  1921,  2668,    59,
      60,    55,  1926,   206,    59,    60,  1930,  1931,  1932,  1933,
     348,    42,   150,  1937,   130,  1939,    83,  2279,   138,   121,
     150,  1945,   154,  2147,  1948,   215,  1950,  2044,    33,   187,
     121,   372,   836,   427,   359,   329,   272,   451,   492,    69,
    2375,  2376,  3308,    70,   219,   150,  1982,  3878,   150,   154,
     154,  1987,   240,    58,   434,   240,   328,  1993,  1994,    15,
      16,   258,  1998,    62,   154,   133,   251,    15,    16,   451,
      76,     8,    15,    16,   820,  3359,   956,   121,   350,   525,
     150,  2005,  2006,  2007,  2008,  2862,   222,   407,    35,    15,
      16,  1425,    20,    35,    15,    16,    19,   621,   122,    15,
      16,  3749,   122,    15,    16,    33,   150,   525,    15,    16,
      15,    16,    15,    16,    75,  2672,    40,   150,   402,    47,
      15,    16,   184,   242,   219,   144,   416,  2318,   222,   161,
     289,    59,    60,  2803,   916,    39,   592,   486,   966,   967,
      15,    16,    15,    16,   495,   215,    75,   377,   492,     8,
      15,    16,  1486,  2488,  2489,   187,  3395,  3201,   559,   560,
     296,   562,   262,    15,    16,  3404,  1068,    15,    16,    63,
      29,   522,   618,   522,    15,    16,  1004,   631,    20,  1081,
     524,   398,   181,   273,  3423,  2603,   398,   933,   424,  3428,
     125,    33,   574,   575,   256,    15,    16,   611,    18,  2756,
     490,   615,   296,   126,   978,    47,  2393,   131,   232,    15,
      16,  1395,   232,  1191,   150,    15,    16,    59,    60,   613,
      15,    16,  2719,   256,  3652,    15,    16,   578,   325,   611,
     388,   525,   552,   125,  3882,   425,   184,   305,   175,   619,
     486,   184,   488,   343,   441,   433,    15,    16,   342,   773,
      15,    16,   437,   344,  3472,  2752,   203,   551,   184,   505,
    3526,   203,   619,   509,  1344,   628,   629,  1347,  2285,  2744,
     611,  2522,   518,  1353,  1924,   613,   522,   374,   524,  2806,
    4111,   242,   358,  1256,   289,   361,  2787,   341,   613,  2790,
    2791,   537,   495,    15,    16,   139,  2395,   328,   570,  1156,
    2399,  1415,    72,  1383,  1164,  1385,   611,  1415,  2809,  1282,
     594,  3108,   402,   242,  2413,  2414,   402,  2379,   587,   565,
     256,  1181,   358,   180,  2423,   361,  2379,  1880,   460,   396,
     410,  3724,   184,   360,   226,  3036,   446,   583,  2496,   459,
    2496,  1407,  1050,  1051,   238,  2536,   592,  3124,   594,   432,
    2449,  1685,   588,  1906,  3572,   425,   568,  1953,   215,   605,
     518,  2745,  2746,  1071,  2777,   611,  2887,   613,   584,   615,
     616,  1485,  1080,   495,   620,   621,  3279,  1485,   586,   625,
      10,  2643,  2644,  2645,  1092,  1093,  1094,   386,   469,   635,
     636,   637,  2291,  1101,  1830,   641,   613,  1663,   514,  1835,
     586,   613,   358,  2358,  2340,   361,   500,  2490,  1674,  2326,
     358,  1677,  1657,   361,  3842,   358,   589,   533,   361,  2518,
      15,    16,   597,  2377,   540,  1199,   775,  2689,  2690,  2691,
      15,    16,   358,   537,  2496,   361,  1240,   358,   605,   685,
     361,   582,   358,  2496,   611,   361,   358,  1425,  3666,   361,
     566,   358,   537,   358,   361,   358,   361,  2010,   361,   589,
    3650,   611,  2398,   358,  2400,   495,   361,  3554,  2021,  2908,
     589,  2407,   611,   630,    15,    16,  3694,   613,   577,   617,
    2604,   537,  2406,   358,  2420,   358,   361,   617,   361,   583,
    2426,  1265,  2004,   358,  2418,   555,   361,   743,  1471,   745,
     555,  1305,  2693,  2694,   594,  2441,   358,  1281,  1486,   361,
     358,  3142,   617,   361,  2813,   617,  2533,   358,    15,    16,
     361,   618,   598,   769,   770,   771,  2462,   773,   774,   775,
     613,   777,   778,  3030,   598,   770,  2487,   886,   358,   774,
     616,   361,   777,   549,  1348,  3176,  1880,   617,  3766,  3977,
    3834,  2886,   358,  3184,   587,   361,  1328,  4205,   358,   558,
    3191,   361,   598,   358,    15,    16,   361,   586,   358,   815,
    2494,   361,  3069,   617,  3140,  3141,   612,   613,   525,   825,
      15,    16,  3148,   525,   617,  3151,  3152,   491,  3132,   358,
     836,   837,   361,   358,  3033,   841,   361,  1379,  2785,  3838,
    2230,  3840,  3168,  3647,  3105,   140,   135,   451,   512,  3027,
    3085,   505,    15,    16,  3089,   469,  3182,   546,    15,    16,
     390,  3187,  3188,  3189,  3190,    15,    16,   555,   563,    58,
    1419,    15,    16,  2627,   538,    45,   358,    15,    16,   361,
     886,   570,   598,  3045,   167,  3351,  1009,  1010,  1011,   570,
     598,   587,   580,    15,    16,   598,   612,   613,   825,    15,
      16,  2912,   306,   342,   829,   613,   782,  3356,  2662,   612,
     837,   563,   598,   185,  3085,  3893,  2010,   598,  3089,  1581,
    3098,   617,   598,   611,   930,   539,   598,  2021,  3358,   374,
     445,   598,   613,   598,   356,   598,   612,  3915,    15,    16,
     612,   613,   118,   598,   950,   612,   613,   612,   613,   612,
     613,  2686,   569,   555,   451,  2777,  3982,  2668,   613,  1825,
      15,    16,  1494,   598,  2777,   598,    81,  2918,   193,  2887,
     976,  2887,   978,   598,   576,   577,    50,   612,  1818,   612,
     613,   976,  2392,  2393,   469,   515,   598,   612,   613,  1829,
     598,  1857,  1832,  1833,   628,   629,   451,   598,   388,  1825,
    2310,  2311,  2735,   358,   518,   613,   361,   611,   118,   373,
     540,   615,   613,   358,   187,  2686,   361,   184,   598,  3041,
       6,  2846,   451,  1029,  3238,  3080,   451,  1033,  2046,   318,
     200,  1857,   598,  3468,  1143,    15,    16,   262,   598,   123,
      15,    16,  3491,   598,  2847,  2358,   256,   613,   598,  2247,
    3837,    15,    16,   613,   605,   419,  1676,   358,   613,    12,
     361,   612,  1068,   613,  2090,  2887,  2379,  2167,   363,   598,
      56,  1180,   451,   598,  2887,  1081,  3542,    15,    16,  3336,
     525,    15,    16,   377,   613,    15,    16,   108,   613,  2445,
     111,  3540,  2803,   154,   270,    24,    15,    16,   370,   489,
     289,   358,  1029,  1765,   361,   182,  1033,  2338,  3343,  3344,
     152,  3719,  2173,  2174,   611,   398,   598,   224,    50,   523,
    2737,   182,   180,  2319,  3758,  1131,   233,  1691,    15,    16,
    2004,   613,   451,    11,    15,    16,  2004,  1143,   267,   224,
     341,     0,  1880,  3094,   583,   349,   550,   358,   233,   359,
     361,   541,   138,   150,    24,  3818,   611,   215,   273,  1693,
     270,  2166,  1271,   358,    15,    16,   361,    12,   335,   345,
     374,  2176,    15,    16,  1180,   515,   119,  2490,   518,  1185,
     222,   134,   611,  2496,  1190,  2266,   611,    15,    16,   273,
    1754,  1755,   582,  1199,   323,   358,   468,    57,   361,    15,
      16,   358,    70,   161,   361,    75,    31,   396,   358,    15,
      16,   361,  2238,   451,   358,   388,   417,   361,    15,    16,
     358,  3829,   147,   361,    15,    16,    15,    16,    22,   187,
     170,   456,   611,   158,  1240,   345,   358,  1786,  3250,   361,
     329,   383,   358,   598,   122,   361,  1252,   760,  1254,   613,
    1256,    15,    16,   598,  4280,  2336,  3115,   364,   613,  1265,
      12,  2336,  2652,  1190,  2358,  1271,    15,    16,   613,   154,
      63,  3470,  2010,    12,   444,  1281,  1282,  3136,    12,   364,
     469,   358,   152,  2021,   361,   568,   451,   388,   231,   134,
      51,   159,   611,   222,   196,    15,    16,   598,   168,  1305,
     342,    62,  1308,   358,  4091,  4092,   361,   167,    15,    16,
    1316,   171,   613,  1422,   557,    15,    16,   606,   607,   608,
     609,   525,   182,  1329,  1330,  1331,  1332,  1333,  1334,  3778,
     196,   184,  1257,  1339,  1329,  1330,  1331,   850,  1333,  1345,
    1346,   598,  1348,   977,  2425,   518,  1352,   557,    15,    16,
    2425,  1346,   222,   339,    15,    16,   613,  1352,   432,    15,
      16,  3791,  3811,    15,    16,   222,   495,   296,   162,   612,
    1376,   451,   548,   611,   240,  2785,    15,    16,   358,   518,
     233,   361,   134,   358,    15,    16,   361,   598,   489,    15,
      16,    15,    16,  1027,   358,   134,  2490,   361,  1323,   460,
     134,   612,  2496,   598,   344,  1332,   611,  1334,   233,   341,
    3697,    15,    16,   451,   619,   401,  1422,   403,   613,   515,
     358,   459,   518,   361,   358,   200,   296,   361,   358,  1435,
     255,   361,   357,  1439,  1440,   598,   525,  2847,   548,   358,
     541,   598,   361,   161,   304,   238,   611,   122,   598,  1376,
     613,    15,    16,   104,   598,  3654,   613,   467,   500,   233,
     598,   404,   551,   613,  2777,  1471,   336,    24,   243,   613,
     566,   358,   342,  3485,   361,   613,   598,   358,   252,  3909,
     361,   582,   598,   361,  1490,   342,  1492,  1493,   215,  1495,
    1496,   613,   360,   359,    15,    16,   612,  1492,  1493,   104,
     432,   262,  1508,  1428,  1510,   612,   154,   358,  1435,   530,
     361,   569,   533,  1440,  3210,   358,   619,  2535,   361,    15,
      16,   598,   611,  2623,    15,    16,   537,   459,    15,    16,
     358,   611,   184,   361,  3696,   612,   574,   575,   398,   256,
     123,   583,   358,   598,   337,   361,   273,    15,    16,    97,
    2170,   561,   358,  1066,   205,   361,   161,   612,  1681,   502,
     339,   358,  3852,  3853,   361,    15,    16,   358,   200,   358,
     361,   613,   361,   611,  2887,  1581,  1582,    15,    16,   175,
     214,   184,   187,    15,    16,  1694,   411,    15,    16,    15,
      16,   601,  2673,  3987,   358,   152,  3990,   361,  2673,   524,
    2068,   182,   494,   543,  1117,   384,    12,   499,  1121,   358,
    1733,   243,   361,  2081,  2271,  2272,  2273,   329,   598,   559,
    2358,   204,  3012,   598,   118,    15,    16,   230,  3584,  3585,
     500,  4001,   612,  3368,   598,  1641,  3535,   612,   358,  3896,
      16,   361,   359,   500,    15,    16,  2114,  3358,   612,   219,
     246,   358,    15,    16,   361,   131,    15,    16,   358,   118,
     598,   361,  3279,   257,   598,   222,   260,    82,   598,   256,
     146,   398,  3571,   243,   612,   223,  3411,  1683,   612,   598,
     338,   339,   612,   177,   265,  1691,   101,  1693,  1694,    16,
     273,   358,   240,   612,   361,   277,   278,   358,   491,  1705,
     361,  1707,   358,   251,  2306,   361,   358,  1713,  1714,   361,
    1716,   598,   505,   583,   365,  2183,   546,   598,   177,   358,
    1726,  4115,   361,   374,  1730,   612,   583,   358,   134,   380,
     361,   612,   358,   577,   358,   361,   580,   361,   611,   296,
     570,    15,    16,   613,   203,   341,   619,   598,  1754,  1755,
    1756,  1757,  2490,   613,   358,   598,   359,   361,  2496,  1765,
      16,   612,  1768,  1769,  1770,   118,   589,  3660,  3661,   612,
     598,   605,   359,  3820,  3426,  3822,   270,  3429,   612,  1785,
     328,   518,   598,   388,   612,   342,  1713,  1714,  1794,  1716,
     613,   196,   598,  2887,   358,  2397,   612,   361,  1714,  1726,
    1716,   598,   595,  1730,   214,   399,   612,   598,   135,   598,
     488,   270,   211,   525,   213,   612,   522,  4107,  4108,  2421,
    2422,   612,   473,   612,   177,  1831,   118,  1752,   219,  1756,
    1757,   509,   414,   415,   598,  3487,  2685,   358,  1844,   551,
     361,  1768,  1769,  1770,   219,  1851,   219,   329,   612,   598,
    3081,   345,  1768,  1769,  1770,   402,  2405,    15,    16,   570,
    2726,  2922,   358,   612,  1789,   361,  2732,   358,    15,    16,
     361,   358,   528,   570,   361,   196,   423,  3770,   598,   135,
     353,  3774,  2943,  2944,   230,   177,   345,    12,   575,   437,
     358,   598,   612,   361,  2734,   590,   591,    24,   598,   611,
    2726,   612,   613,  2964,  1831,   612,  2732,   454,   358,    46,
    2019,   361,   612,   518,  2023,   566,   613,   270,   613,   211,
     358,   213,   619,   361,  1851,   184,   358,    38,  3238,   361,
     358,   598,   358,   361,    45,   361,   541,   598,  3831,  3832,
    1865,  1947,   598,   500,   459,   612,   598,   589,    75,  1874,
    1875,   612,  2061,   501,   570,  1961,  3037,  2066,   273,   598,
    1885,  1886,  1887,  1888,   617,  1890,  1891,   598,   358,   612,
     193,   361,   598,   612,   598,   612,   613,   582,   270,   137,
     564,   612,  3678,  3679,  3680,  3681,   612,   358,   612,   619,
     361,   318,   345,   355,   598,   358,   161,   613,   361,   358,
     489,   148,   361,   619,  2442,    73,   181,  3148,   612,   134,
    3151,  3152,  3093,  2019,  4271,    33,   118,  2023,  3093,  2025,
     611,   480,  2028,     6,  2686,   425,   583,  3168,   613,  2035,
    2036,  2037,  2038,  2028,   598,  2041,  3790,   612,   613,   262,
      11,   168,    60,   525,    12,  3126,    59,    60,   612,   611,
    2159,  3126,   611,   345,   548,  2061,   613,    70,  1983,  1984,
    2066,  1986,   318,  1988,  1989,  1990,  1991,  1992,   616,   551,
    1995,   611,  1997,    41,   611,   177,  3760,   598,   611,   204,
    3791,   611,  2191,   135,   358,   611,    11,   361,    73,   548,
     108,   612,   611,   111,  1241,   222,   118,  1244,   611,   121,
    1247,   119,   598,   612,   613,   611,  2670,   598,  2035,  2036,
    2037,   598,   611,   181,  3798,  3110,  3111,  3801,  3802,  3803,
    3804,   612,    90,    18,   170,   612,   611,    95,   351,   611,
     598,   612,   613,   612,   613,   462,   463,   611,   528,   611,
     571,   572,   611,   574,   612,   576,   194,   611,   598,  2887,
    2618,   219,  2716,  2159,   611,   177,   611,  3567,  3568,   611,
     598,   619,   612,    75,   612,   613,   598,    25,   270,   296,
     598,   611,   598,   525,   612,   243,   612,   613,  2184,   104,
     612,   203,   612,   613,   612,  2191,   612,    15,    16,   611,
    3886,  2300,   611,  2302,  2303,   548,   181,   122,  3909,  2205,
     358,  3818,    97,   361,   612,   613,   462,   463,   598,   336,
     611,   358,    70,   611,   361,   342,   611,    75,  3236,    33,
     164,  3905,  3906,   612,   613,   611,  3307,   598,   612,   613,
    3914,  2237,  3307,   456,   219,   598,  2345,  2346,   350,   598,
     152,   612,   611,   345,    58,   293,   294,   611,   270,   612,
     298,   299,    66,   612,   528,   150,   548,   611,   243,   154,
    2266,   611,   187,   121,   503,   504,   318,   235,   507,   508,
     116,   611,   511,  2279,   513,   602,   603,   604,   605,   606,
     607,   608,   609,   611,    75,   180,  2292,   182,  2294,   611,
     215,   611,   338,   339,  2300,   611,  2302,  2303,   344,    59,
      60,   196,   612,   613,  2310,  2311,   201,  2416,   612,   613,
     222,   611,   330,   118,   128,  3259,   612,   613,   386,   118,
     215,   612,   613,   345,   598,   612,   613,   611,   223,   611,
    2336,   612,   613,   612,   613,   230,   611,   305,   152,  2345,
    2346,   266,   156,   612,   613,   240,   602,   603,   604,   605,
     606,   607,   608,   609,   611,  2793,   251,   482,   483,   611,
     485,   256,   611,   488,   210,   611,    12,  2292,   612,   613,
     265,  2386,   177,   500,   611,   189,   501,   611,   177,  2385,
    3441,  2396,    30,   611,  2390,   243,  2824,  2402,   373,  2395,
     612,   613,   206,  2399,  2832,  2401,   611,  2835,   203,   367,
     611,   386,   612,   613,   203,  2411,   220,  2413,  2414,  2424,
    2416,   612,   613,   611,  2429,   612,   613,  2423,   611,  2425,
    2435,  2436,   612,   613,   336,   612,   613,   611,  2434,    77,
     342,   222,  2870,   328,   611,    18,  2442,    15,    16,  4193,
     598,  3061,   611,  2449,  2450,    75,   548,   611,   104,   467,
     611,   598,   611,   267,  2460,   350,   583,   612,   613,    89,
     612,   613,   308,   388,   359,   270,   312,   612,   613,   612,
     613,   270,   611,   319,   500,   289,   612,   613,  2403,  2404,
     338,   339,   612,   613,  2952,   611,   344,   611,   134,  3234,
    3235,   611,   350,   388,   612,   613,   408,   543,   612,   613,
     148,    31,   440,  2428,   612,   613,  2629,  2434,   476,   612,
     613,  2517,  2518,   559,    97,   533,    97,   612,   613,  1043,
    1044,  1045,   612,   613,  2992,   611,   548,  4281,   386,   611,
     186,  1055,   457,   611,   112,   113,   114,   115,   116,   611,
     345,   780,   437,   561,   512,   336,   345,   612,   613,   395,
     611,   342,   604,   605,   606,   607,   608,   609,   204,   612,
     613,  2486,  1086,   219,   459,  1089,   611,   150,   611,    62,
     611,   154,   611,   387,   612,   613,   612,   613,   516,   570,
      73,   387,   396,   397,   522,  1109,  1110,   440,   500,  1113,
    2517,   516,    85,   518,    97,   144,   145,   455,   412,   182,
     612,   613,   356,   449,   515,   135,   501,   350,  1132,  1133,
     266,   135,    62,   196,   350,   245,   430,   408,   201,  3364,
      97,  3506,  3507,    73,   613,  1118,  1119,   215,   566,   207,
     208,   209,   210,  2639,   474,    85,  2642,  2643,  2644,  2645,
     223,   553,   223,    48,   582,  2651,    29,   230,  3907,  3908,
    3047,  3048,  3005,  3006,    57,   469,   470,   240,   267,   240,
    3604,  3687,   557,  2669,  2670,   613,  3610,  2673,   251,    48,
     251,   583,   350,   256,   569,   570,  3288,  3289,   350,   445,
    2686,   495,   265,  2689,  2690,  2691,   316,   557,   181,   606,
     160,   135,   587,   186,   589,   459,  2702,  2806,  3247,   256,
     558,   613,  2708,   233,  2710,   519,   611,  3788,   182,   500,
    2716,   341,   495,  3788,    78,   529,    80,   612,   613,   515,
     223,   616,   617,   160,  2651,   255,   219,   495,   267,   151,
     308,   181,   310,   311,   312,   383,   186,   240,    84,   585,
     613,   319,   352,   548,   511,   328,   223,   328,   251,   548,
     243,   612,   150,   567,   600,   121,   107,   121,   406,   618,
       6,   611,   553,   240,   167,   106,     4,   350,   171,   219,
     400,   450,   582,   233,   251,   613,   359,  2702,   142,   182,
     358,  2787,   373,   361,  2790,  2791,   135,  2793,   318,   233,
     438,    55,   583,   243,   318,   417,   164,   107,   212,   619,
    2806,   457,   613,  2809,   613,   388,    12,    70,   338,   339,
     586,   612,   176,    35,   612,   525,   134,   395,  2824,     9,
     613,   477,   619,   612,   612,   328,  2832,   619,   255,  2835,
     611,  3576,  3577,   619,  3579,  3580,   482,   483,   484,   485,
     486,   487,   488,   152,   613,   618,   494,   350,   267,  2855,
     267,   328,  2858,    48,   437,   501,   437,  2863,  2864,   489,
     516,   267,   518,   135,  2870,   267,   522,   267,   267,   613,
     448,   449,   515,   350,   318,   262,   459,   611,   613,  2885,
     373,   411,  2807,   372,   613,   537,   613,   537,    12,   111,
    2815,   613,  2898,   386,   154,  3839,   118,   613,   613,  2905,
    3981,   304,   558,  3389,  3390,   613,  3981,   233,   606,  3758,
     566,  2917,   234,   513,   172,   182,  3402,   613,   501,   496,
     501,  3407,   515,   562,  3581,  3582,  3583,    25,    26,   613,
     472,  2858,   462,   463,   437,   375,   386,   613,   462,   463,
     613,  3050,   135,   130,  3430,   475,   612,  3433,   170,   154,
     154,   154,   154,   154,   154,   177,   154,  3066,   154,   613,
     437,    59,    60,    61,   593,  2890,   154,   564,   154,   318,
     154,   154,    70,   154,   557,  3615,   154,    75,  2905,   154,
    2986,   203,   154,   154,   477,    83,   154,   570,  2994,   569,
     187,  1515,   350,   350,  3543,   398,   350,   613,   501,   184,
     612,   612,   184,   606,   587,   612,   589,   585,   612,   107,
     612,   612,  3018,   612,   557,   613,   605,   611,   462,   463,
     598,   599,   600,   121,   501,   612,   124,   477,   612,   612,
     613,  3037,  3038,   616,   617,  3041,   612,   612,   612,   612,
     233,   613,   613,  4069,  3050,   409,   318,   612,   270,   612,
    3056,   460,   611,   611,   152,   609,   611,   613,   537,  1583,
    3066,   612,   587,  1587,  3634,   558,   221,   611,  3074,  2994,
      11,   507,   602,   603,   604,   605,   606,   607,   608,   609,
     604,   605,   606,   607,   608,   609,  1610,  3093,   194,   184,
     619,   184,   612,   396,   459,  3218,   613,   613,  3738,  3105,
     182,   154,   155,    46,   489,   326,   450,   329,   558,  3115,
      73,  3117,   489,   462,   463,   489,   489,   489,   340,   373,
    3126,   219,   344,   345,   373,   318,  3132,   537,  3134,   227,
    3136,   373,   130,  4159,   241,   188,  4080,  4081,  3691,  4083,
     516,  3250,   241,   130,   242,   198,   516,  4228,   373,     6,
      46,   371,   611,  4228,   373,   373,    13,    14,   602,   603,
     604,   605,   606,   607,   608,   609,   373,   619,    25,    26,
    4251,   350,   611,   611,   373,   266,  4251,   570,   612,   148,
     612,   229,  4126,   236,  4128,  4129,    75,  4268,   229,   619,
     462,   463,   612,  4268,   247,  4276,  3202,   295,   619,    56,
      89,  4276,  3208,    75,    61,    62,   619,  3202,   612,   537,
     537,    68,   619,  3322,   537,   313,   612,   612,    75,   613,
     612,   274,   612,   525,   262,   594,    83,  3233,  3234,  3235,
     619,   619,  3238,   613,    46,   107,    93,    35,   154,   537,
     129,   154,   356,   237,  3250,  4189,   184,   184,   611,   611,
     107,   611,   611,  3806,   603,   604,   605,   606,   607,   608,
     609,  3878,   184,   230,   121,   184,   619,   124,   366,   462,
     463,   619,   345,   154,   131,   132,   374,   613,   240,   332,
     152,   138,   240,   362,   309,   107,   107,   243,   243,   146,
     619,   611,   420,   150,   175,   152,  3302,  4242,   611,  3224,
    3409,  3307,   196,   525,   355,    25,    26,   188,   530,   525,
    3963,   533,    18,   111,   434,   611,  3322,   198,   373,   619,
     118,   543,   359,   180,   606,   611,   548,   611,   231,   551,
     602,   603,   604,   605,   606,   607,   608,   609,   231,    59,
      60,    61,   612,   612,   442,   619,   612,   219,  3897,   589,
      70,   612,   215,   612,   606,    75,   245,   612,  3364,  3374,
     217,   612,   219,    83,   612,   246,   247,   611,  3973,   350,
     227,   612,   170,   257,   613,  3381,  3485,   373,   613,   177,
     612,   184,   604,   605,   233,   242,   619,   107,   253,   563,
     104,    70,   240,   274,   240,   612,   350,   611,   613,   243,
     243,   121,   500,  3409,   124,   203,  3529,    12,    13,   602,
     603,   604,   605,   606,   607,   608,   609,    18,   516,   613,
     611,   613,   520,   295,   613,   537,   350,   316,  3434,   350,
    3436,  4036,   152,   613,   611,    54,  3545,    46,   295,   612,
     474,   313,  4095,   451,   611,    64,  4051,   161,   612,   338,
     339,   611,   341,   611,   335,    74,   313,  3463,   612,   557,
     317,   256,    46,   453,   336,   612,   589,    86,    87,    88,
     402,   194,   270,   187,   141,   249,   612,   612,   196,  3485,
     613,   461,   611,   102,   611,  3410,   240,   240,   613,   611,
     121,    96,   121,   611,  4111,   382,   611,   354,   619,   219,
     350,   384,   359,   350,   385,   219,    75,   227,   612,   366,
     474,   400,   446,   613,    18,   613,   373,   374,   612,    33,
     125,  3446,   242,  4176,   612,  4178,   612,  3452,   612,   612,
      33,   329,   612,   138,  4139,   255,   612,   612,   612,  3545,
     612,   245,   315,   396,  4149,  4198,   344,   345,   405,   265,
    4155,   356,   266,   589,   230,   611,   161,  3563,   163,   613,
     612,   619,   419,   420,   421,   422,    46,  4120,   201,   174,
    3576,  3577,   315,  3579,  3580,   295,   402,  4230,  4231,   525,
      12,    13,  4187,   613,   570,   442,   525,   570,  3697,   194,
     611,    33,   611,   313,   611,  4200,   611,  4202,   611,   292,
     489,   612,   611,   580,   580,   611,   563,   243,   121,   243,
     344,    33,  4217,   345,   219,    79,    58,   469,  4235,   137,
     612,   226,   613,   611,    66,   315,   345,   166,   500,   243,
     525,   230,   518,   525,   525,   570,   611,   570,   574,  3645,
    3646,   612,   612,   500,   516,   350,   366,   575,  4253,  4254,
     434,  3657,   340,  4258,   374,  4272,   345,   356,   589,   516,
     265,    13,   613,   520,    96,   612,   563,   506,   613,   383,
     182,   611,   182,   493,   388,   369,   527,   130,   130,   152,
    3686,   611,   611,  3689,   611,   501,   128,   544,   307,   612,
     388,  3697,   612,   125,   612,    72,    62,   410,   356,    62,
     557,   149,    30,   620,   586,   324,   138,   613,   612,   611,
     152,   527,   258,   507,   156,    46,    46,     5,   350,  3646,
     350,  3727,   442,   611,   586,   184,   611,   525,   356,   161,
     356,   163,   530,    30,   129,   533,   137,   611,    46,    46,
     147,    46,   174,   457,    96,   543,   563,   189,   230,   125,
     548,   148,   143,   551,   441,   611,   617,  3880,   612,  3686,
     617,    46,   194,    46,   206,    46,   148,   586,   214,   120,
     272,   443,   617,   125,   212,   613,   612,    52,   220,   620,
     500,    46,  3788,   617,   389,   612,   138,   219,   393,   612,
     148,   528,   617,   199,   226,   613,   516,   215,   613,   613,
     520,  3910,   516,    52,   424,   410,   604,   605,   522,   161,
     182,   163,   182,   418,  3820,   182,  3822,   345,  3824,   611,
     528,   426,   174,   588,   459,   267,   121,   541,   447,   183,
     646,   613,  3859,   265,  3759,   651,  1999,   557,  2198,  3210,
    2374,  3211,   194,  3849,   629,  3461,   451,   289,  3854,  3751,
    3881,  4059,   566,   963,  3459,  4060,  3463,  4272,  3644,   464,
     465,  4225,    45,  1764,  2686,   681,   557,   219,   582,  3746,
    4232,  3746,  3746,  3746,   226,  3746,  4136,  3746,  3746,  3746,
    3746,   697,  4029,  3746,   503,  4136,  4108,  4055,  3746,  4054,
    3746,   611,  4001,  3746,  1002,  3901,  1431,  3653,  1685,  1433,
    1960,  1441,   521,  2830,  3910,   510,  2664,  3301,  3901,  2669,
    3916,  3687,  3018,   265,  3985,  3304,  1268,  4159,  4077,  4120,
    3806,  1485,   738,   739,   740,   741,   496,  3227,  1953,  2891,
    2518,  1961,  2452,  3136,   750,  3115,   541,  3159,  3159,  3192,
    3602,  3373,  3418,  3897,  3409,   387,  3066,  3828,    11,  3955,
      11,  1499,  3762,  3831,   396,   397,  3774,   389,   563,  3770,
     565,   393,  2033,  3657,  3610,  1960,  4075,  2445,  3117,  3378,
     412,  3832,  1839,  1391,  1481,  3981,  2261,  1756,   410,  3904,
    3116,  2651,  1440,  2230,  3013,  2283,   418,  2149,   430,  3633,
     577,  1775,   872,  2994,   426,  4001,  2629,  2067,  2337,  2148,
    4123,  3083,  3712,  1081,  4016,  3570,  3208,  4017,  1055,  2177,
    4016,  4017,  3126,  4195,  3545,  3564,  1407,  2288,  2038,   451,
    1256,  2225,  2265,  3307,  3032,  1282,  3031,   469,   470,  3093,
    3981,     6,   464,   465,   567,  1508,   642,   389,    13,   556,
    1337,  1826,  1367,  1704,  3134,  1827,  3016,  4113,  4008,  4157,
      25,    26,  4087,   495,  1288,  4268,  4276,  3411,   410,  3037,
    1316,  1780,  3074,  2718,  3333,  3553,   418,  3992,  3993,  4075,
    1730,   548,  4195,   515,   426,  1306,   518,   519,   510,  1249,
    3676,    56,   853,  2639,  3682,   629,    61,   529,   549,  1490,
     858,   629,   492,   492,   629,    -1,    -1,    -1,    -1,   451,
      75,    -1,    -1,   527,    -1,    -1,    -1,    -1,    83,   541,
      -1,    -1,   464,   465,    -1,    -1,    -1,    -1,    93,    -1,
      -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,    -1,    -1,
      -1,   563,   107,   565,    -1,  4141,    -1,    -1,  4247,    -1,
      -1,    -1,  4148,    -1,    -1,    -1,   121,    -1,    -1,   124,
      -1,    -1,    -1,    -1,  4277,    -1,   131,    -1,   510,    -1,
      -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,   984,    -1,
      -1,   146,    -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   541,
      -1,    -1,    -1,  4199,    -1,    -1,    -1,    -1,  4204,    -1,
      -1,    -1,    -1,    -1,    -1,   180,    -1,    -1,    -1,    -1,
      -1,   563,    -1,   565,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4228,  1039,  1040,    -1,    -1,   651,    -1,  4235,
      -1,    -1,  1048,  1049,  1050,  1051,  1052,  1053,  1054,    -1,
      -1,  4247,    -1,  1059,   219,  4251,  1062,  1063,    -1,  1065,
      -1,  1067,   227,    -1,    -1,  1071,    -1,   681,  1074,  1075,
    1076,  1077,  4268,  1079,  1080,    -1,  4272,   242,    -1,    -1,
    4276,  1087,  1088,   697,  1090,  1091,  1092,  1093,  1094,    -1,
    1096,    -1,  1098,  1099,  1100,  1101,  1102,  1103,  1104,  1105,
    1106,  1107,  1108,    -1,    -1,  1111,  1112,    -1,  1114,    -1,
    1116,    -1,    -1,    -1,  1120,    -1,  1122,  1123,    -1,    -1,
      -1,   112,   113,   114,   115,   116,    -1,   741,  1134,  1135,
     295,    -1,    -1,    -1,    -1,    -1,  1142,    -1,    -1,    -1,
      -1,    -1,    -1,  1149,  1150,  1151,    -1,  1153,   313,    -1,
      -1,    -1,   317,    -1,  1160,  1161,  1162,    -1,  1164,  1165,
    1166,  1167,  1168,    -1,  1170,  1171,  1172,  1173,  1174,  1175,
    1176,  1177,    -1,    -1,    -1,  1181,  1182,    23,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    34,    -1,
      -1,    -1,    -1,    -1,   359,    -1,    -1,    -1,    -1,    -1,
      -1,   366,    -1,    -1,   216,    -1,    -1,    -1,    -1,   374,
      -1,    -1,    -1,    59,    60,    -1,   207,   208,   209,   210,
      66,    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    -1,    94,    -1,
      96,    -1,    -1,    -1,    -1,   420,    -1,    -1,    -1,   105,
      -1,    -1,    -1,   275,   276,   277,   278,   279,   280,    -1,
     282,   283,   284,   285,   286,   287,   288,   442,   290,   291,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    25,    26,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   151,   152,    -1,    -1,    -1,
    1316,   157,    -1,    -1,   160,    -1,    -1,   308,  1324,   310,
     311,   312,    -1,    -1,    -1,    -1,    -1,    -1,   319,    -1,
      61,    -1,    -1,    -1,    -1,   500,    -1,    -1,    -1,   185,
      -1,   187,    -1,    -1,    75,    -1,    -1,   193,    -1,   195,
      -1,   516,    83,    -1,    -1,   520,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     984,    -1,   218,   219,   220,    -1,   107,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     121,    -1,   557,   124,    -1,   241,    -1,    -1,    -1,    -1,
      -1,    -1,   414,   415,   395,    -1,    -1,    -1,    -1,    -1,
      -1,  3746,    -1,    -1,    -1,    -1,   262,    -1,    -1,    -1,
      -1,   152,    -1,    -1,    -1,  1039,  1040,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1048,  1049,    -1,    -1,  1052,  1053,
    1054,    -1,    -1,   289,    -1,  1059,    -1,    -1,  1062,  1063,
      -1,  1065,    -1,  1067,    -1,    -1,    -1,   448,   449,    -1,
    1074,  1075,  1076,  1077,    -1,  1079,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1087,  1088,    -1,  1090,  1091,    -1,    -1,
      -1,    -1,  1096,    -1,  1098,  1099,  1100,    -1,   219,  1103,
    1104,  1105,  1106,  1107,  1108,    -1,   227,  1111,  1112,    -1,
    1114,    -1,  1116,    -1,    -1,    -1,  1120,   353,  1122,  1123,
      -1,   242,    -1,    -1,    -1,  1521,    -1,  3852,  3853,    -1,
    1134,  1135,    -1,    -1,    -1,    25,    26,    -1,  1142,    -1,
     376,    -1,    -1,    -1,    -1,  1149,  1150,  1151,    -1,    -1,
      -1,   387,   388,    -1,    -1,   391,   392,    -1,    -1,    -1,
      -1,   397,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,
      60,    61,    -1,    -1,   295,    -1,    -1,   413,  1182,    -1,
      70,    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,
      -1,    -1,   313,    83,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   585,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   599,   600,
     456,  1617,  1618,  1619,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   121,    -1,   469,   124,  1631,    -1,  3962,  3963,    -1,
      -1,    -1,    -1,    -1,    -1,   366,    -1,    -1,  3973,    -1,
      -1,    -1,    -1,   374,    -1,    -1,    -1,    -1,    -1,   495,
      -1,  1657,   152,    -1,   500,    -1,    -1,  1663,    -1,    -1,
    1666,    -1,  1668,    -1,    -1,    -1,    -1,    -1,  1674,    -1,
    1676,  1677,   518,   519,    -1,    -1,   522,    -1,    -1,    -1,
      -1,    -1,    -1,   529,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4036,  1316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1324,   442,    -1,    -1,    -1,    -1,  4051,    -1,    -1,   219,
      -1,   567,    -1,    -1,    -1,    -1,    -1,   227,    -1,    -1,
      -1,    -1,   578,    -1,    -1,    -1,    -1,    -1,   584,    -1,
      -1,    -1,   242,    -1,    -1,  1751,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4095,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,
      -1,    -1,  4107,  4108,    -1,    13,    14,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,    -1,    30,    -1,    -1,   295,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4139,    -1,    -1,    -1,    -1,    -1,
      48,    49,    -1,   313,  4149,    -1,    -1,    -1,    56,    -1,
    4155,    -1,    -1,    61,    62,    -1,   557,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,
      -1,  4176,    -1,  4178,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4187,    -1,    -1,    -1,    -1,    -1,    96,    -1,
      -1,    -1,    -1,  4198,    -1,  4200,   366,  4202,    -1,    -1,
      -1,    -1,    -1,    -1,   374,    -1,    -1,    -1,    -1,   117,
      -1,    -1,  4217,    -1,    -1,    -1,    -1,   125,   126,   127,
      -1,    -1,    -1,    -1,    -1,  4230,  4231,    -1,    -1,   137,
     138,    -1,    -1,    -1,    -1,    -1,    -1,  1521,    -1,    -1,
      -1,    -1,   150,    -1,    -1,    -1,    -1,    -1,  4253,  4254,
      -1,    -1,    -1,  4258,    -1,   163,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   179,   442,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,
      -1,   199,    -1,    -1,   202,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1980,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,
     228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     500,    -1,    -1,  1617,  1618,  1619,   244,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   516,    -1,    -1,    -1,
     520,    -1,    -1,   261,    -1,    -1,    -1,   265,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2047,    -1,  1657,    -1,  2051,    -1,    -1,    -1,    -1,
    2056,  2057,  1666,    -1,  1668,    -1,    -1,   557,    -1,  2065,
      -1,    -1,  2068,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2078,    -1,  2080,  2081,    -1,  2083,  2084,  2085,
    2086,  2087,    -1,    -1,  2090,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2099,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2107,    -1,  2109,    -1,  2111,  2112,  2113,  2114,    -1,
      -1,    -1,  2118,  2119,  2120,    -1,   354,    -1,    -1,  2125,
    2126,  2127,    -1,  2129,    -1,  2131,    -1,  2133,    -1,  2135,
      -1,  2137,    -1,    -1,    -1,   373,  2142,  1751,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2160,    -1,   394,    -1,    -1,    -1,
      -1,  2167,    -1,    -1,  2170,    -1,    -1,    -1,    -1,    -1,
    2176,    -1,    -1,  2179,    -1,    -1,    -1,  2183,    -1,   417,
      -1,    -1,   420,    -1,   422,    -1,    -1,   425,    -1,    -1,
     428,   429,    -1,    -1,    -1,    -1,    -1,    -1,   436,    -1,
     438,    -1,    -1,    -1,    -1,    -1,    -1,   445,    -1,    -1,
      -1,    -1,    -1,   451,    -1,    13,    14,    -1,    -1,    -1,
      -1,   459,    -1,    -1,    -1,    -1,   464,    -1,   466,    -1,
      -1,   469,  2238,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      48,    49,    -1,    -1,    -1,    -1,   494,    -1,    56,    -1,
      -1,   499,    -1,    61,    62,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   544,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   556,   117,
      -1,    -1,   560,    -1,    -1,   563,    -1,   125,   126,   127,
      -1,   569,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,
     138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2357,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,
      -1,    -1,    -1,    -1,    -1,   163,  1980,    -1,    -1,  2375,
    2376,    -1,    -1,   611,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,
      -1,   199,    -1,    -1,   202,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,
     228,    -1,    -1,  2047,    -1,    -1,    -1,  2051,    -1,    -1,
      -1,    -1,  2056,  2057,    -1,    -1,   244,    -1,    -1,    -1,
      -1,  2065,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   261,  2078,    -1,  2080,   265,    -1,  2083,
    2084,  2085,  2086,  2087,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2488,  2489,    -1,  2099,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2107,    -1,  2109,    -1,  2111,  2112,  2113,
      -1,    -1,    -1,    -1,  2118,  2119,  2120,    -1,    -1,    -1,
      -1,  2125,  2126,  2127,    -1,  2129,    -1,  2131,    -1,  2133,
      -1,  2135,    -1,  2137,    -1,    -1,    -1,    -1,  2142,    -1,
      -1,    -1,    -1,  2539,    -1,    -1,    -1,  2543,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2160,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   354,    -1,    -1,  2565,
    2566,    -1,  2176,    -1,    -1,  2179,    -1,    -1,    -1,    -1,
      32,    33,    -1,    -1,    -1,   373,    38,    -1,    40,  2585,
      42,    43,    -1,    -1,    -1,   383,    -1,    -1,  2594,    -1,
    2596,    -1,  2598,    -1,    -1,    -1,   394,    -1,    60,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2618,    -1,    -1,    -1,    -1,  2623,    -1,   417,
      -1,    -1,   420,    -1,   422,    -1,    -1,   425,    -1,    -1,
     428,   429,    -1,    -1,    -1,    -1,    -1,    -1,   436,    -1,
     438,  2647,    -1,    -1,    -1,    -1,   108,   445,    -1,   111,
      -1,    -1,    -1,   451,    -1,    -1,    -1,   119,    -1,    -1,
      -1,   459,    -1,    -1,    -1,    -1,   464,    -1,   466,    -1,
      -1,   469,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   153,    -1,    -1,    -1,    -1,   494,    -1,    -1,    -1,
      -1,   499,    -1,    -1,    -1,  2711,    -1,    -1,    -1,  2715,
      -1,    -1,    -1,    -1,   176,    -1,   178,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,   191,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   544,    -1,    -1,    -1,
      -1,    -1,    -1,  2759,    -1,    -1,    -1,    -1,   556,    -1,
      -1,    -1,   560,    -1,    -1,   563,    -1,    -1,    -1,   231,
      -1,   569,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   259,   596,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   268,   269,    -1,   271,
      -1,    -1,    -1,   611,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   301,
     302,   303,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   320,   321,
     322,    -1,    -1,    -1,    -1,   327,    -1,    -1,   330,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2886,    -1,    -1,    -1,   346,   347,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   378,   379,    -1,  2925,
      -1,    -1,    -1,    -1,    -1,  2539,    -1,    -1,    -1,  2543,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   404,  2949,  2950,    -1,  2952,    -1,    -1,    -1,
      -1,  2565,  2566,    -1,    -1,  2961,    -1,    -1,    -1,    -1,
    2966,    -1,    -1,  2969,    -1,  2971,  2972,    -1,    -1,    -1,
      -1,  2585,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2594,    -1,  2596,    -1,  2598,    -1,  2992,    -1,    -1,    -1,
      -1,    -1,    -1,   455,    -1,    -1,    -1,   459,    -1,    -1,
      -1,  3007,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   471,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3031,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2647,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3061,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   526,    -1,    -1,    -1,   530,  3075,
      -1,   533,   534,   535,   536,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3095,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2711,  3104,    -1,
      -1,  2715,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   576,   577,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   600,    -1,
      -1,    -1,    -1,    -1,    -1,  2759,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3199,  3200,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3308,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2925,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2949,  2950,    -1,    -1,    -1,
      -1,  3347,  3348,    -1,    -1,    -1,    -1,  2961,    -1,    -1,
    3356,    -1,  2966,    -1,    -1,  2969,    -1,  2971,  2972,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3007,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3031,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3075,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3095,    -1,    -1,    -1,  3491,    -1,    -1,    -1,  3495,
    3104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3526,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3540,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3553,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3199,  3200,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3687,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3695,
      -1,    -1,    -1,    -1,  3308,    -1,    -1,    -1,  3704,    -1,
    3706,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3347,  3348,    -1,    -1,    -1,    -1,    -1,
    3746,    -1,  3356,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3778,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3811,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3846,    -1,    -1,    -1,    -1,    -1,  3852,  3853,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3491,    -1,    -1,
      -1,  3495,    -1,    -1,  3890,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3526,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3540,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3553,
      -1,    -1,  3948,    -1,  3950,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3960,    -1,  3962,  3963,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3973,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3982,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4034,    -1,
    4036,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4051,  4052,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4069,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3695,    -1,    -1,    -1,    -1,    -1,    -1,  4094,  4095,
    3704,    -1,  3706,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4107,  4108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4139,    -1,    -1,    -1,    -1,    -1,    -1,
    4146,    -1,    -1,  4149,    -1,    -1,    -1,    -1,    -1,  4155,
      -1,    -1,    -1,  4159,    -1,    -1,  4162,    -1,    -1,    -1,
      -1,    -1,    -1,  4169,  3778,    -1,    -1,    -1,    -1,    -1,
    4176,    -1,  4178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4198,    -1,  4200,    -1,  4202,  3811,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4230,  4231,    -1,    -1,    -1,    -1,
    4236,    -1,  3846,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4253,  4254,    -1,
      -1,    -1,  4258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4280,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3948,    -1,  3950,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3960,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3982,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4034,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4052,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4094,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4162,    -1,
      -1,    -1,    -1,    -1,    -1,  4169,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    35,    36,    37,
      38,    39,    -1,    41,    42,    43,    44,    45,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    61,    -1,    63,    64,    65,    66,    67,
      68,    69,  4236,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    -1,    -1,
      98,    99,   100,    -1,   102,   103,   104,    -1,   106,   107,
     108,   109,   110,   111,    -1,    -1,  4280,    -1,   116,   117,
     118,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,    -1,   140,   141,   142,    -1,    -1,    -1,   146,    -1,
     148,   149,    -1,   151,   152,   153,    -1,    -1,   156,   157,
      -1,   159,   160,   161,   162,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,   172,    -1,   174,   175,   176,   177,
      -1,   179,    -1,    -1,    -1,   183,    -1,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,    -1,   195,    -1,   197,
      -1,   199,   200,    -1,   202,   203,    -1,   205,   206,    -1,
      -1,    -1,   210,   211,   212,   213,   214,    -1,   216,   217,
     218,    -1,   220,    -1,   222,    -1,    -1,    -1,   226,   227,
     228,   229,    -1,    -1,   232,    -1,   234,   235,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,    -1,   245,   246,    -1,
     248,   249,    -1,   251,   252,   253,    -1,    -1,    -1,    -1,
      -1,   259,   260,    -1,   262,    -1,   264,    -1,   266,   267,
      -1,    -1,   270,    -1,    -1,    -1,    -1,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,    -1,    -1,    -1,   304,   305,   306,   307,
     308,   309,    -1,    -1,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,    -1,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,   344,   345,    -1,   347,
     348,   349,    -1,   351,   352,   353,    -1,   355,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,   383,   384,   385,    -1,   387,
      -1,   389,   390,   391,   392,   393,    -1,   395,   396,   397,
     398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,    -1,
     428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,    -1,
      -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,    -1,   497,
     498,   499,   500,    -1,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,    -1,
      -1,   519,   520,   521,   522,   523,    -1,   525,   526,   527,
      -1,   529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,
     538,   539,   540,    -1,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,    -1,   555,   556,    -1,
      -1,   559,    -1,    -1,   562,    -1,   564,    -1,   566,   567,
     568,    -1,    -1,   571,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,   583,   584,   585,    -1,    -1,
      -1,    -1,    -1,    -1,   592,   593,    -1,   595,   596,   597,
      -1,    -1,   600,    -1,    -1,    -1,   604,   605,    -1,    -1,
      -1,    -1,   610,   611,    -1,    -1,   614,   615,    -1,    -1,
     618,   619,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    35,    36,    37,    38,    39,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,
      53,    54,    55,    -1,    57,    58,    59,    60,    61,    -1,
      63,    64,    65,    66,    67,    68,    69,    -1,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    -1,    -1,    98,    99,   100,    -1,   102,
     103,   104,    -1,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    -1,   116,   117,   118,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,    -1,   140,   141,   142,
      -1,    -1,    -1,   146,    -1,   148,   149,    -1,   151,   152,
     153,    -1,    -1,   156,   157,    -1,   159,   160,   161,   162,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,   172,
      -1,   174,   175,   176,   177,    -1,   179,    -1,    -1,    -1,
     183,    -1,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,    -1,   195,    -1,   197,    -1,   199,   200,    -1,   202,
     203,    -1,   205,   206,    -1,    -1,    -1,   210,   211,   212,
     213,   214,    -1,   216,   217,   218,    -1,   220,    -1,   222,
      -1,    -1,    -1,   226,   227,   228,   229,    -1,    -1,   232,
      -1,   234,   235,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,    -1,   245,   246,    -1,    -1,   249,    -1,   251,   252,
     253,    -1,    -1,    -1,    -1,    -1,   259,   260,    -1,   262,
      -1,   264,    -1,   266,   267,    -1,    -1,   270,    -1,    -1,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,    -1,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,    -1,    -1,
      -1,   304,   305,   306,   307,   308,   309,    -1,    -1,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,    -1,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,   344,   345,    -1,   347,   348,   349,   350,   351,   352,
     353,    -1,   355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,    -1,   387,    -1,   389,   390,   391,   392,
     393,    -1,   395,   396,   397,   398,    -1,    -1,   401,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,    -1,   428,    -1,   430,   431,    -1,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,
      -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   484,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,    -1,   497,   498,   499,   500,    -1,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,    -1,    -1,   519,   520,   521,   522,
     523,    -1,   525,   526,   527,    -1,   529,   530,   531,   532,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,   542,
     543,   544,   545,   546,   547,   548,   549,   550,   551,   552,
     553,    -1,   555,   556,    -1,    -1,   559,    -1,    -1,   562,
      -1,   564,    -1,   566,   567,   568,    -1,    -1,   571,   572,
     573,   574,   575,    -1,    -1,   578,   579,    -1,   581,   582,
     583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,
     593,    -1,   595,   596,   597,    -1,    -1,   600,    -1,    -1,
      -1,   604,   605,    -1,    -1,    -1,    -1,   610,   611,    -1,
      -1,   614,   615,    -1,    -1,   618,   619,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    35,    36,    37,
      38,    39,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    61,    -1,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    -1,    -1,
      98,    99,   100,    -1,   102,   103,   104,    -1,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    -1,   116,   117,
     118,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,    -1,   140,   141,   142,    -1,    -1,    -1,   146,    -1,
     148,   149,    -1,   151,   152,   153,    -1,    -1,   156,   157,
      -1,   159,   160,   161,   162,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,   172,    -1,   174,   175,   176,   177,
      -1,   179,    -1,    -1,    -1,   183,    -1,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,    -1,   195,    -1,   197,
      -1,   199,   200,    -1,   202,   203,    -1,   205,   206,    -1,
      -1,    -1,   210,   211,   212,   213,   214,    -1,   216,   217,
     218,    -1,   220,    -1,   222,    -1,    -1,    -1,   226,   227,
     228,   229,    -1,    -1,   232,    -1,   234,   235,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,    -1,   245,   246,    -1,
      -1,   249,    -1,   251,   252,   253,    -1,    -1,    -1,    -1,
      -1,   259,   260,    -1,   262,    -1,   264,    -1,   266,   267,
      -1,    -1,   270,    -1,    -1,    -1,    -1,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,    -1,    -1,    -1,   304,   305,   306,   307,
     308,   309,    -1,    -1,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,    -1,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,   344,   345,    -1,   347,
     348,   349,    -1,   351,   352,   353,    -1,   355,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,   383,   384,   385,    -1,   387,
      -1,   389,   390,   391,   392,   393,    -1,   395,   396,   397,
     398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,    -1,
     428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,    -1,
      -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,    -1,   497,
     498,   499,   500,    -1,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,    -1,
      -1,   519,   520,   521,   522,   523,    -1,   525,   526,   527,
      -1,   529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,
      -1,   539,   540,    -1,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,    -1,   555,   556,    -1,
      -1,   559,    -1,    -1,   562,    -1,   564,    -1,   566,   567,
     568,    -1,    -1,   571,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,   583,   584,   585,    -1,    -1,
      -1,    -1,    -1,    -1,   592,   593,    -1,   595,   596,   597,
      -1,    -1,   600,    -1,    -1,    -1,   604,   605,    -1,    -1,
      -1,    -1,   610,   611,   612,    -1,   614,   615,    -1,    -1,
     618,   619,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    35,    36,    37,    38,    39,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,
      53,    54,    55,    -1,    57,    58,    59,    60,    61,    -1,
      63,    64,    65,    66,    67,    68,    69,    -1,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    -1,    -1,    98,    99,   100,    -1,   102,
     103,   104,    -1,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    -1,   116,   117,   118,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,    -1,   140,   141,   142,
      -1,    -1,    -1,   146,    -1,   148,   149,    -1,   151,   152,
     153,    -1,    -1,   156,   157,    -1,   159,   160,   161,   162,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,   172,
      -1,   174,   175,   176,   177,    -1,   179,    -1,    -1,    -1,
     183,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,    -1,   195,    -1,   197,    -1,   199,   200,    -1,   202,
     203,    -1,   205,   206,    -1,    -1,    -1,   210,   211,   212,
     213,   214,    -1,   216,   217,   218,    -1,   220,    -1,   222,
      -1,    -1,    -1,   226,   227,   228,   229,    -1,    -1,   232,
      -1,   234,   235,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,    -1,   245,   246,    -1,    -1,   249,    -1,   251,   252,
     253,    -1,    -1,    -1,    -1,    -1,   259,   260,    -1,   262,
      -1,   264,    -1,   266,   267,    -1,    -1,   270,    -1,    -1,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,    -1,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,    -1,    -1,
      -1,   304,   305,   306,   307,   308,   309,    -1,    -1,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,    -1,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,   344,   345,    -1,   347,   348,   349,    -1,   351,   352,
     353,    -1,   355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,    -1,   387,    -1,   389,   390,   391,   392,
     393,    -1,   395,   396,   397,   398,    -1,    -1,   401,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,    -1,   428,    -1,   430,   431,    -1,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,
      -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   484,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,    -1,   497,   498,   499,   500,    -1,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,    -1,    -1,   519,   520,   521,   522,
     523,    -1,   525,   526,   527,    -1,   529,   530,   531,   532,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,   542,
     543,   544,   545,   546,   547,   548,   549,   550,   551,   552,
     553,    -1,   555,   556,    -1,    -1,   559,    -1,    -1,   562,
      -1,   564,    -1,   566,   567,   568,    -1,    -1,   571,   572,
     573,   574,   575,    -1,    -1,   578,   579,    -1,   581,   582,
     583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,
     593,    -1,   595,   596,   597,    -1,    -1,   600,    -1,    -1,
      -1,   604,   605,    -1,    -1,    -1,    -1,   610,   611,    -1,
      -1,   614,   615,    -1,    -1,   618,   619,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    35,    36,    37,
      38,    39,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    61,    -1,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    -1,    -1,
      98,    99,   100,    -1,   102,   103,   104,    -1,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    -1,   116,   117,
     118,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,    -1,   140,   141,   142,    -1,    -1,    -1,   146,    -1,
     148,   149,    -1,   151,   152,   153,    -1,    -1,   156,   157,
      -1,   159,   160,   161,   162,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,   172,    -1,   174,   175,   176,   177,
      -1,   179,    -1,    -1,    -1,   183,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,    -1,   195,    -1,   197,
      -1,   199,   200,    -1,   202,   203,    -1,   205,   206,    -1,
      -1,    -1,   210,   211,   212,   213,   214,    -1,   216,   217,
     218,    -1,   220,    -1,   222,    -1,    -1,    -1,   226,   227,
     228,   229,    -1,    -1,   232,    -1,   234,   235,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,    -1,   245,   246,    -1,
      -1,   249,    -1,   251,   252,   253,    -1,    -1,    -1,    -1,
      -1,   259,   260,    -1,   262,    -1,   264,    -1,   266,   267,
      -1,    -1,   270,    -1,    -1,    -1,    -1,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,    -1,    -1,    -1,   304,   305,   306,   307,
     308,   309,    -1,    -1,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,    -1,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,   344,   345,    -1,   347,
     348,   349,    -1,   351,   352,   353,    -1,   355,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,   383,   384,   385,    -1,   387,
      -1,   389,   390,   391,   392,   393,    -1,   395,   396,   397,
     398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,    -1,
     428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,    -1,
      -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,    -1,   497,
     498,   499,   500,    -1,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,    -1,
      -1,   519,   520,   521,   522,   523,    -1,   525,   526,   527,
      -1,   529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,
      -1,   539,   540,    -1,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,    -1,   555,   556,    -1,
      -1,   559,    -1,    -1,   562,    -1,   564,    -1,   566,   567,
     568,    -1,    -1,   571,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,   583,   584,   585,    -1,    -1,
      -1,    -1,    -1,    -1,   592,   593,    -1,   595,   596,   597,
      -1,    -1,   600,    -1,    -1,    -1,   604,   605,    -1,    -1,
      -1,    -1,   610,   611,    -1,    -1,   614,   615,    -1,    -1,
     618,   619,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    35,    36,    37,    38,    39,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,
      53,    54,    55,    -1,    57,    58,    59,    60,    61,    -1,
      63,    64,    65,    66,    67,    68,    69,    -1,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    -1,    -1,    98,    99,   100,    -1,   102,
     103,   104,    -1,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    -1,   116,   117,   118,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,    -1,   140,   141,   142,
      -1,    -1,    -1,   146,    -1,   148,   149,    -1,   151,   152,
     153,    -1,    -1,   156,   157,    -1,   159,   160,   161,   162,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,   172,
      -1,   174,   175,   176,   177,    -1,   179,    -1,    -1,    -1,
     183,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,    -1,   195,    -1,   197,    -1,   199,   200,    -1,   202,
     203,    -1,   205,   206,    -1,    -1,    -1,   210,   211,   212,
     213,   214,    -1,   216,   217,   218,    -1,   220,    -1,   222,
      -1,    -1,    -1,   226,   227,   228,   229,    -1,    -1,   232,
      -1,   234,   235,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,    -1,   245,   246,    -1,    -1,   249,    -1,   251,   252,
     253,    -1,    -1,    -1,    -1,    -1,   259,   260,    -1,   262,
      -1,   264,    -1,   266,   267,    -1,    -1,   270,    -1,    -1,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,    -1,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,    -1,    -1,
      -1,   304,   305,   306,   307,   308,   309,    -1,    -1,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,    -1,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,   344,   345,    -1,   347,   348,   349,    -1,   351,   352,
     353,    -1,   355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,    -1,   387,    -1,   389,   390,   391,   392,
     393,    -1,   395,   396,   397,   398,    -1,    -1,   401,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,    -1,   428,    -1,   430,   431,    -1,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,
      -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   484,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,    -1,   497,   498,   499,   500,    -1,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,    -1,    -1,   519,   520,   521,   522,
     523,    -1,   525,   526,   527,    -1,   529,   530,   531,   532,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,   542,
     543,   544,   545,   546,   547,   548,   549,   550,   551,   552,
     553,    -1,   555,   556,    -1,    -1,   559,    -1,    -1,   562,
      -1,   564,    -1,   566,   567,   568,    -1,    -1,   571,   572,
     573,   574,   575,    -1,    -1,   578,   579,    -1,   581,   582,
     583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,
     593,    -1,   595,   596,   597,    -1,    -1,   600,    -1,    -1,
      -1,   604,   605,    -1,    -1,    -1,    -1,   610,   611,    -1,
      -1,   614,   615,    -1,    -1,   618,   619,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    35,    36,    37,
      38,    39,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    61,    -1,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    -1,    -1,
      98,    99,   100,    -1,   102,   103,   104,    -1,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    -1,   116,   117,
     118,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,    -1,   140,   141,   142,    -1,    -1,    -1,   146,    -1,
     148,   149,    -1,   151,   152,   153,    -1,    -1,   156,   157,
      -1,   159,   160,   161,   162,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,   172,    -1,   174,   175,   176,   177,
      -1,   179,    -1,    -1,    -1,   183,    -1,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,    -1,   195,    -1,   197,
      -1,   199,   200,    -1,   202,   203,    -1,   205,   206,    -1,
      -1,    -1,   210,   211,   212,   213,   214,    -1,   216,   217,
     218,    -1,   220,    -1,   222,    -1,    -1,    -1,   226,   227,
     228,   229,    -1,    -1,   232,    -1,   234,   235,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,    -1,   245,   246,    -1,
      -1,   249,    -1,   251,   252,   253,    -1,    -1,    -1,    -1,
      -1,   259,   260,    -1,   262,    -1,   264,    -1,   266,   267,
      -1,    -1,   270,    -1,    -1,    -1,    -1,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,    -1,    -1,    -1,   304,   305,   306,   307,
     308,   309,    -1,    -1,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,    -1,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,   344,   345,    -1,   347,
     348,   349,    -1,   351,   352,   353,    -1,   355,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,   383,   384,   385,    -1,   387,
      -1,   389,   390,   391,   392,   393,    -1,   395,   396,   397,
     398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,    -1,
     428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,    -1,
      -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,    -1,   497,
     498,   499,   500,    -1,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,    -1,
      -1,   519,   520,   521,   522,   523,    -1,   525,   526,   527,
      -1,   529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,
      -1,   539,   540,    -1,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,    -1,   555,   556,    -1,
      -1,   559,    -1,    -1,   562,    -1,   564,    -1,   566,   567,
     568,    -1,    -1,   571,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,   583,   584,   585,    -1,    -1,
      -1,    -1,    -1,    -1,   592,   593,    -1,   595,   596,   597,
      -1,    -1,   600,    -1,    -1,    -1,   604,   605,    -1,    -1,
      -1,    -1,   610,   611,    -1,    -1,   614,   615,    -1,    -1,
     618,   619,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    35,    36,    37,    38,    39,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,
      53,    54,    55,    -1,    57,    58,    59,    60,    61,    -1,
      63,    64,    65,    66,    67,    68,    69,    -1,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    -1,    -1,    98,    99,   100,    -1,   102,
     103,   104,    -1,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    -1,   116,   117,   118,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,    -1,   140,   141,   142,
      -1,    -1,    -1,   146,    -1,   148,   149,    -1,   151,   152,
     153,    -1,    -1,   156,   157,    -1,   159,   160,   161,   162,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,   172,
      -1,   174,   175,   176,   177,    -1,   179,    -1,    -1,    -1,
     183,    -1,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,    -1,   195,    -1,   197,    -1,   199,   200,    -1,   202,
     203,    -1,   205,   206,    -1,    -1,    -1,   210,   211,   212,
     213,   214,    -1,   216,   217,   218,    -1,   220,    -1,   222,
      -1,    -1,    -1,   226,   227,   228,   229,    -1,    -1,   232,
      -1,   234,   235,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,    -1,   245,   246,    -1,    -1,   249,    -1,   251,   252,
     253,    -1,    -1,    -1,    -1,    -1,   259,   260,    -1,   262,
      -1,   264,    -1,   266,   267,    -1,    -1,   270,    -1,    -1,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,    -1,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,    -1,    -1,
      -1,   304,   305,   306,   307,   308,   309,    -1,    -1,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,    -1,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,   344,   345,    -1,   347,   348,   349,    -1,   351,   352,
     353,    -1,   355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,    -1,   387,    -1,   389,   390,   391,   392,
     393,    -1,   395,   396,   397,   398,    -1,    -1,   401,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,    -1,   428,    -1,   430,   431,    -1,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,
      -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   484,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,    -1,   497,   498,   499,   500,    -1,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,    -1,    -1,   519,   520,   521,   522,
     523,    -1,   525,   526,   527,    -1,   529,   530,   531,   532,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,   542,
     543,   544,   545,   546,   547,   548,   549,   550,   551,   552,
     553,    -1,   555,   556,    -1,    -1,   559,    -1,    -1,   562,
      -1,   564,    -1,   566,   567,   568,    -1,    -1,   571,   572,
     573,   574,   575,    -1,    -1,   578,   579,    -1,   581,   582,
     583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,
     593,    -1,   595,   596,   597,    -1,    -1,   600,    -1,    -1,
      -1,   604,   605,    -1,    -1,    -1,    -1,   610,   611,    -1,
      -1,   614,   615,    -1,    -1,   618,   619,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    35,    36,    37,
      38,    39,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    61,    -1,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    -1,    -1,
      98,    99,   100,    -1,   102,   103,   104,    -1,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    -1,   116,   117,
     118,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,    -1,   140,   141,   142,    -1,    -1,    -1,   146,    -1,
     148,   149,    -1,   151,   152,   153,    -1,    -1,   156,   157,
      -1,   159,   160,   161,   162,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,   172,    -1,   174,   175,   176,   177,
      -1,   179,    -1,    -1,    -1,   183,    -1,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,    -1,   195,    -1,   197,
      -1,   199,   200,    -1,   202,   203,    -1,   205,   206,    -1,
      -1,    -1,   210,   211,   212,   213,   214,    -1,   216,   217,
     218,    -1,   220,    -1,   222,    -1,    -1,    -1,   226,   227,
     228,   229,    -1,    -1,   232,    -1,   234,   235,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,    -1,   245,   246,    -1,
      -1,   249,    -1,   251,   252,   253,    -1,    -1,    -1,    -1,
      -1,   259,   260,    -1,   262,    -1,   264,    -1,   266,   267,
      -1,    -1,   270,    -1,    -1,    -1,    -1,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,    -1,    -1,    -1,   304,   305,   306,   307,
     308,   309,    -1,    -1,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,    -1,    -1,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,    -1,   344,   345,    -1,   347,
     348,   349,    -1,   351,   352,   353,    -1,   355,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,   383,   384,   385,    -1,   387,
      -1,   389,   390,   391,   392,   393,    -1,   395,   396,   397,
     398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,    -1,
     428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,    -1,
      -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,    -1,   497,
     498,   499,   500,    -1,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,    -1,
      -1,   519,   520,   521,   522,   523,    -1,   525,   526,   527,
      -1,   529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,
      -1,   539,   540,    -1,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,    -1,   555,   556,    -1,
      -1,   559,    -1,    -1,   562,    -1,   564,    -1,   566,   567,
     568,    -1,    -1,   571,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,   583,   584,   585,    -1,    -1,
      -1,    -1,    -1,    -1,   592,   593,    -1,   595,   596,   597,
      -1,    -1,   600,    -1,    -1,    -1,   604,   605,    -1,    -1,
      -1,    -1,   610,   611,    -1,    -1,   614,   615,    -1,    -1,
     618,   619,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    35,    36,    37,    38,    39,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,
      53,    54,    55,    -1,    57,    58,    59,    60,    61,    -1,
      63,    64,    65,    66,    67,    68,    69,    -1,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    -1,    -1,    98,    99,   100,    -1,   102,
     103,   104,    -1,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    -1,   116,   117,   118,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,    -1,   140,   141,   142,
      -1,    -1,    -1,   146,    -1,   148,   149,    -1,   151,   152,
     153,    -1,    -1,   156,   157,    -1,   159,   160,   161,   162,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,   172,
      -1,   174,   175,   176,   177,    -1,   179,    -1,    -1,    -1,
     183,    -1,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,    -1,   195,    -1,   197,    -1,   199,   200,    -1,   202,
     203,    -1,   205,   206,    -1,    -1,    -1,   210,   211,   212,
     213,   214,    -1,   216,   217,   218,    -1,   220,    -1,   222,
      -1,    -1,    -1,   226,   227,   228,   229,    -1,    -1,   232,
      -1,   234,   235,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,    -1,   245,   246,    -1,    -1,   249,    -1,   251,   252,
     253,    -1,    -1,    -1,    -1,    -1,   259,   260,    -1,   262,
      -1,   264,    -1,   266,   267,    -1,    -1,   270,    -1,    -1,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,    -1,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,    -1,    -1,
      -1,   304,   305,   306,   307,   308,   309,    -1,    -1,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,    -1,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,   344,   345,    -1,   347,   348,   349,    -1,   351,   352,
     353,    -1,   355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,    -1,   387,    -1,   389,   390,   391,   392,
     393,    -1,   395,   396,   397,   398,    -1,    -1,   401,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,    -1,   428,    -1,   430,   431,    -1,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,
      -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   484,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,    -1,   497,   498,   499,   500,    -1,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,    -1,    -1,   519,   520,   521,   522,
     523,    -1,   525,   526,   527,    -1,   529,   530,   531,   532,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,   542,
     543,   544,   545,   546,   547,   548,   549,   550,   551,   552,
     553,    -1,   555,   556,    -1,    -1,   559,    -1,    -1,   562,
      -1,   564,    -1,   566,   567,   568,    -1,    -1,   571,   572,
     573,   574,   575,    -1,    -1,   578,   579,    -1,   581,   582,
     583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,
     593,    -1,   595,   596,   597,    -1,    -1,   600,    -1,    -1,
      -1,   604,   605,    -1,    -1,    -1,    -1,   610,   611,    -1,
      -1,   614,   615,    -1,    -1,   618,   619,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    35,    36,    37,
      38,    39,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    61,    -1,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    -1,    -1,
      98,    99,   100,    -1,   102,   103,   104,    -1,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    -1,   116,   117,
     118,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,    -1,   140,   141,   142,    -1,    -1,    -1,   146,    -1,
     148,   149,    -1,   151,   152,   153,    -1,    -1,   156,   157,
      -1,   159,   160,   161,   162,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,   172,    -1,   174,   175,   176,   177,
      -1,   179,    -1,    -1,    -1,   183,    -1,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,    -1,   195,    -1,   197,
      -1,   199,   200,    -1,   202,   203,    -1,   205,   206,    -1,
      -1,    -1,   210,   211,   212,   213,   214,    -1,   216,   217,
     218,    -1,   220,    -1,   222,    -1,    -1,    -1,   226,   227,
     228,   229,    -1,    -1,   232,    -1,   234,   235,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,    -1,   245,   246,    -1,
      -1,   249,    -1,   251,   252,   253,    -1,    -1,    -1,    -1,
      -1,   259,   260,    -1,   262,    -1,   264,    -1,   266,   267,
      -1,    -1,   270,    -1,    -1,    -1,    -1,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,    -1,    -1,    -1,   304,   305,   306,   307,
     308,   309,    -1,    -1,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,    -1,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,   344,   345,    -1,   347,
     348,   349,    -1,   351,   352,   353,    -1,   355,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,   383,   384,   385,    -1,   387,
      -1,   389,   390,   391,   392,   393,    -1,   395,   396,   397,
     398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,    -1,
     428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,    -1,
      -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,    -1,   497,
     498,   499,   500,    -1,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,    -1,
      -1,   519,   520,   521,   522,   523,    -1,   525,   526,   527,
      -1,   529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,
      -1,   539,   540,    -1,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,    -1,   555,   556,    -1,
      -1,   559,    -1,    -1,   562,    -1,   564,    -1,   566,   567,
     568,    -1,    -1,   571,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,   583,   584,   585,    -1,    -1,
      -1,    -1,    -1,    -1,   592,   593,    -1,   595,   596,   597,
      -1,    -1,   600,    -1,    -1,    -1,   604,   605,    -1,    -1,
      -1,    -1,   610,   611,    -1,    -1,   614,   615,    -1,    -1,
     618,   619,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    35,    36,    37,    38,    39,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,
      53,    54,    55,    -1,    57,    58,    59,    60,    61,    -1,
      63,    64,    65,    66,    67,    68,    69,    -1,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    -1,    -1,    98,    99,   100,    -1,   102,
     103,   104,    -1,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    -1,   116,   117,   118,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,    -1,   140,   141,   142,
      -1,    -1,    -1,   146,    -1,   148,   149,    -1,   151,   152,
     153,    -1,    -1,   156,   157,    -1,   159,   160,   161,   162,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,   172,
      -1,   174,   175,   176,   177,    -1,   179,    -1,    -1,    -1,
     183,    -1,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,    -1,   195,    -1,   197,    -1,   199,   200,    -1,   202,
     203,    -1,   205,   206,    -1,    -1,    -1,   210,   211,   212,
     213,   214,    -1,   216,   217,   218,    -1,   220,    -1,   222,
      -1,    -1,    -1,   226,   227,   228,   229,    -1,    -1,   232,
      -1,   234,   235,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,    -1,   245,   246,    -1,    -1,   249,    -1,   251,   252,
     253,    -1,    -1,    -1,    -1,    -1,   259,   260,    -1,   262,
      -1,   264,    -1,   266,   267,    -1,    -1,   270,    -1,    -1,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,    -1,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,    -1,    -1,
      -1,   304,   305,   306,   307,   308,   309,    -1,    -1,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,    -1,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
      -1,   344,   345,    -1,   347,   348,   349,    -1,   351,   352,
     353,    -1,   355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,    -1,   387,    -1,   389,   390,   391,   392,
     393,    -1,   395,   396,   397,   398,    -1,    -1,   401,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,    -1,   428,    -1,   430,   431,    -1,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,
      -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   484,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,    -1,   497,   498,   499,   500,    -1,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,    -1,    -1,   519,   520,   521,   522,
     523,    -1,   525,   526,   527,    -1,   529,   530,   531,   532,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,   542,
     543,   544,   545,   546,   547,   548,   549,   550,   551,   552,
     553,    -1,   555,   556,    -1,    -1,   559,    -1,    -1,   562,
      -1,   564,    -1,   566,   567,   568,    -1,    -1,   571,   572,
     573,   574,   575,    -1,    -1,   578,   579,    -1,   581,   582,
     583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,
     593,    -1,   595,   596,   597,    -1,    -1,   600,    -1,    -1,
      -1,   604,   605,    -1,    -1,    -1,    -1,   610,   611,    -1,
      -1,   614,   615,    -1,    -1,   618,   619,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    35,    36,    37,
      38,    39,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    61,    -1,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    -1,    -1,
      98,    99,   100,    -1,   102,   103,   104,    -1,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    -1,   116,   117,
     118,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,    -1,   140,   141,   142,    -1,    -1,    -1,   146,    -1,
     148,   149,    -1,   151,   152,   153,    -1,    -1,   156,   157,
      -1,   159,   160,   161,   162,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,   172,    -1,   174,   175,   176,   177,
      -1,   179,    -1,    -1,    -1,   183,    -1,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,    -1,   195,    -1,   197,
      -1,   199,   200,    -1,   202,   203,    -1,   205,   206,    -1,
      -1,    -1,   210,   211,   212,   213,   214,    -1,   216,   217,
     218,    -1,   220,    -1,   222,    -1,    -1,    -1,   226,   227,
     228,   229,    -1,    -1,   232,    -1,   234,   235,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,    -1,   245,   246,    -1,
      -1,   249,    -1,   251,   252,   253,    -1,    -1,    -1,    -1,
      -1,   259,   260,    -1,   262,    -1,   264,    -1,   266,   267,
      -1,    -1,   270,    -1,    -1,    -1,    -1,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,    -1,    -1,    -1,   304,   305,   306,   307,
     308,   309,    -1,    -1,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,    -1,    -1,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,    -1,   344,   345,    -1,   347,
     348,   349,    -1,   351,   352,   353,    -1,   355,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,   383,   384,   385,    -1,   387,
      -1,   389,   390,   391,   392,   393,    -1,   395,   396,   397,
     398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,    -1,
     428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,    -1,
      -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,    -1,   497,
     498,   499,   500,    -1,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,    -1,
      -1,   519,   520,   521,   522,   523,    -1,   525,   526,   527,
      -1,   529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,
      -1,   539,   540,    -1,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,    -1,   555,   556,    -1,
      -1,   559,    -1,    -1,   562,    -1,   564,    -1,   566,   567,
     568,    -1,    -1,   571,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,   583,   584,   585,    -1,    -1,
      -1,    -1,    -1,    -1,   592,   593,    -1,   595,   596,   597,
      -1,    -1,   600,    -1,    -1,    -1,   604,   605,    -1,    -1,
      -1,    -1,   610,   611,    -1,    -1,   614,   615,    -1,    -1,
     618,   619,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    35,    36,    37,    38,    39,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,
      53,    54,    55,    -1,    57,    58,    59,    60,    61,    -1,
      63,    64,    65,    66,    67,    68,    69,    -1,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    -1,    -1,    98,    99,   100,    -1,   102,
     103,   104,    -1,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    -1,   116,   117,   118,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,    -1,   140,   141,   142,
      -1,    -1,    -1,   146,    -1,   148,   149,    -1,   151,   152,
     153,    -1,    -1,   156,   157,    -1,   159,   160,   161,   162,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,   172,
      -1,   174,   175,   176,   177,    -1,   179,    -1,    -1,    -1,
     183,    -1,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,    -1,   195,    -1,   197,    -1,   199,   200,    -1,   202,
     203,    -1,   205,   206,    -1,    -1,    -1,   210,   211,   212,
     213,   214,    -1,   216,   217,   218,    -1,   220,    -1,   222,
      -1,    -1,    -1,   226,   227,   228,   229,    -1,    -1,   232,
      -1,   234,   235,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,    -1,   245,   246,    -1,    -1,   249,    -1,   251,   252,
     253,    -1,    -1,    -1,    -1,    -1,   259,   260,    -1,   262,
      -1,   264,    -1,   266,   267,    -1,    -1,   270,    -1,    -1,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,    -1,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,    -1,    -1,
      -1,   304,   305,   306,   307,   308,   309,    -1,    -1,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,    -1,
      -1,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
      -1,   344,   345,    -1,   347,   348,   349,    -1,   351,   352,
     353,    -1,   355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,    -1,   387,    -1,   389,   390,   391,   392,
     393,    -1,   395,   396,   397,   398,    -1,    -1,   401,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,    -1,   428,    -1,   430,   431,    -1,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,
      -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   484,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,    -1,   497,   498,   499,   500,    -1,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,    -1,    -1,   519,   520,   521,   522,
     523,    -1,   525,   526,   527,    -1,   529,   530,   531,   532,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,   542,
     543,   544,   545,   546,   547,   548,   549,   550,   551,   552,
     553,    -1,   555,   556,    -1,    -1,   559,    -1,    -1,   562,
      -1,   564,    -1,   566,   567,   568,    -1,    -1,   571,   572,
     573,   574,   575,    -1,    -1,   578,   579,    -1,   581,   582,
     583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,
     593,    -1,   595,   596,   597,    -1,    -1,   600,    -1,    -1,
      -1,   604,   605,    -1,    -1,    -1,    -1,   610,   611,    -1,
      -1,   614,   615,    -1,    -1,   618,   619,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    35,    36,    37,
      38,    39,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    61,    -1,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    -1,    -1,
      98,    99,   100,    -1,   102,   103,   104,    -1,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    -1,   116,   117,
     118,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,    -1,   140,   141,   142,    -1,    -1,    -1,   146,    -1,
     148,   149,    -1,   151,   152,   153,    -1,    -1,   156,   157,
      -1,   159,   160,   161,   162,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,   172,    -1,   174,   175,   176,   177,
      -1,   179,    -1,    -1,    -1,   183,    -1,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,    -1,   195,    -1,   197,
      -1,   199,   200,    -1,   202,   203,    -1,   205,   206,    -1,
      -1,    -1,   210,   211,   212,   213,   214,    -1,   216,   217,
     218,    -1,   220,    -1,   222,    -1,    -1,    -1,   226,   227,
     228,   229,    -1,    -1,   232,    -1,   234,   235,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,    -1,   245,   246,    -1,
      -1,   249,    -1,   251,   252,   253,    -1,    -1,    -1,    -1,
      -1,   259,   260,    -1,   262,    -1,   264,    -1,   266,   267,
      -1,    -1,   270,    -1,    -1,    -1,    -1,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,    -1,    -1,    -1,   304,   305,   306,   307,
     308,   309,    -1,    -1,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,    -1,    -1,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,    -1,   344,   345,    -1,   347,
     348,   349,    -1,   351,   352,   353,    -1,   355,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,   383,   384,   385,    -1,   387,
      -1,   389,   390,   391,   392,   393,    -1,   395,   396,   397,
     398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,    -1,
     428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,    -1,
      -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,    -1,   497,
     498,   499,   500,    -1,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,    -1,
      -1,   519,   520,   521,   522,   523,    -1,   525,   526,   527,
      -1,   529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,
      -1,   539,   540,    -1,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,    -1,   555,   556,    -1,
      -1,   559,    -1,    -1,   562,    -1,   564,    -1,   566,   567,
     568,    -1,    -1,   571,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,   583,   584,   585,    -1,    -1,
      -1,    -1,    -1,    -1,   592,   593,    -1,   595,   596,   597,
      -1,    -1,   600,    -1,    -1,    -1,   604,   605,    -1,    -1,
      -1,    -1,   610,   611,    -1,    -1,   614,   615,    -1,    -1,
     618,   619,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    35,    36,    37,    38,    39,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,
      53,    54,    55,    -1,    57,    58,    59,    60,    61,    -1,
      63,    64,    65,    66,    67,    68,    69,    -1,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    -1,    -1,    98,    99,   100,    -1,   102,
     103,   104,    -1,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    -1,   116,   117,   118,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,    -1,   140,   141,   142,
      -1,    -1,    -1,   146,    -1,   148,   149,    -1,   151,   152,
     153,    -1,    -1,   156,   157,    -1,   159,   160,   161,   162,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,   172,
      -1,   174,   175,   176,   177,    -1,   179,    -1,    -1,    -1,
     183,    -1,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,    -1,   195,    -1,   197,    -1,   199,   200,    -1,   202,
     203,    -1,   205,   206,    -1,    -1,    -1,   210,   211,   212,
     213,   214,    -1,   216,   217,   218,    -1,   220,    -1,   222,
      -1,    -1,    -1,   226,   227,   228,   229,    -1,    -1,   232,
      -1,   234,   235,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,    -1,   245,   246,    -1,    -1,   249,    -1,   251,   252,
     253,    -1,    -1,    -1,    -1,    -1,   259,   260,    -1,   262,
      -1,   264,    -1,   266,   267,    -1,    -1,   270,    -1,    -1,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,    -1,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,    -1,    -1,
      -1,   304,   305,   306,   307,   308,   309,    -1,    -1,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,    -1,
      -1,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
      -1,   344,   345,    -1,   347,   348,   349,    -1,   351,   352,
     353,    -1,   355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,    -1,   387,    -1,   389,   390,   391,   392,
     393,    -1,   395,   396,   397,   398,    -1,    -1,   401,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,    -1,   428,    -1,   430,   431,    -1,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,
      -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   484,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,    -1,   497,   498,   499,   500,    -1,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,    -1,    -1,   519,   520,   521,   522,
     523,    -1,   525,   526,   527,    -1,   529,   530,   531,   532,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,   542,
     543,   544,   545,   546,   547,   548,   549,   550,   551,   552,
     553,    -1,   555,   556,    -1,    -1,   559,    -1,    -1,   562,
      -1,   564,    -1,   566,   567,   568,    -1,    -1,   571,   572,
     573,   574,   575,    -1,    -1,   578,   579,    -1,   581,   582,
     583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,
     593,    -1,   595,   596,   597,    -1,    -1,   600,    -1,    -1,
      -1,   604,   605,    -1,    -1,    -1,    -1,   610,   611,    -1,
      -1,   614,   615,    -1,    -1,   618,   619,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,    -1,    -1,   102,    -1,    -1,    -1,   106,   107,
     108,    -1,    -1,   111,    -1,    -1,    -1,    -1,   116,   117,
     118,    -1,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,    -1,   140,   141,   142,    -1,    -1,    -1,   146,    -1,
     148,   149,    -1,   151,   152,   153,    -1,    -1,   156,   157,
      -1,   159,   160,   161,   162,   163,    -1,    -1,   166,   167,
     168,    -1,   170,   171,   172,    -1,   174,   175,   176,   177,
      -1,   179,    -1,    -1,    -1,   183,    -1,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,    -1,   195,    -1,    -1,
      -1,   199,   200,    -1,   202,   203,    -1,   205,   206,    -1,
      -1,    -1,   210,   211,   212,   213,    -1,    -1,   216,   217,
     218,    -1,   220,    -1,   222,    -1,    -1,    -1,    -1,   227,
     228,    -1,    -1,    -1,   232,    -1,   234,   235,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,    -1,   245,   246,    -1,
      -1,   249,    -1,    -1,   252,   253,    -1,    -1,    -1,    -1,
      -1,   259,   260,    -1,   262,    -1,   264,    -1,   266,   267,
      -1,    -1,   270,    -1,    -1,    -1,    -1,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
      -1,   289,   290,   291,    -1,   293,   294,   295,   296,    -1,
     298,   299,    -1,    -1,    -1,    -1,   304,   305,   306,   307,
     308,   309,    -1,    -1,   312,   313,    -1,   315,    -1,   317,
      -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,    -1,    -1,   334,   335,   336,   337,
      -1,    -1,    -1,   341,   342,    -1,   344,   345,    -1,   347,
     348,   349,    -1,   351,   352,   353,    -1,   355,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,
      -1,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,    -1,    -1,   383,   384,   385,    -1,   387,
      -1,   389,   390,   391,   392,   393,    -1,   395,   396,   397,
     398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,
     428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,    -1,
      -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,    -1,    -1,
      -1,   499,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,    -1,   510,   511,   512,   513,    -1,   515,   516,    -1,
      -1,   519,   520,   521,   522,   523,    -1,   525,   526,   527,
      -1,   529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,
      -1,   539,   540,    -1,    -1,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,    -1,   555,   556,    -1,
      -1,   559,    -1,    -1,   562,    -1,   564,    -1,   566,   567,
     568,    -1,    -1,    -1,    -1,    -1,    -1,   575,    -1,    -1,
     578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,    -1,
      -1,    -1,    -1,    -1,   592,   593,    -1,   595,   596,   597,
      -1,    -1,   600,    -1,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
     618,   619,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,    -1,    -1,   102,    -1,    -1,    -1,   106,   107,
     108,    -1,    -1,   111,    -1,    -1,    -1,    -1,   116,   117,
      -1,    -1,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,    -1,   140,   141,   142,    -1,    -1,    -1,   146,    -1,
     148,   149,    -1,   151,   152,   153,    -1,    -1,   156,   157,
      -1,   159,   160,   161,   162,   163,    -1,    -1,   166,   167,
     168,    -1,    -1,   171,   172,    -1,   174,   175,   176,    -1,
      -1,   179,    -1,    -1,    -1,   183,    -1,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,    -1,   195,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,    -1,   205,   206,    -1,
      -1,    -1,   210,   211,   212,   213,    -1,    -1,   216,   217,
     218,   219,   220,    -1,   222,    -1,    -1,    -1,    -1,   227,
     228,    -1,    -1,    -1,   232,    -1,   234,   235,    -1,   237,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,   249,    -1,    -1,   252,   253,    -1,   255,    -1,    -1,
      -1,   259,   260,    -1,   262,    -1,   264,    -1,   266,   267,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
      -1,   289,   290,   291,    -1,   293,   294,   295,   296,    -1,
     298,   299,    -1,    -1,    -1,    -1,   304,   305,   306,   307,
     308,   309,    -1,    -1,   312,   313,    -1,   315,    -1,   317,
      -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,    -1,   330,   331,    -1,    -1,   334,   335,   336,   337,
      -1,    -1,    -1,   341,   342,    -1,    -1,    -1,    -1,   347,
     348,   349,    -1,   351,   352,   353,    -1,   355,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,
      -1,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,    -1,    -1,   383,   384,   385,    -1,   387,
      -1,   389,   390,   391,   392,   393,    -1,   395,   396,   397,
     398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,
     428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
      -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
      -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,    -1,    -1,
      -1,   499,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,    -1,   510,   511,   512,   513,    -1,   515,   516,    -1,
      -1,   519,   520,   521,   522,   523,    -1,    -1,   526,   527,
      -1,   529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,
      -1,   539,   540,    -1,    -1,    -1,   544,   545,   546,   547,
      -1,   549,   550,    -1,   552,   553,    -1,   555,   556,    -1,
      -1,   559,    -1,    -1,   562,    -1,   564,    -1,   566,   567,
     568,    -1,    -1,    -1,    -1,    -1,    -1,   575,    -1,    -1,
     578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,    -1,
      -1,    -1,    -1,    -1,   592,   593,    -1,   595,   596,   597,
      -1,    -1,   600,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,   619,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    59,
      -1,    61,    -1,    63,    64,    65,    66,    67,    68,    69,
      -1,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,
      -1,    -1,   102,    -1,    -1,    -1,   106,   107,   108,    -1,
      -1,   111,    -1,    -1,    -1,    -1,   116,   117,    -1,    -1,
      -1,    -1,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,
     130,   131,   132,   133,    -1,    -1,    -1,   137,    -1,    -1,
     140,   141,   142,    -1,    -1,    -1,   146,    -1,   148,   149,
      -1,   151,   152,   153,    -1,    -1,   156,   157,    -1,   159,
     160,   161,   162,   163,    -1,    -1,   166,   167,   168,    -1,
      -1,   171,   172,    -1,   174,   175,   176,    -1,    -1,   179,
      -1,    -1,    -1,   183,    -1,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,    -1,   195,    -1,    -1,    -1,   199,
     200,    -1,   202,    -1,    -1,   205,   206,    -1,    -1,    -1,
     210,   211,   212,   213,    -1,    -1,   216,   217,   218,   219,
     220,    -1,   222,    -1,    -1,    -1,    -1,   227,   228,    -1,
      -1,    -1,   232,    -1,   234,   235,    -1,   237,   238,    -1,
      -1,    -1,   242,   243,    -1,   245,   246,    -1,    -1,   249,
      -1,    -1,   252,   253,    -1,    -1,    -1,    -1,    -1,   259,
     260,    -1,   262,    -1,   264,    -1,   266,   267,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,    -1,   289,
     290,   291,    -1,   293,   294,   295,   296,    -1,   298,   299,
      -1,    -1,    -1,    -1,   304,   305,   306,   307,   308,   309,
      -1,    -1,   312,   313,    -1,   315,    -1,   317,    -1,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,    -1,
     330,   331,    -1,    -1,   334,   335,   336,   337,    -1,    -1,
      -1,   341,   342,    -1,    -1,    -1,    -1,   347,   348,   349,
      -1,   351,   352,   353,    -1,   355,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   365,   366,   367,    -1,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,    -1,    -1,   383,   384,   385,    -1,   387,    -1,   389,
     390,   391,   392,   393,    -1,   395,   396,   397,   398,    -1,
      -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,   412,   413,   414,   415,   416,    -1,   418,   419,
      -1,   421,   422,   423,    -1,    -1,   426,    -1,   428,    -1,
     430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,
      -1,   461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,    -1,    -1,
      -1,    -1,    -1,   483,   484,    -1,   486,    -1,    -1,    -1,
     490,    -1,    -1,   493,   494,   495,    -1,    -1,    -1,   499,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,    -1,
     510,   511,   512,   513,    -1,   515,   516,    -1,    -1,   519,
     520,   521,   522,   523,    -1,    -1,   526,   527,    -1,   529,
     530,   531,   532,   533,    -1,    -1,    -1,    -1,    -1,   539,
     540,    -1,    -1,    -1,   544,   545,   546,   547,    -1,   549,
     550,    -1,   552,   553,    -1,   555,   556,    -1,    -1,   559,
      -1,    -1,   562,    -1,   564,    -1,   566,   567,   568,    -1,
      -1,    -1,    -1,    -1,    -1,   575,    -1,    -1,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,    -1,    -1,    -1,
      -1,    -1,   592,   593,    -1,   595,   596,   597,    -1,    -1,
     600,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   619,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    59,    -1,    61,
      -1,    63,    64,    65,    66,    67,    68,    69,    -1,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    -1,    86,    87,    88,    89,    90,    -1,
      92,    -1,    -1,    95,    -1,    -1,    98,    -1,    -1,    -1,
     102,    -1,    -1,    -1,   106,   107,   108,    -1,    -1,   111,
      -1,    -1,    -1,    -1,   116,   117,    -1,    -1,    -1,    -1,
     122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,    -1,   140,   141,
     142,    -1,    -1,    -1,   146,    -1,   148,   149,    -1,   151,
     152,   153,    -1,    -1,   156,   157,    -1,   159,   160,   161,
     162,   163,    -1,    -1,   166,   167,   168,    -1,    -1,   171,
     172,    -1,   174,   175,   176,    -1,    -1,   179,    -1,    -1,
      -1,   183,    -1,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,
     202,    -1,    -1,   205,   206,    -1,    -1,    -1,   210,   211,
     212,   213,    -1,    -1,   216,   217,   218,    -1,   220,    -1,
     222,    -1,    -1,    -1,    -1,   227,   228,    -1,    -1,    -1,
     232,    -1,   234,   235,    -1,   237,   238,    -1,    -1,    -1,
     242,    -1,    -1,   245,   246,    -1,    -1,   249,    -1,    -1,
     252,   253,    -1,    -1,    -1,    -1,    -1,   259,   260,    -1,
     262,    -1,   264,    -1,   266,   267,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,    -1,   289,   290,   291,
      -1,   293,   294,   295,   296,    -1,   298,   299,    -1,    -1,
      -1,    -1,   304,   305,   306,   307,   308,   309,    -1,    -1,
     312,   313,    -1,   315,    -1,   317,    -1,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,    -1,   330,   331,
      -1,    -1,   334,   335,   336,   337,    -1,    -1,    -1,   341,
     342,    -1,    -1,    -1,    -1,   347,   348,   349,    -1,   351,
     352,   353,    -1,   355,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,    -1,
      -1,   383,   384,   385,    -1,   387,    -1,   389,   390,   391,
     392,   393,    -1,   395,   396,   397,   398,    -1,    -1,   401,
      -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,
     412,   413,   414,   415,   416,    -1,   418,   419,    -1,   421,
     422,   423,    -1,    -1,   426,    -1,   428,    -1,   430,   431,
      -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,
      -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,    -1,
      -1,   483,   484,    -1,   486,    -1,    -1,    -1,   490,    -1,
      -1,   493,   494,   495,    -1,    -1,    -1,   499,   500,    -1,
     502,   503,   504,   505,   506,   507,    -1,    -1,   510,   511,
     512,   513,    -1,   515,   516,    -1,    -1,   519,   520,   521,
     522,   523,    -1,    -1,   526,   527,    -1,   529,   530,   531,
     532,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,
      -1,    -1,   544,   545,   546,   547,    -1,   549,   550,    -1,
     552,   553,    -1,   555,   556,    -1,    -1,   559,    -1,    -1,
     562,    -1,   564,    -1,   566,   567,   568,    -1,    -1,    -1,
      -1,    -1,    -1,   575,    -1,    -1,   578,    -1,    -1,    -1,
     582,   583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,
     592,   593,    -1,   595,   596,   597,    -1,    -1,   600,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
     612,    -1,    -1,    17,    -1,    -1,    20,   619,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    59,    -1,    61,    -1,    63,
      64,    65,    66,    67,    68,    69,    -1,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    -1,    86,    87,    88,    89,    90,    -1,    92,    -1,
      -1,    95,    -1,    -1,    98,    -1,    -1,    -1,   102,    -1,
      -1,    -1,   106,   107,   108,    -1,    -1,   111,    -1,    -1,
      -1,    -1,   116,   117,    -1,    -1,    -1,    -1,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,   140,   141,   142,    -1,
      -1,    -1,   146,    -1,   148,   149,    -1,   151,   152,   153,
      -1,    -1,   156,   157,    -1,   159,   160,   161,   162,   163,
      -1,    -1,   166,   167,   168,    -1,    -1,   171,   172,    -1,
     174,   175,   176,    -1,    -1,   179,    -1,    -1,    -1,   183,
      -1,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
      -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
      -1,   205,   206,    -1,    -1,    -1,   210,   211,   212,   213,
      -1,    -1,   216,   217,   218,    -1,   220,    -1,   222,    -1,
      -1,    -1,    -1,   227,   228,    -1,    -1,    -1,   232,    -1,
     234,   235,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,
      -1,   245,   246,    -1,    -1,   249,    -1,    -1,   252,   253,
      -1,    -1,    -1,    -1,    -1,   259,   260,    -1,   262,    -1,
     264,    -1,   266,   267,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,    -1,   289,   290,   291,    -1,   293,
     294,   295,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,
     304,   305,   306,   307,   308,   309,    -1,    -1,   312,   313,
      -1,   315,    -1,   317,    -1,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,    -1,   330,   331,    -1,    -1,
     334,   335,   336,   337,    -1,    -1,    -1,   341,   342,    -1,
      -1,    -1,    -1,   347,   348,   349,    -1,   351,   352,   353,
      -1,   355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,    -1,    -1,   383,
     384,   385,    -1,   387,    -1,   389,   390,   391,   392,   393,
      -1,   395,   396,   397,   398,    -1,    -1,   401,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,    -1,   412,   413,
     414,   415,   416,    -1,   418,   419,    -1,   421,   422,   423,
      -1,    -1,   426,    -1,   428,    -1,   430,   431,    -1,   433,
     434,    -1,    -1,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,    -1,
      -1,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,   483,
     484,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,   493,
     494,   495,    -1,    -1,    -1,   499,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,    -1,   510,   511,   512,   513,
      -1,   515,   516,    -1,    -1,   519,   520,   521,   522,   523,
      -1,    -1,   526,   527,    -1,   529,   530,   531,   532,   533,
      -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,
     544,   545,   546,   547,    -1,   549,   550,    -1,   552,   553,
      -1,   555,   556,    -1,    -1,   559,    -1,    -1,   562,    -1,
     564,    -1,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,
      -1,   575,    -1,    -1,   578,    -1,    -1,    -1,   582,   583,
     584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,
      -1,   595,   596,   597,    -1,    -1,   600,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,   612,    -1,
      -1,    -1,    -1,    17,   618,   619,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    59,    -1,    61,    -1,    63,
      64,    65,    66,    67,    68,    69,    -1,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    -1,    86,    87,    88,    89,    90,    -1,    92,    -1,
      -1,    95,    -1,    -1,    98,    -1,    -1,    -1,   102,    -1,
      -1,    -1,   106,   107,   108,    -1,    -1,   111,    -1,    -1,
      -1,    -1,   116,   117,    -1,    -1,    -1,    -1,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,   140,   141,   142,    -1,
      -1,    -1,   146,    -1,   148,   149,    -1,   151,   152,   153,
      -1,    -1,   156,   157,    -1,   159,   160,   161,   162,   163,
      -1,    -1,   166,   167,   168,    -1,    -1,   171,   172,    -1,
     174,   175,   176,    -1,    -1,   179,    -1,    -1,    -1,   183,
      -1,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
      -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
      -1,   205,   206,    -1,    -1,    -1,   210,   211,   212,   213,
      -1,    -1,   216,   217,   218,    -1,   220,    -1,   222,    -1,
      -1,    -1,    -1,   227,   228,    -1,    -1,    -1,   232,    -1,
     234,   235,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,
      -1,   245,   246,    -1,    -1,   249,    -1,    -1,   252,   253,
      -1,    -1,    -1,    -1,    -1,   259,   260,    -1,   262,    -1,
     264,    -1,   266,   267,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,    -1,   289,   290,   291,    -1,   293,
     294,   295,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,
     304,   305,   306,   307,   308,   309,    -1,    -1,   312,   313,
      -1,   315,    -1,   317,    -1,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,    -1,   330,   331,    -1,    -1,
     334,   335,   336,   337,    -1,    -1,    -1,   341,   342,    -1,
      -1,    -1,    -1,   347,   348,   349,    -1,   351,   352,   353,
      -1,   355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,    -1,    -1,   383,
     384,   385,    -1,   387,    -1,   389,   390,   391,   392,   393,
      -1,   395,   396,   397,   398,    -1,    -1,   401,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,    -1,   412,   413,
     414,   415,   416,    -1,   418,   419,    -1,   421,   422,   423,
      -1,    -1,   426,    -1,   428,    -1,   430,   431,    -1,   433,
     434,    -1,    -1,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,    -1,
      -1,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,   483,
     484,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,   493,
     494,   495,    -1,    -1,    -1,   499,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,    -1,   510,   511,   512,   513,
      -1,   515,   516,    -1,    -1,   519,   520,   521,   522,   523,
      -1,    -1,   526,   527,    -1,   529,   530,   531,   532,   533,
      -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,
     544,   545,   546,   547,    -1,   549,   550,    -1,   552,   553,
      -1,   555,   556,    -1,    -1,   559,    -1,    -1,   562,    -1,
     564,    -1,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,
      -1,   575,    -1,    -1,   578,    -1,    -1,    -1,   582,   583,
     584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,
      -1,   595,   596,   597,    -1,    -1,   600,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,   611,    -1,    -1,
      -1,    17,    -1,    -1,    20,   619,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    59,    -1,    61,    -1,    63,    64,    65,
      66,    67,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    -1,
      86,    87,    88,    89,    90,    -1,    92,    -1,    -1,    95,
      -1,    -1,    98,    -1,    -1,    -1,   102,    -1,    -1,    -1,
     106,   107,   108,    -1,    -1,   111,    -1,    -1,    -1,    -1,
     116,   117,    -1,    -1,    -1,    -1,   122,    -1,   124,    -1,
      -1,    -1,   128,    -1,   130,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,    -1,   140,   141,   142,    -1,    -1,    -1,
     146,    -1,   148,   149,    -1,   151,   152,   153,    -1,    -1,
     156,   157,    -1,   159,   160,   161,   162,   163,    -1,    -1,
     166,   167,   168,    -1,    -1,   171,   172,    -1,   174,   175,
     176,    -1,    -1,   179,    -1,    -1,    -1,   183,    -1,   185,
      -1,   187,    -1,   189,   190,   191,   192,   193,    -1,   195,
      -1,    -1,    -1,   199,   200,    -1,   202,    -1,    -1,   205,
     206,    -1,    -1,    -1,   210,   211,   212,   213,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,   222,    -1,    -1,    -1,
      -1,   227,   228,    -1,   230,    -1,   232,    -1,   234,   235,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,   245,
     246,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,    -1,
      -1,    -1,    -1,   259,   260,    -1,   262,    -1,   264,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,    -1,   289,   290,   291,    -1,   293,   294,   295,
     296,    -1,   298,   299,    -1,    -1,    -1,    -1,   304,   305,
     306,   307,   308,   309,    -1,    -1,   312,   313,    -1,   315,
      -1,   317,    -1,   319,   320,   321,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,    -1,   334,   335,
     336,   337,    -1,    -1,    -1,   341,   342,    -1,    -1,    -1,
      -1,   347,   348,   349,    -1,   351,   352,   353,    -1,   355,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,
     366,   367,    -1,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,    -1,    -1,   383,   384,   385,
      -1,   387,    -1,   389,   390,   391,   392,   393,    -1,   395,
     396,   397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,    -1,   412,   413,   414,   415,
     416,    -1,   418,   419,    -1,   421,   422,   423,    -1,    -1,
     426,    -1,   428,    -1,   430,   431,    -1,   433,   434,    -1,
      -1,    -1,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,    -1,
     486,    -1,    -1,    -1,   490,    -1,    -1,   493,   494,   495,
      -1,    -1,    -1,   499,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,    -1,   510,   511,   512,   513,    -1,   515,
     516,    -1,    -1,   519,   520,   521,   522,   523,    -1,    -1,
     526,   527,    -1,   529,   530,   531,   532,   533,    -1,    -1,
      -1,    -1,    -1,   539,   540,    -1,    -1,    -1,   544,   545,
     546,   547,    -1,   549,   550,    -1,   552,   553,    -1,   555,
     556,    -1,    -1,   559,    -1,    -1,   562,    -1,   564,    -1,
     566,   567,   568,    -1,    -1,    -1,    -1,    -1,    -1,   575,
      -1,    -1,   578,    -1,    -1,    -1,   582,   583,   584,   585,
      -1,    -1,    -1,    -1,    -1,    -1,   592,   593,    -1,   595,
     596,   597,    -1,    -1,   600,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,   619,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,    -1,    -1,   102,    -1,    -1,    -1,   106,   107,
     108,    -1,    -1,   111,    -1,    -1,    -1,    -1,   116,   117,
      -1,    -1,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,    -1,   140,   141,   142,    -1,    -1,    -1,   146,    -1,
     148,   149,    -1,   151,   152,   153,    -1,    -1,   156,   157,
      -1,   159,   160,   161,   162,   163,    -1,    -1,   166,   167,
     168,    -1,    -1,   171,   172,    -1,   174,   175,   176,    -1,
      -1,   179,    -1,    -1,    -1,   183,    -1,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,    -1,   195,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,    -1,   205,   206,    -1,
      -1,    -1,   210,   211,   212,   213,    -1,    -1,   216,   217,
     218,    -1,   220,    -1,   222,    -1,    -1,    -1,    -1,   227,
     228,    -1,    -1,    -1,   232,    -1,   234,   235,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,    -1,   245,   246,    -1,
      -1,   249,    -1,    -1,   252,   253,    -1,    -1,    -1,    -1,
      -1,   259,   260,    -1,   262,    -1,   264,    -1,   266,   267,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
      -1,   289,   290,   291,    -1,   293,   294,   295,   296,    -1,
     298,   299,    -1,    -1,    -1,    -1,   304,   305,   306,   307,
     308,   309,    -1,    -1,   312,   313,    -1,   315,    -1,   317,
      -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,    -1,   330,   331,    -1,    -1,   334,   335,   336,   337,
      -1,    -1,    -1,   341,   342,    -1,    -1,    -1,    -1,   347,
     348,   349,    -1,   351,   352,   353,    -1,   355,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,
      -1,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,    -1,    -1,   383,   384,   385,    -1,   387,
      -1,   389,   390,   391,   392,   393,    -1,   395,   396,   397,
     398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,
     428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,    -1,
      -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,    -1,    -1,
      -1,   499,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,    -1,   510,   511,   512,   513,    -1,   515,   516,    -1,
      -1,   519,   520,   521,   522,   523,    -1,    -1,   526,   527,
      -1,   529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,
      -1,   539,   540,    -1,    -1,    -1,   544,   545,   546,   547,
      -1,   549,   550,    -1,   552,   553,    -1,   555,   556,    -1,
      -1,   559,    -1,    -1,   562,    -1,   564,    -1,   566,   567,
     568,    -1,    -1,    -1,    -1,    -1,    -1,   575,    -1,    -1,
     578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,    -1,
      -1,    -1,    -1,    -1,   592,   593,    -1,   595,   596,   597,
      -1,    -1,   600,    -1,    -1,    -1,    -1,     5,   606,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,   619,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,    -1,    -1,   102,    -1,    -1,    -1,   106,   107,
     108,    -1,    -1,   111,    -1,    -1,    -1,    -1,   116,   117,
      -1,    -1,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,    -1,   140,   141,   142,    -1,    -1,    -1,   146,    -1,
     148,   149,    -1,   151,   152,   153,    -1,    -1,   156,   157,
      -1,   159,   160,   161,   162,   163,    -1,    -1,   166,   167,
     168,    -1,    -1,   171,   172,    -1,   174,   175,   176,    -1,
      -1,   179,    -1,    -1,    -1,   183,    -1,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,    -1,   195,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,    -1,   205,   206,    -1,
      -1,    -1,   210,   211,   212,   213,    -1,    -1,   216,   217,
     218,    -1,   220,    -1,   222,    -1,    -1,    -1,    -1,   227,
     228,    -1,    -1,    -1,   232,    -1,   234,   235,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,    -1,   245,   246,    -1,
      -1,   249,    -1,    -1,   252,   253,    -1,    -1,    -1,    -1,
      -1,   259,   260,    -1,   262,    -1,   264,    -1,   266,   267,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
      -1,   289,   290,   291,    -1,   293,   294,   295,   296,    -1,
     298,   299,    -1,    -1,    -1,    -1,   304,   305,   306,   307,
     308,   309,    -1,    -1,   312,   313,    -1,   315,    -1,   317,
      -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,    -1,   330,   331,    -1,    -1,   334,   335,   336,   337,
      -1,    -1,    -1,   341,   342,    -1,    -1,    -1,    -1,   347,
     348,   349,    -1,   351,   352,   353,    -1,   355,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,
      -1,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,    -1,    -1,   383,   384,   385,    -1,   387,
      -1,   389,   390,   391,   392,   393,    -1,   395,   396,   397,
     398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,
     428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,    -1,
      -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,    -1,    -1,
      -1,   499,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,    -1,   510,   511,   512,   513,    -1,   515,   516,    -1,
      -1,   519,   520,   521,   522,   523,    -1,    -1,   526,   527,
      -1,   529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,
      -1,   539,   540,    -1,    -1,    -1,   544,   545,   546,   547,
      -1,   549,   550,    -1,   552,   553,    -1,   555,   556,    -1,
      -1,   559,    -1,    -1,   562,    -1,   564,    -1,   566,   567,
     568,    -1,    -1,    -1,    -1,    -1,    -1,   575,    -1,    -1,
     578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,    -1,
      -1,    -1,    -1,    -1,   592,   593,    -1,   595,   596,   597,
      -1,    -1,   600,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,   611,    -1,    -1,    -1,    17,    -1,    -1,
      20,   619,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    59,
      -1,    61,    -1,    63,    64,    65,    66,    67,    68,    69,
      -1,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    -1,    86,    87,    88,    89,
      90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,
      -1,    -1,   102,    -1,    -1,    -1,   106,   107,   108,    -1,
      -1,   111,    -1,    -1,    -1,    -1,   116,   117,    -1,    -1,
      -1,    -1,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,
     130,   131,   132,   133,    -1,    -1,    -1,   137,    -1,    -1,
     140,   141,   142,    -1,    -1,    -1,   146,    -1,   148,   149,
      -1,   151,   152,   153,    -1,    -1,   156,   157,    -1,   159,
     160,   161,   162,   163,    -1,    -1,   166,   167,   168,    -1,
      -1,   171,   172,    -1,   174,   175,   176,    -1,    -1,   179,
      -1,    -1,    -1,   183,    -1,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,    -1,   195,    -1,    -1,    -1,   199,
     200,    -1,   202,    -1,    -1,   205,   206,    -1,    -1,    -1,
     210,   211,   212,   213,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,   222,    -1,    -1,    -1,    -1,   227,   228,    -1,
      -1,    -1,   232,    -1,   234,   235,    -1,   237,   238,    -1,
      -1,    -1,   242,    -1,    -1,   245,   246,    -1,    -1,   249,
      -1,    -1,   252,   253,    -1,    -1,    -1,    -1,    -1,   259,
     260,    -1,   262,    -1,   264,    -1,   266,   267,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,    -1,   289,
     290,   291,    -1,   293,   294,   295,   296,    -1,   298,   299,
      -1,    -1,    -1,    -1,   304,   305,   306,   307,   308,   309,
      -1,    -1,   312,   313,    -1,   315,    -1,   317,    -1,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,    -1,
     330,   331,    -1,    -1,   334,   335,   336,   337,    -1,    -1,
      -1,   341,   342,    -1,    -1,    -1,    -1,   347,   348,   349,
      -1,   351,   352,   353,    -1,   355,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   365,   366,   367,    -1,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,    -1,    -1,   383,   384,   385,    -1,   387,    -1,   389,
     390,   391,   392,   393,    -1,   395,   396,   397,   398,    -1,
      -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,   412,   413,   414,   415,   416,    -1,   418,   419,
      -1,   421,   422,   423,    -1,    -1,   426,    -1,   428,    -1,
     430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,
      -1,   461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,
      -1,    -1,    -1,   483,   484,    -1,   486,    -1,    -1,    -1,
     490,    -1,    -1,   493,   494,   495,    -1,    -1,    -1,   499,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,    -1,
     510,   511,   512,   513,    -1,   515,   516,    -1,    -1,   519,
     520,   521,   522,   523,    -1,    -1,   526,   527,    -1,   529,
     530,   531,   532,   533,    -1,    -1,    -1,    -1,    -1,   539,
     540,    -1,    -1,    -1,   544,   545,   546,   547,    -1,   549,
     550,    -1,   552,   553,    -1,   555,   556,    -1,    -1,   559,
      -1,    -1,   562,    -1,   564,    -1,   566,   567,   568,    -1,
      -1,    -1,    -1,    -1,    -1,   575,    -1,    -1,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,    -1,    -1,    -1,
      -1,    -1,   592,   593,    -1,   595,   596,   597,    -1,    -1,
     600,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,   618,   619,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    59,
      -1,    61,    -1,    63,    64,    65,    66,    67,    68,    69,
      -1,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    -1,    86,    87,    88,    89,
      90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,
      -1,    -1,   102,    -1,    -1,    -1,   106,   107,   108,    -1,
      -1,   111,    -1,    -1,    -1,    -1,   116,   117,    -1,    -1,
      -1,    -1,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,
     130,   131,   132,   133,    -1,    -1,    -1,   137,    -1,    -1,
     140,   141,   142,    -1,    -1,    -1,   146,    -1,   148,   149,
      -1,   151,   152,   153,    -1,    -1,   156,   157,    -1,   159,
     160,   161,   162,   163,    -1,    -1,   166,   167,   168,    -1,
      -1,   171,   172,    -1,   174,   175,   176,    -1,    -1,   179,
      -1,    -1,    -1,   183,    -1,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,    -1,   195,    -1,    -1,    -1,   199,
     200,    -1,   202,    -1,    -1,   205,   206,    -1,    -1,    -1,
     210,   211,   212,   213,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,   222,    -1,    -1,    -1,    -1,   227,   228,    -1,
      -1,    -1,   232,    -1,   234,   235,    -1,   237,   238,    -1,
      -1,    -1,   242,    -1,    -1,   245,   246,    -1,    -1,   249,
      -1,    -1,   252,   253,    -1,    -1,    -1,    -1,    -1,   259,
     260,    -1,   262,    -1,   264,    -1,   266,   267,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,    -1,   289,
     290,   291,    -1,   293,   294,   295,   296,    -1,   298,   299,
      -1,    -1,    -1,    -1,   304,   305,   306,   307,   308,   309,
      -1,    -1,   312,   313,    -1,   315,    -1,   317,    -1,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,    -1,
     330,   331,    -1,    -1,   334,   335,   336,   337,    -1,    -1,
      -1,   341,   342,    -1,    -1,    -1,    -1,   347,   348,   349,
      -1,   351,   352,   353,    -1,   355,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   365,   366,   367,    -1,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,    -1,    -1,   383,   384,   385,    -1,   387,    -1,   389,
     390,   391,   392,   393,    -1,   395,   396,   397,   398,    -1,
      -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,   412,   413,   414,   415,   416,    -1,   418,   419,
      -1,   421,   422,   423,    -1,    -1,   426,    -1,   428,    -1,
     430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,
      -1,   461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,
      -1,    -1,    -1,   483,   484,    -1,   486,    -1,    -1,    -1,
     490,    -1,    -1,   493,   494,   495,    -1,    -1,    -1,   499,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,    -1,
     510,   511,   512,   513,    -1,   515,   516,    -1,    -1,   519,
     520,   521,   522,   523,    -1,    -1,   526,   527,    -1,   529,
     530,   531,   532,   533,    -1,    -1,    -1,    -1,    -1,   539,
     540,    -1,    -1,    -1,   544,   545,   546,   547,    -1,   549,
     550,    -1,   552,   553,    -1,   555,   556,    -1,    -1,   559,
      -1,    -1,   562,    -1,   564,    -1,   566,   567,   568,    -1,
      -1,    -1,    -1,    -1,    -1,   575,    -1,    -1,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,    -1,    -1,    -1,
      -1,    -1,   592,   593,    -1,   595,   596,   597,    -1,    -1,
     600,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   619,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    59,    -1,    61,
      -1,    63,    64,    65,    66,    67,    68,    69,    -1,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    -1,    86,    87,    88,    89,    90,    -1,
      92,    -1,    -1,    95,    -1,    -1,    98,    -1,    -1,    -1,
     102,    -1,    -1,    -1,   106,   107,   108,    -1,    -1,   111,
      -1,    -1,    -1,    -1,   116,   117,    -1,    -1,    -1,    -1,
     122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,    -1,   140,   141,
     142,    -1,    -1,    -1,   146,    -1,   148,   149,    -1,   151,
     152,   153,    -1,    -1,   156,   157,    -1,   159,   160,   161,
     162,   163,    -1,    -1,   166,   167,   168,    -1,    -1,   171,
     172,    -1,   174,   175,   176,    -1,    -1,   179,    -1,    -1,
      -1,   183,    -1,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,
     202,    -1,    -1,   205,   206,    -1,    -1,    -1,   210,   211,
     212,   213,    -1,    -1,   216,   217,   218,    -1,   220,    -1,
     222,    -1,    -1,    -1,    -1,   227,   228,    -1,    -1,    -1,
     232,    -1,   234,   235,    -1,   237,   238,    -1,    -1,    -1,
     242,    -1,    -1,   245,   246,    -1,    -1,   249,    -1,    -1,
     252,   253,    -1,    -1,    -1,    -1,    -1,   259,   260,    -1,
     262,    -1,   264,    -1,   266,   267,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,    -1,   289,   290,   291,
      -1,   293,   294,   295,   296,    -1,   298,   299,    -1,    -1,
      -1,    -1,   304,   305,   306,   307,   308,   309,    -1,    -1,
     312,   313,    -1,   315,    -1,   317,    -1,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,    -1,   330,   331,
      -1,    -1,   334,   335,   336,   337,    -1,    -1,    -1,   341,
     342,    -1,    -1,    -1,    -1,   347,   348,   349,    -1,   351,
     352,   353,    -1,   355,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,    -1,
      -1,   383,   384,   385,    -1,   387,    -1,   389,   390,   391,
     392,   393,    -1,   395,   396,   397,   398,    -1,    -1,   401,
      -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,
     412,   413,   414,   415,   416,    -1,   418,   419,    -1,   421,
     422,   423,    -1,    -1,   426,    -1,   428,    -1,   430,   431,
      -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,
      -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,    -1,
      -1,   483,   484,    -1,   486,    -1,    -1,    -1,   490,    -1,
      -1,   493,   494,   495,    -1,    -1,    -1,   499,   500,    -1,
     502,   503,   504,   505,   506,   507,    -1,    -1,   510,   511,
     512,   513,    -1,   515,   516,    -1,    -1,   519,   520,   521,
     522,   523,    -1,    -1,   526,   527,    -1,   529,   530,   531,
     532,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,
      -1,    -1,   544,   545,   546,   547,    -1,   549,   550,    -1,
     552,   553,    -1,   555,   556,    -1,    -1,   559,    -1,    -1,
     562,    -1,   564,    -1,   566,   567,   568,    -1,    -1,    -1,
      -1,    -1,    -1,   575,    -1,    -1,   578,    -1,    -1,    -1,
     582,   583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,
     592,   593,    -1,   595,   596,   597,    -1,    -1,   600,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,   619,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    59,    -1,    61,    -1,    63,
      64,    65,    66,    67,    68,    69,    -1,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    -1,    86,    87,    88,    89,    90,    -1,    92,    -1,
      -1,    95,    -1,    -1,    98,    -1,    -1,    -1,   102,    -1,
      -1,    -1,   106,   107,   108,    -1,    -1,   111,    -1,    -1,
      -1,    -1,   116,   117,    -1,    -1,    -1,    -1,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,   140,   141,   142,    -1,
      -1,    -1,   146,    -1,   148,   149,    -1,   151,   152,   153,
      -1,    -1,   156,   157,    -1,   159,   160,   161,   162,   163,
      -1,    -1,   166,   167,   168,    -1,    -1,   171,   172,    -1,
     174,   175,   176,    -1,    -1,   179,    -1,    -1,    -1,   183,
      -1,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
      -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
      -1,   205,   206,    -1,    -1,    -1,   210,   211,   212,   213,
      -1,    -1,   216,   217,   218,    -1,   220,    -1,   222,    -1,
      -1,    -1,    -1,   227,   228,    -1,    -1,    -1,   232,    -1,
     234,   235,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,
      -1,   245,   246,    -1,    -1,   249,    -1,    -1,   252,   253,
      -1,    -1,    -1,    -1,    -1,   259,   260,    -1,   262,    -1,
     264,    -1,   266,   267,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,    -1,   289,   290,   291,    -1,   293,
     294,   295,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,
     304,   305,   306,   307,   308,   309,    -1,    -1,   312,   313,
      -1,   315,    -1,   317,    -1,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,    -1,   330,   331,    -1,    -1,
     334,   335,   336,   337,    -1,    -1,    -1,   341,   342,    -1,
      -1,    -1,    -1,   347,   348,   349,    -1,   351,   352,   353,
      -1,   355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,    -1,    -1,   383,
     384,   385,    -1,   387,    -1,   389,   390,   391,   392,   393,
      -1,   395,   396,   397,   398,    -1,    -1,   401,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,    -1,   412,   413,
     414,   415,   416,    -1,   418,   419,    -1,   421,   422,   423,
      -1,    -1,   426,    -1,   428,    -1,   430,   431,    -1,   433,
     434,    -1,    -1,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,    -1,
      -1,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,   483,
     484,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,   493,
     494,   495,    -1,    -1,    -1,   499,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,    -1,   510,   511,   512,   513,
      -1,   515,   516,    -1,    -1,   519,   520,   521,   522,   523,
      -1,    -1,   526,   527,    -1,   529,   530,   531,   532,   533,
      -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,
     544,   545,   546,   547,    -1,   549,   550,    -1,   552,   553,
      -1,   555,   556,    -1,    -1,   559,    -1,    -1,   562,    -1,
     564,    -1,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,
      -1,   575,    -1,    -1,   578,    -1,    -1,    -1,   582,   583,
     584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,
      -1,   595,   596,   597,    -1,    -1,   600,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,   619,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    59,    -1,    61,    -1,    63,    64,    65,
      66,    67,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    -1,
      86,    87,    88,    89,    90,    -1,    92,    -1,    -1,    95,
      -1,    -1,    98,    -1,    -1,    -1,   102,    -1,    -1,    -1,
     106,   107,   108,    -1,    -1,   111,    -1,    -1,    -1,    -1,
     116,   117,    -1,    -1,    -1,    -1,   122,    -1,   124,    -1,
      -1,    -1,   128,    -1,   130,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,    -1,   140,   141,   142,    -1,    -1,    -1,
     146,    -1,   148,   149,    -1,   151,   152,   153,    -1,    -1,
     156,   157,    -1,   159,   160,   161,   162,   163,    -1,    -1,
     166,   167,   168,    -1,    -1,   171,   172,    -1,   174,   175,
     176,    -1,    -1,   179,    -1,    -1,    -1,   183,    -1,   185,
      -1,   187,    -1,   189,   190,   191,   192,   193,    -1,   195,
      -1,    -1,    -1,   199,   200,    -1,   202,    -1,    -1,   205,
     206,    -1,    -1,    -1,   210,   211,   212,   213,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,   222,    -1,    -1,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,    -1,   234,   235,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,   245,
     246,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,    -1,
      -1,    -1,    -1,   259,   260,    -1,   262,    -1,   264,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,    -1,   289,   290,   291,    -1,   293,   294,   295,
     296,    -1,   298,   299,    -1,    -1,    -1,    -1,   304,   305,
     306,   307,   308,   309,    -1,    -1,   312,   313,    -1,   315,
      -1,   317,    -1,   319,   320,   321,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,    -1,   334,   335,
     336,   337,    -1,    -1,    -1,   341,   342,    -1,    -1,    -1,
      -1,   347,   348,   349,    -1,   351,   352,   353,    -1,   355,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,
     366,   367,    -1,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,    -1,    -1,   383,   384,   385,
      -1,   387,    -1,   389,   390,   391,   392,   393,    -1,   395,
     396,   397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,    -1,   412,   413,   414,   415,
     416,    -1,   418,   419,    -1,   421,   422,   423,    -1,    -1,
     426,    -1,   428,    -1,   430,   431,    -1,   433,   434,    -1,
      -1,    -1,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,    -1,
     486,    -1,    -1,    -1,   490,    -1,    -1,   493,   494,   495,
      -1,    -1,    -1,   499,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,    -1,   510,   511,   512,   513,    -1,   515,
     516,    -1,    -1,   519,   520,   521,   522,   523,    -1,    -1,
     526,   527,    -1,   529,   530,   531,   532,   533,    -1,    -1,
      -1,    -1,    -1,   539,   540,    -1,    -1,    -1,   544,   545,
     546,   547,    -1,   549,   550,    -1,   552,   553,    -1,   555,
     556,    -1,    -1,   559,    -1,    -1,   562,    -1,   564,    -1,
     566,   567,   568,    -1,    -1,    -1,    -1,    -1,    -1,   575,
      -1,    -1,   578,    -1,    -1,    -1,   582,   583,   584,   585,
      -1,    -1,    -1,    -1,    -1,    -1,   592,   593,    -1,   595,
     596,   597,    -1,    -1,   600,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,   619,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    59,    -1,    61,    -1,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,
      98,    -1,    -1,    -1,   102,    -1,    -1,    -1,   106,   107,
     108,    -1,    -1,   111,    -1,    -1,    -1,    -1,   116,   117,
      -1,    -1,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,    -1,   140,   141,   142,    -1,    -1,    -1,   146,    -1,
     148,   149,    -1,   151,   152,   153,    -1,    -1,   156,   157,
      -1,   159,   160,   161,   162,   163,    -1,    -1,   166,   167,
     168,    -1,    -1,   171,   172,    -1,   174,   175,   176,    -1,
      -1,   179,    -1,    -1,    -1,   183,    -1,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,    -1,   195,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,    -1,   205,   206,    -1,
      -1,    -1,   210,   211,   212,   213,    -1,    -1,   216,   217,
     218,    -1,   220,    -1,   222,    -1,    -1,    -1,    -1,   227,
     228,    -1,    -1,    -1,   232,    -1,   234,   235,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,    -1,   245,   246,    -1,
      -1,   249,    -1,    -1,   252,   253,   254,    -1,    -1,    -1,
      -1,   259,   260,    -1,   262,    -1,   264,    -1,   266,   267,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
      -1,   289,   290,   291,    -1,   293,   294,   295,   296,    -1,
     298,   299,    -1,    -1,    -1,    -1,   304,   305,   306,   307,
     308,   309,    -1,    -1,   312,   313,    -1,   315,    -1,   317,
      -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,    -1,   330,   331,    -1,    -1,   334,   335,   336,   337,
      -1,    -1,    -1,   341,   342,    -1,    -1,    -1,    -1,   347,
     348,   349,    -1,   351,   352,   353,    -1,   355,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,
      -1,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,    -1,    -1,   383,   384,   385,    -1,   387,
      -1,   389,   390,   391,   392,   393,    -1,   395,   396,   397,
     398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,
     428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,    -1,
      -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,    -1,    -1,
      -1,   499,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,    -1,   510,   511,   512,   513,    -1,   515,   516,    -1,
      -1,   519,   520,   521,   522,   523,    -1,   525,   526,   527,
      -1,   529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,
      -1,   539,   540,    -1,    -1,    -1,   544,   545,   546,   547,
      -1,   549,   550,    -1,   552,   553,    -1,   555,   556,    -1,
      -1,   559,    -1,    -1,   562,    -1,   564,    -1,   566,   567,
     568,    -1,    -1,    -1,    -1,    -1,    -1,   575,    -1,    -1,
     578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,    -1,
      -1,    -1,    -1,    -1,   592,   593,    -1,   595,   596,   597,
      -1,    -1,   600,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
     618,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    59,    -1,
      61,    -1,    63,    64,    65,    66,    67,    68,    69,    -1,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    -1,    86,    87,    88,    89,    90,
      -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,    -1,
      -1,   102,    -1,    -1,    -1,   106,   107,   108,    -1,    -1,
     111,    -1,    -1,    -1,    -1,   116,   117,    -1,    -1,    -1,
      -1,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,    -1,    -1,    -1,   137,    -1,    -1,   140,
     141,   142,    -1,    -1,    -1,   146,    -1,   148,   149,    -1,
     151,   152,   153,    -1,    -1,   156,   157,    -1,   159,   160,
     161,   162,   163,    -1,    -1,   166,   167,   168,    -1,    -1,
     171,   172,    -1,   174,   175,   176,    -1,    -1,   179,    -1,
      -1,    -1,   183,    -1,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,    -1,   195,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,    -1,   205,   206,    -1,    -1,    -1,   210,
     211,   212,   213,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,   222,    -1,    -1,    -1,    -1,   227,   228,    -1,    -1,
      -1,   232,    -1,   234,   235,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,    -1,   245,   246,    -1,    -1,   249,    -1,
      -1,   252,   253,   254,    -1,    -1,    -1,    -1,   259,   260,
      -1,   262,    -1,   264,    -1,   266,   267,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,    -1,   289,   290,
     291,    -1,   293,   294,   295,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,   304,   305,   306,   307,   308,   309,    -1,
      -1,   312,   313,    -1,   315,    -1,   317,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,    -1,   330,
     331,    -1,    -1,   334,   335,   336,   337,    -1,    -1,    -1,
     341,   342,    -1,    -1,    -1,    -1,   347,   348,   349,    -1,
     351,   352,   353,    -1,   355,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
      -1,    -1,   383,   384,   385,    -1,   387,    -1,   389,   390,
     391,   392,   393,    -1,   395,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,    -1,    -1,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,    -1,    -1,    -1,   499,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,    -1,   510,
     511,   512,   513,    -1,   515,   516,    -1,    -1,   519,   520,
     521,   522,   523,    -1,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,
      -1,    -1,    -1,   544,   545,   546,   547,    -1,   549,   550,
      -1,   552,   553,    -1,   555,   556,    -1,    -1,   559,    -1,
      -1,   562,    -1,   564,    -1,   566,   567,   568,    -1,    -1,
      -1,    -1,    -1,    -1,   575,    -1,    -1,   578,    -1,    -1,
      -1,   582,   583,   584,   585,    -1,    -1,    -1,    -1,    -1,
      -1,   592,   593,    -1,   595,   596,   597,    -1,    -1,   600,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,   618,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    59,    -1,    61,    -1,    63,
      64,    65,    66,    67,    68,    69,    -1,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    -1,    86,    87,    88,    89,    90,    -1,    92,    -1,
      -1,    95,    -1,    -1,    98,    -1,    -1,    -1,   102,    -1,
      -1,    -1,   106,   107,   108,    -1,    -1,   111,    -1,    -1,
      -1,    -1,   116,   117,    -1,    -1,    -1,    -1,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,   140,   141,   142,    -1,
      -1,    -1,   146,    -1,   148,   149,    -1,   151,   152,   153,
      -1,    -1,   156,   157,    -1,   159,   160,   161,   162,   163,
      -1,    -1,   166,   167,   168,    -1,    -1,   171,   172,    -1,
     174,   175,   176,    -1,    -1,   179,    -1,    -1,    -1,   183,
      -1,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
      -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
      -1,   205,   206,    -1,    -1,    -1,   210,   211,   212,   213,
      -1,    -1,   216,   217,   218,    -1,   220,    -1,   222,    -1,
      -1,    -1,    -1,   227,   228,    -1,    -1,    -1,   232,    -1,
     234,   235,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,
      -1,   245,   246,    -1,    -1,   249,    -1,    -1,   252,   253,
     254,    -1,    -1,    -1,    -1,   259,   260,    -1,   262,    -1,
     264,    -1,   266,   267,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,    -1,   289,   290,   291,    -1,   293,
     294,   295,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,
     304,   305,   306,   307,   308,   309,    -1,    -1,   312,   313,
      -1,   315,    -1,   317,    -1,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,    -1,   330,   331,    -1,    -1,
     334,   335,   336,   337,    -1,    -1,    -1,   341,   342,    -1,
      -1,    -1,    -1,   347,   348,   349,    -1,   351,   352,   353,
      -1,   355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,    -1,    -1,   383,
     384,   385,    -1,   387,    -1,   389,   390,   391,   392,   393,
      -1,   395,   396,   397,   398,    -1,    -1,   401,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,    -1,   412,   413,
     414,   415,   416,    -1,   418,   419,    -1,   421,   422,   423,
      -1,    -1,   426,    -1,   428,    -1,   430,   431,    -1,   433,
     434,    -1,    -1,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,    -1,
      -1,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,   483,
     484,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,   493,
     494,   495,    -1,    -1,    -1,   499,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,    -1,   510,   511,   512,   513,
      -1,   515,   516,    -1,    -1,   519,   520,   521,   522,   523,
      -1,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
      -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,
     544,   545,   546,   547,    -1,   549,   550,    -1,   552,   553,
      -1,   555,   556,    -1,    -1,   559,    -1,    -1,   562,    -1,
     564,    -1,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,
      -1,   575,    -1,    -1,   578,    -1,    -1,    -1,   582,   583,
     584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,
      -1,   595,   596,   597,    -1,    -1,   600,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    -1,   618,    22,    23,    24,    25,    26,
      27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,    -1,
      57,    58,    -1,    -1,    -1,    -1,    63,    64,    65,    66,
      67,    68,    69,    -1,    71,    72,    -1,    74,    -1,    76,
      -1,    78,    79,    80,    81,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    90,    -1,    92,    -1,    -1,    95,    -1,
      -1,    98,    -1,    -1,    -1,   102,    -1,    -1,    -1,   106,
     107,   108,    -1,    -1,   111,    -1,    -1,    -1,    -1,   116,
      -1,    -1,    -1,    -1,    -1,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,    -1,    -1,    -1,
      -1,    -1,    -1,   140,   141,   142,    -1,    -1,    -1,   146,
      -1,    -1,   149,    -1,   151,   152,   153,    -1,    -1,   156,
     157,    -1,   159,   160,   161,   162,    -1,    -1,    -1,   166,
     167,   168,    -1,    -1,   171,   172,   173,   174,   175,   176,
      -1,    -1,    -1,    -1,    -1,    -1,   183,    -1,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,    -1,   195,    -1,
      -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,    -1,   206,
      -1,    -1,    -1,   210,   211,   212,   213,   214,    -1,   216,
     217,   218,    -1,   220,    -1,   222,    -1,    -1,    -1,    -1,
     227,    -1,    -1,    -1,    -1,   232,    -1,   234,   235,    -1,
     237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,   246,
      -1,    -1,   249,   250,    -1,   252,   253,    -1,    -1,    -1,
      -1,    -1,   259,   260,    -1,   262,    -1,   264,    -1,   266,
     267,    -1,    -1,    -1,    -1,   272,    -1,    -1,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,    -1,   289,   290,   291,    -1,   293,   294,   295,   296,
      -1,   298,   299,    -1,    -1,    -1,    -1,   304,   305,   306,
     307,   308,   309,    -1,    -1,   312,   313,    -1,   315,    -1,
     317,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,    -1,   330,   331,    -1,    -1,   334,   335,   336,
     337,    -1,    -1,    -1,    -1,   342,    -1,    -1,    -1,    -1,
     347,   348,   349,    -1,   351,   352,   353,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   366,
     367,    -1,    -1,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,    -1,    -1,    -1,    -1,   384,   385,    -1,
     387,    -1,   389,   390,   391,   392,   393,    -1,   395,   396,
     397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,   415,   416,
      -1,   418,    -1,    -1,   421,    -1,   423,   424,    -1,   426,
      -1,    -1,    -1,   430,    -1,    -1,   433,   434,   435,    -1,
      -1,    -1,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,   449,    -1,    -1,    -1,    -1,   454,   455,   456,
      -1,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,
      -1,   468,    -1,   470,    -1,   472,    -1,    -1,   475,   476,
      -1,    -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,
      -1,    -1,    -1,   490,    -1,    -1,   493,    -1,   495,    -1,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,    -1,   510,   511,   512,   513,    -1,   515,   516,
      -1,    -1,   519,   520,   521,   522,   523,    -1,    -1,   526,
     527,    -1,   529,   530,   531,   532,   533,    -1,    -1,    -1,
      -1,    -1,   539,   540,    -1,    -1,    -1,    -1,   545,   546,
     547,    -1,   549,   550,    -1,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,    -1,    -1,   562,    -1,    -1,    -1,   566,
     567,   568,    -1,    -1,    -1,    -1,    -1,    -1,   575,    -1,
      -1,   578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,
      -1,   588,    -1,    -1,    -1,   592,    -1,    -1,   595,    -1,
     597,    -1,     5,   600,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,   613,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    69,    -1,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,    -1,    -1,   102,
      -1,    -1,    -1,   106,   107,   108,    -1,    -1,   111,    -1,
      -1,    -1,    -1,   116,   117,    -1,    -1,    -1,    -1,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,    -1,   140,   141,   142,
      -1,    -1,    -1,   146,    -1,   148,   149,    -1,   151,   152,
     153,    -1,    -1,   156,   157,    -1,   159,   160,   161,   162,
     163,    -1,    -1,   166,   167,   168,    -1,    -1,   171,   172,
      -1,   174,   175,   176,    -1,    -1,   179,    -1,    -1,    -1,
     183,    -1,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,
      -1,    -1,   205,   206,    -1,    -1,    -1,   210,   211,   212,
     213,    -1,    -1,   216,   217,   218,    -1,   220,    -1,   222,
      -1,    -1,    -1,    -1,   227,   228,    -1,    -1,    -1,   232,
      -1,   234,   235,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,    -1,   245,   246,    -1,    -1,   249,    -1,    -1,   252,
     253,    -1,    -1,    -1,    -1,    -1,   259,   260,    -1,   262,
      -1,   264,    -1,   266,   267,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,    -1,   289,   290,   291,    -1,
     293,   294,   295,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,   304,   305,   306,   307,   308,   309,    -1,    -1,   312,
     313,    -1,   315,    -1,   317,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,    -1,   330,   331,    -1,
      -1,   334,   335,   336,   337,    -1,    -1,    -1,   341,   342,
      -1,    -1,    -1,    -1,   347,   348,   349,    -1,   351,   352,
     353,    -1,   355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,    -1,    -1,
     383,   384,   385,    -1,   387,    -1,   389,   390,   391,   392,
     393,    -1,   395,   396,   397,   398,    -1,    -1,   401,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,    -1,   421,   422,
     423,    -1,    -1,   426,    -1,   428,    -1,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,
      -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   484,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,    -1,    -1,    -1,   499,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,    -1,   510,   511,   512,
     513,    -1,   515,   516,    -1,    -1,   519,   520,   521,   522,
     523,    -1,    -1,   526,   527,    -1,   529,   530,   531,   532,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,
      -1,   544,   545,   546,   547,    -1,   549,   550,    -1,   552,
     553,    -1,   555,   556,    -1,    -1,   559,    -1,    -1,   562,
      -1,   564,    -1,   566,   567,   568,    -1,    -1,    -1,    -1,
      -1,    -1,   575,    -1,    -1,   578,    -1,    -1,    -1,   582,
     583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,
     593,    -1,   595,   596,   597,    -1,     5,   600,     7,     8,
       9,    10,    11,   606,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      59,    -1,    61,    -1,    63,    64,    65,    66,    67,    68,
      69,    -1,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    -1,    86,    87,    88,
      89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,
      -1,    -1,    -1,   102,    -1,    -1,    -1,   106,   107,   108,
      -1,    -1,   111,    -1,    -1,    -1,    -1,   116,   117,    -1,
      -1,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
      -1,   140,   141,   142,    -1,    -1,    -1,   146,    -1,   148,
     149,    -1,   151,   152,   153,    -1,    -1,   156,   157,    -1,
     159,   160,   161,   162,   163,    -1,    -1,   166,   167,   168,
      -1,    -1,   171,   172,    -1,   174,   175,   176,    -1,    -1,
     179,    -1,    -1,    -1,   183,    -1,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,    -1,   195,    -1,    -1,    -1,
     199,   200,    -1,   202,    -1,    -1,   205,   206,    -1,    -1,
      -1,   210,   211,   212,   213,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,   222,    -1,    -1,    -1,    -1,   227,   228,
      -1,    -1,    -1,   232,    -1,   234,   235,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,   245,   246,    -1,    -1,
     249,    -1,    -1,   252,   253,    -1,    -1,    -1,    -1,    -1,
     259,   260,    -1,   262,    -1,   264,    -1,   266,   267,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,    -1,
     289,   290,   291,    -1,   293,   294,   295,   296,    -1,   298,
     299,    -1,    -1,    -1,    -1,   304,   305,   306,   307,   308,
     309,    -1,    -1,   312,   313,    -1,   315,    -1,   317,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,    -1,   334,   335,   336,   337,    -1,
      -1,    -1,   341,   342,    -1,    -1,    -1,    -1,   347,   348,
     349,    -1,   351,   352,   353,    -1,   355,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,    -1,    -1,   383,   384,   385,    -1,   387,    -1,
     389,   390,   391,   392,   393,    -1,   395,   396,   397,   398,
      -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,
     409,    -1,    -1,   412,   413,   414,   415,   416,    -1,   418,
     419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,   428,
      -1,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
      -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,    -1,    -1,
      -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,    -1,
      -1,   490,    -1,    -1,   493,   494,   495,    -1,    -1,    -1,
     499,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
      -1,   510,   511,   512,   513,    -1,   515,   516,    -1,    -1,
     519,   520,   521,   522,   523,    -1,    -1,   526,   527,    -1,
     529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,    -1,
     539,   540,    -1,    -1,    -1,   544,   545,   546,   547,    -1,
     549,   550,    -1,   552,   553,    -1,   555,   556,    -1,    -1,
     559,    -1,    -1,   562,    -1,   564,    -1,   566,   567,   568,
      -1,    -1,    -1,    -1,    -1,    -1,   575,    -1,    -1,   578,
      -1,    -1,    -1,   582,   583,   584,   585,    -1,    -1,    -1,
      -1,    -1,    -1,   592,   593,    -1,   595,   596,   597,    -1,
       5,   600,     7,     8,     9,    10,    11,   606,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    59,    -1,    61,    -1,    63,    64,
      65,    66,    67,    68,    69,    -1,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      -1,    86,    87,    88,    89,    90,    -1,    92,    -1,    -1,
      95,    -1,    -1,    98,    -1,    -1,    -1,   102,    -1,    -1,
      -1,   106,   107,   108,    -1,    -1,   111,    -1,    -1,    -1,
      -1,   116,   117,    -1,    -1,    -1,    -1,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,    -1,   140,   141,   142,    -1,    -1,
      -1,   146,    -1,   148,   149,    -1,   151,   152,   153,    -1,
      -1,   156,   157,    -1,   159,   160,   161,   162,   163,    -1,
      -1,   166,   167,   168,    -1,    -1,   171,   172,    -1,   174,
     175,   176,    -1,    -1,   179,    -1,    -1,    -1,   183,    -1,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,    -1,
     205,   206,    -1,    -1,    -1,   210,   211,   212,   213,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,   222,    -1,    -1,
      -1,    -1,   227,   228,    -1,    -1,    -1,   232,    -1,   234,
     235,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,
     245,   246,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,
      -1,    -1,    -1,    -1,   259,   260,    -1,   262,    -1,   264,
      -1,   266,   267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,    -1,   289,   290,   291,    -1,   293,   294,
     295,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,   304,
     305,   306,   307,   308,   309,    -1,    -1,   312,   313,    -1,
     315,    -1,   317,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,    -1,   330,   331,    -1,    -1,   334,
     335,   336,   337,    -1,    -1,    -1,   341,   342,    -1,    -1,
      -1,    -1,   347,   348,   349,    -1,   351,   352,   353,    -1,
     355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,    -1,    -1,   383,   384,
     385,    -1,   387,    -1,   389,   390,   391,   392,   393,    -1,
     395,   396,   397,   398,    -1,    -1,   401,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,    -1,   412,   413,   414,
     415,   416,    -1,   418,   419,    -1,   421,   422,   423,    -1,
      -1,   426,    -1,   428,    -1,   430,   431,    -1,   433,   434,
      -1,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,    -1,    -1,   461,    -1,    -1,    -1,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,
      -1,   486,    -1,    -1,    -1,   490,    -1,    -1,   493,   494,
     495,    -1,    -1,    -1,   499,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,    -1,   510,   511,   512,   513,    -1,
     515,   516,    -1,    -1,   519,   520,   521,   522,   523,    -1,
      -1,   526,   527,    -1,   529,   530,   531,   532,   533,    -1,
      -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,   544,
     545,   546,   547,    -1,   549,   550,    -1,   552,   553,    -1,
     555,   556,    -1,    -1,   559,    -1,    -1,   562,    -1,   564,
      -1,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,    -1,
     575,    -1,    -1,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,    -1,
     595,   596,   597,    -1,     5,   600,     7,     8,     9,    10,
      11,   606,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    59,    -1,
      61,    -1,    63,    64,    65,    66,    67,    68,    69,    -1,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    -1,    86,    87,    88,    89,    90,
      -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,    -1,
      -1,   102,    -1,    -1,    -1,   106,   107,   108,    -1,    -1,
     111,    -1,    -1,    -1,    -1,   116,   117,    -1,    -1,    -1,
      -1,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,    -1,    -1,    -1,   137,    -1,    -1,   140,
     141,   142,    -1,    -1,    -1,   146,    -1,   148,   149,    -1,
     151,   152,   153,    -1,    -1,   156,   157,    -1,   159,   160,
     161,   162,   163,    -1,    -1,   166,   167,   168,    -1,    -1,
     171,   172,    -1,   174,   175,   176,    -1,    -1,   179,    -1,
      -1,    -1,   183,    -1,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,    -1,   195,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,    -1,   205,   206,    -1,    -1,    -1,   210,
     211,   212,   213,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,   222,    -1,    -1,    -1,    -1,   227,   228,    -1,    -1,
      -1,   232,    -1,   234,   235,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,    -1,   245,   246,    -1,    -1,   249,    -1,
      -1,   252,   253,    -1,    -1,    -1,    -1,    -1,   259,   260,
      -1,   262,    -1,   264,    -1,   266,   267,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,    -1,   289,   290,
     291,    -1,   293,   294,   295,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,   304,   305,   306,   307,   308,   309,    -1,
      -1,   312,   313,    -1,   315,    -1,   317,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,    -1,   330,
     331,    -1,    -1,   334,   335,   336,   337,    -1,    -1,    -1,
     341,   342,    -1,    -1,    -1,    -1,   347,   348,   349,    -1,
     351,   352,   353,    -1,   355,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
      -1,    -1,   383,   384,   385,    -1,   387,    -1,   389,   390,
     391,   392,   393,    -1,   395,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,    -1,    -1,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,    -1,    -1,    -1,   499,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,    -1,   510,
     511,   512,   513,    -1,   515,   516,    -1,    -1,   519,   520,
     521,   522,   523,    -1,    -1,   526,   527,    -1,   529,   530,
     531,   532,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,
      -1,    -1,    -1,   544,   545,   546,   547,    -1,   549,   550,
      -1,   552,   553,    -1,   555,   556,    -1,    -1,   559,    -1,
      -1,   562,    -1,   564,    -1,   566,   567,   568,    -1,    -1,
      -1,    -1,    -1,    -1,   575,    -1,    -1,   578,    -1,    -1,
      -1,   582,   583,   584,   585,    -1,    -1,    -1,    -1,    -1,
      -1,   592,   593,    -1,   595,   596,   597,    -1,     5,   600,
       7,     8,     9,    10,    11,   606,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    59,    -1,    61,    -1,    63,    64,    65,    66,
      67,    68,    69,    -1,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    -1,    86,
      87,    88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,
      -1,    98,    -1,    -1,    -1,   102,    -1,    -1,    -1,   106,
     107,   108,    -1,    -1,   111,    -1,    -1,    -1,    -1,   116,
     117,   118,    -1,    -1,    -1,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,    -1,    -1,    -1,
     137,    -1,    -1,   140,   141,   142,    -1,    -1,    -1,   146,
      -1,   148,   149,    -1,   151,   152,   153,    -1,    -1,   156,
     157,    -1,   159,   160,   161,   162,   163,    -1,    -1,   166,
     167,   168,    -1,    -1,   171,   172,    -1,   174,   175,   176,
     177,    -1,   179,    -1,    -1,    -1,   183,    -1,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,    -1,   195,    -1,
      -1,    -1,   199,   200,    -1,   202,   203,    -1,   205,   206,
      -1,    -1,    -1,   210,   211,   212,   213,    -1,    -1,   216,
     217,   218,    -1,   220,    -1,   222,    -1,    -1,    -1,    -1,
     227,   228,    -1,    -1,    -1,   232,    -1,   234,   235,    -1,
     237,   238,    -1,    -1,    -1,   242,    -1,    -1,   245,   246,
      -1,    -1,   249,    -1,    -1,   252,   253,    -1,    -1,    -1,
      -1,    -1,   259,   260,    -1,   262,    -1,   264,    -1,   266,
     267,    -1,    -1,   270,    -1,    -1,    -1,    -1,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,    -1,   289,   290,   291,    -1,   293,   294,   295,   296,
      -1,   298,   299,    -1,    -1,    -1,    -1,   304,   305,   306,
     307,   308,   309,    -1,    -1,   312,   313,    -1,   315,    -1,
     317,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,    -1,   330,   331,    -1,    -1,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,    -1,    -1,   345,    -1,
     347,   348,   349,    -1,   351,   352,   353,    -1,   355,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,
     367,    -1,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,    -1,    -1,   383,   384,   385,    -1,
     387,    -1,   389,   390,   391,   392,   393,    -1,   395,   396,
     397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,   415,   416,
      -1,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,   428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
      -1,    -1,   479,   480,   481,    -1,   483,   484,    -1,   486,
      -1,    -1,    -1,   490,    -1,    -1,   493,   494,   495,    -1,
      -1,    -1,   499,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,    -1,   510,   511,   512,   513,    -1,   515,   516,
      -1,    -1,   519,   520,   521,   522,   523,    -1,    -1,   526,
     527,    -1,   529,   530,   531,   532,   533,    -1,    -1,    -1,
      -1,    -1,   539,   540,    -1,    -1,    -1,   544,   545,   546,
     547,   548,   549,   550,    -1,   552,   553,    -1,   555,   556,
      -1,    -1,   559,    -1,    -1,   562,    -1,   564,    -1,   566,
     567,   568,    -1,    -1,    -1,    -1,    -1,    -1,   575,    -1,
      -1,   578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,
      -1,    -1,    -1,    -1,    -1,   592,   593,    -1,   595,   596,
     597,    -1,     5,   600,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    69,    -1,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,    -1,    -1,   102,
      -1,    -1,    -1,   106,   107,   108,    -1,    -1,   111,    -1,
      -1,    -1,    -1,   116,   117,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,    -1,   140,   141,   142,
      -1,    -1,    -1,   146,    -1,   148,   149,    -1,   151,   152,
     153,   154,    -1,   156,   157,    -1,   159,   160,   161,   162,
     163,    -1,    -1,   166,   167,   168,    -1,    -1,   171,   172,
      -1,   174,   175,   176,    -1,    -1,   179,    -1,    -1,    -1,
     183,    -1,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,
      -1,    -1,   205,   206,    -1,    -1,    -1,   210,   211,   212,
     213,    -1,    -1,   216,   217,   218,    -1,   220,    -1,   222,
      -1,    -1,    -1,    -1,   227,   228,    -1,    -1,    -1,   232,
      -1,   234,   235,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,    -1,   245,   246,    -1,    -1,   249,    -1,    -1,   252,
     253,   254,    -1,    -1,    -1,    -1,   259,   260,    -1,   262,
      -1,   264,    -1,   266,   267,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,    -1,   289,   290,   291,    -1,
     293,   294,   295,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,   304,   305,   306,   307,   308,   309,    -1,    -1,   312,
     313,    -1,   315,    -1,   317,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,    -1,   330,   331,    -1,
      -1,   334,   335,   336,   337,    -1,    -1,    -1,   341,   342,
      -1,    -1,    -1,    -1,   347,   348,   349,    -1,   351,   352,
     353,    -1,   355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,    -1,    -1,
     383,   384,   385,    -1,   387,    -1,   389,   390,   391,   392,
     393,    -1,   395,   396,   397,   398,    -1,    -1,   401,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,    -1,   421,   422,
     423,    -1,    -1,   426,    -1,   428,    -1,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,    -1,   460,   461,    -1,
      -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   484,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,    -1,    -1,    -1,   499,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,    -1,   510,   511,   512,
     513,    -1,   515,   516,    -1,    -1,   519,   520,   521,   522,
     523,    -1,   525,   526,   527,    -1,   529,   530,   531,   532,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,
      -1,   544,   545,   546,   547,    -1,   549,   550,    -1,   552,
     553,    -1,   555,   556,    -1,    -1,   559,    -1,    -1,   562,
      -1,   564,    -1,   566,   567,   568,    -1,    -1,    -1,    -1,
      -1,    -1,   575,    -1,    -1,   578,    -1,    -1,    -1,   582,
     583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,
     593,    -1,   595,   596,   597,    -1,     5,   600,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      59,    -1,    61,    -1,    63,    64,    65,    66,    67,    68,
      69,    -1,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    -1,    86,    87,    88,
      89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,
      -1,    -1,    -1,   102,    -1,    -1,    -1,   106,   107,   108,
      -1,    -1,   111,    -1,    -1,    -1,    -1,   116,   117,    -1,
      -1,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
      -1,   140,   141,   142,    -1,    -1,    -1,   146,    -1,   148,
     149,    -1,   151,   152,   153,    -1,    -1,   156,   157,    -1,
     159,   160,   161,   162,   163,    -1,    -1,   166,   167,   168,
      -1,    -1,   171,   172,    -1,   174,   175,   176,    -1,    -1,
     179,    -1,    -1,    -1,   183,    -1,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,    -1,   195,    -1,    -1,    -1,
     199,   200,    -1,   202,    -1,    -1,   205,   206,    -1,    -1,
      -1,   210,   211,   212,   213,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,   222,    -1,    -1,    -1,    -1,   227,   228,
      -1,    -1,    -1,   232,    -1,   234,   235,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,   245,   246,    -1,    -1,
     249,    -1,    -1,   252,   253,    -1,    -1,    -1,    -1,    -1,
     259,   260,    -1,   262,    -1,   264,    -1,   266,   267,    -1,
      -1,   270,    -1,    -1,    -1,    -1,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,    -1,
     289,   290,   291,    -1,   293,   294,   295,   296,    -1,   298,
     299,    -1,    -1,    -1,    -1,   304,   305,   306,   307,   308,
     309,    -1,    -1,   312,   313,    -1,   315,    -1,   317,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,    -1,   334,   335,   336,   337,    -1,
      -1,    -1,   341,   342,    -1,    -1,   345,    -1,   347,   348,
     349,    -1,   351,   352,   353,    -1,   355,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,    -1,    -1,   383,   384,   385,    -1,   387,    -1,
     389,   390,   391,   392,   393,    -1,   395,   396,   397,   398,
      -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,
     409,    -1,    -1,   412,   413,   414,   415,   416,    -1,   418,
     419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,   428,
      -1,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
      -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,    -1,    -1,
      -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,    -1,
      -1,   490,    -1,    -1,   493,   494,   495,    -1,    -1,    -1,
     499,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
      -1,   510,   511,   512,   513,    -1,   515,   516,    -1,    -1,
     519,   520,   521,   522,   523,    -1,    -1,   526,   527,    -1,
     529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,    -1,
     539,   540,    -1,    -1,    -1,   544,   545,   546,   547,   548,
     549,   550,    -1,   552,   553,    -1,   555,   556,    -1,    -1,
     559,    -1,    -1,   562,    -1,   564,    -1,   566,   567,   568,
      -1,    -1,    -1,    -1,    -1,    -1,   575,    -1,    -1,   578,
      -1,    -1,    -1,   582,   583,   584,   585,    -1,    -1,    -1,
      -1,    -1,    -1,   592,   593,    -1,   595,   596,   597,    -1,
       5,   600,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    59,    -1,    61,    -1,    63,    64,
      65,    66,    67,    68,    69,    -1,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      -1,    86,    87,    88,    89,    90,    -1,    92,    -1,    -1,
      95,    -1,    -1,    98,    -1,    -1,    -1,   102,    -1,    -1,
      -1,   106,   107,   108,    -1,    -1,   111,    -1,    -1,    -1,
      -1,   116,   117,    -1,    -1,    -1,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,    -1,   140,   141,   142,    -1,    -1,
      -1,   146,    -1,   148,   149,    -1,   151,   152,   153,    -1,
      -1,   156,   157,    -1,   159,   160,   161,   162,   163,    -1,
      -1,   166,   167,   168,    -1,    -1,   171,   172,    -1,   174,
     175,   176,    -1,    -1,   179,    -1,    -1,    -1,   183,    -1,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,    -1,
     205,   206,    -1,    -1,    -1,   210,   211,   212,   213,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,   222,    -1,    -1,
      -1,    -1,   227,   228,    -1,    -1,    -1,   232,    -1,   234,
     235,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,
     245,   246,    -1,    -1,   249,    -1,    -1,   252,   253,   254,
      -1,    -1,    -1,    -1,   259,   260,    -1,   262,    -1,   264,
      -1,   266,   267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,    -1,   289,   290,   291,    -1,   293,   294,
     295,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,   304,
     305,   306,   307,   308,   309,    -1,    -1,   312,   313,    -1,
     315,    -1,   317,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,    -1,   330,   331,    -1,    -1,   334,
     335,   336,   337,    -1,    -1,    -1,   341,   342,    -1,    -1,
      -1,    -1,   347,   348,   349,    -1,   351,   352,   353,    -1,
     355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,    -1,    -1,   383,   384,
     385,    -1,   387,    -1,   389,   390,   391,   392,   393,    -1,
     395,   396,   397,   398,    -1,    -1,   401,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,    -1,   412,   413,   414,
     415,   416,    -1,   418,   419,    -1,   421,   422,   423,    -1,
      -1,   426,    -1,   428,    -1,   430,   431,    -1,   433,   434,
      -1,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,    -1,    -1,   461,    -1,    -1,    -1,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,
      -1,   486,    -1,    -1,    -1,   490,    -1,    -1,   493,   494,
     495,    -1,    -1,    -1,   499,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,    -1,   510,   511,   512,   513,    -1,
     515,   516,    -1,    -1,   519,   520,   521,   522,   523,    -1,
     525,   526,   527,    -1,   529,   530,   531,   532,   533,    -1,
      -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,   544,
     545,   546,   547,    -1,   549,   550,    -1,   552,   553,    -1,
     555,   556,    -1,    -1,   559,    -1,    -1,   562,    -1,   564,
      -1,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,    -1,
     575,    -1,    -1,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,    -1,
     595,   596,   597,    -1,     5,   600,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    59,    -1,
      61,    -1,    63,    64,    65,    66,    67,    68,    69,    -1,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    -1,    86,    87,    88,    89,    90,
      -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,    -1,
      -1,   102,    -1,    -1,    -1,   106,   107,   108,    -1,    -1,
     111,    -1,    -1,    -1,    -1,   116,   117,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,    -1,    -1,    -1,   137,    -1,    -1,   140,
     141,   142,    -1,    -1,    -1,   146,    -1,   148,   149,    -1,
     151,   152,   153,    -1,    -1,   156,   157,    -1,   159,   160,
     161,   162,   163,    -1,    -1,   166,   167,   168,    -1,    -1,
     171,   172,    -1,   174,   175,   176,    -1,    -1,   179,    -1,
      -1,    -1,   183,    -1,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,    -1,   195,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,    -1,   205,   206,    -1,    -1,    -1,   210,
     211,   212,   213,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,   222,    -1,    -1,    -1,    -1,   227,   228,    -1,    -1,
      -1,   232,    -1,   234,   235,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,    -1,   245,   246,    -1,    -1,   249,    -1,
      -1,   252,   253,   254,    -1,    -1,    -1,    -1,   259,   260,
      -1,   262,    -1,   264,    -1,   266,   267,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,    -1,   289,   290,
     291,    -1,   293,   294,   295,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,   304,   305,   306,   307,   308,   309,    -1,
      -1,   312,   313,    -1,   315,    -1,   317,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,    -1,   330,
     331,    -1,    -1,   334,   335,   336,   337,    -1,    -1,    -1,
     341,   342,    -1,    -1,    -1,    -1,   347,   348,   349,    -1,
     351,   352,   353,    -1,   355,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
      -1,    -1,   383,   384,   385,    -1,   387,    -1,   389,   390,
     391,   392,   393,    -1,   395,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,    -1,    -1,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,    -1,    -1,    -1,   499,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,    -1,   510,
     511,   512,   513,    -1,   515,   516,    -1,    -1,   519,   520,
     521,   522,   523,    -1,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,
      -1,    -1,    -1,   544,   545,   546,   547,    -1,   549,   550,
      -1,   552,   553,    -1,   555,   556,    -1,    -1,   559,    -1,
      -1,   562,    -1,   564,    -1,   566,   567,   568,    -1,    -1,
      -1,    -1,    -1,    -1,   575,    -1,    -1,   578,    -1,    -1,
      -1,   582,   583,   584,   585,    -1,    -1,    -1,    -1,    -1,
      -1,   592,   593,    -1,   595,   596,   597,    -1,     5,   600,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    59,    -1,    61,    -1,    63,    64,    65,    66,
      67,    68,    69,    -1,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    -1,    86,
      87,    88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,
      -1,    98,    -1,   100,    -1,   102,    -1,    -1,    -1,   106,
     107,   108,    -1,    -1,   111,    -1,    -1,    -1,    -1,   116,
     117,    -1,    -1,    -1,    -1,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,    -1,    -1,    -1,
     137,    -1,    -1,   140,   141,   142,    -1,    -1,    -1,   146,
      -1,   148,   149,    -1,   151,   152,   153,    -1,    -1,   156,
     157,    -1,   159,   160,   161,   162,   163,    -1,    -1,   166,
     167,   168,    -1,    -1,   171,   172,    -1,   174,   175,   176,
      -1,    -1,   179,    -1,    -1,    -1,   183,    -1,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,    -1,   195,    -1,
      -1,    -1,   199,   200,    -1,   202,    -1,    -1,   205,   206,
      -1,    -1,    -1,   210,   211,   212,   213,    -1,    -1,   216,
     217,   218,    -1,   220,    -1,   222,    -1,    -1,    -1,    -1,
     227,   228,    -1,    -1,    -1,   232,    -1,   234,   235,    -1,
     237,   238,    -1,    -1,    -1,   242,    -1,    -1,   245,   246,
      -1,    -1,   249,    -1,    -1,   252,   253,   254,    -1,    -1,
      -1,    -1,   259,   260,    -1,   262,    -1,   264,    -1,   266,
     267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,    -1,   289,   290,   291,    -1,   293,   294,   295,   296,
      -1,   298,   299,    -1,    -1,    -1,    -1,   304,   305,   306,
     307,   308,   309,    -1,    -1,   312,   313,    -1,   315,    -1,
     317,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,    -1,   330,   331,    -1,    -1,   334,   335,   336,
     337,    -1,    -1,    -1,   341,   342,    -1,    -1,    -1,    -1,
     347,   348,   349,    -1,   351,   352,   353,    -1,   355,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,
     367,    -1,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,    -1,    -1,   383,   384,   385,    -1,
     387,    -1,   389,   390,   391,   392,   393,    -1,   395,   396,
     397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,   415,   416,
      -1,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,   428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
      -1,    -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,
      -1,    -1,    -1,   490,    -1,    -1,   493,   494,   495,    -1,
      -1,    -1,   499,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,    -1,   510,   511,   512,   513,    -1,   515,   516,
      -1,    -1,   519,   520,   521,   522,   523,    -1,   525,   526,
     527,    -1,   529,   530,   531,   532,   533,    -1,    -1,    -1,
      -1,    -1,   539,   540,    -1,    -1,    -1,   544,   545,   546,
     547,    -1,   549,   550,    -1,   552,   553,    -1,   555,   556,
      -1,    -1,   559,    -1,    -1,   562,    -1,   564,    -1,   566,
     567,   568,    -1,    -1,    -1,    -1,    -1,    -1,   575,    -1,
      -1,   578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,
      -1,    -1,    -1,    -1,    -1,   592,   593,    -1,   595,   596,
     597,    -1,     5,   600,     7,     8,     9,    10,    11,    12,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    69,    -1,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,    -1,    -1,   102,
      -1,    -1,    -1,   106,   107,   108,    -1,    -1,   111,    -1,
      -1,    -1,    -1,   116,   117,    -1,    -1,    -1,    -1,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,    -1,   140,   141,   142,
      -1,    -1,    -1,   146,    -1,   148,   149,    -1,   151,   152,
     153,    -1,    -1,   156,   157,    -1,   159,   160,   161,   162,
     163,    -1,    -1,   166,   167,   168,    -1,    -1,   171,   172,
      -1,   174,   175,   176,    -1,    -1,   179,    -1,    -1,    -1,
     183,    -1,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,
      -1,    -1,   205,   206,    -1,    -1,    -1,   210,   211,   212,
     213,    -1,    -1,   216,   217,   218,    -1,   220,    -1,   222,
      -1,    -1,    -1,    -1,   227,   228,    -1,    -1,    -1,   232,
      -1,   234,   235,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,    -1,   245,   246,    -1,    -1,   249,    -1,    -1,   252,
     253,   254,    -1,    -1,    -1,    -1,   259,   260,    -1,   262,
      -1,   264,    -1,   266,   267,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,    -1,   289,   290,   291,    -1,
     293,   294,   295,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,   304,   305,   306,   307,   308,   309,    -1,    -1,   312,
     313,    -1,   315,    -1,   317,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,    -1,   330,   331,    -1,
      -1,   334,   335,   336,   337,    -1,    -1,    -1,   341,   342,
      -1,    -1,    -1,    -1,   347,   348,   349,    -1,   351,   352,
     353,    -1,   355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,    -1,    -1,
     383,   384,   385,    -1,   387,    -1,   389,   390,   391,   392,
     393,    -1,   395,   396,   397,   398,    -1,    -1,   401,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,    -1,   421,   422,
     423,    -1,    -1,   426,    -1,   428,    -1,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,
      -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   484,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,    -1,    -1,    -1,   499,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,    -1,   510,   511,   512,
     513,    -1,   515,   516,    -1,    -1,   519,   520,   521,   522,
     523,    -1,   525,   526,   527,    -1,   529,   530,   531,   532,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,
      -1,   544,   545,   546,   547,    -1,   549,   550,    -1,   552,
     553,    -1,   555,   556,    -1,    -1,   559,    -1,    -1,   562,
      -1,   564,    -1,   566,   567,   568,    -1,    -1,    -1,    -1,
      -1,    -1,   575,    -1,    -1,   578,    -1,    -1,    -1,   582,
     583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,
     593,    -1,   595,   596,   597,    -1,     5,   600,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    35,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      59,    -1,    61,    -1,    63,    64,    65,    66,    67,    68,
      69,    -1,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    -1,    86,    87,    88,
      89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,
      -1,    -1,    -1,   102,    -1,    -1,    -1,   106,   107,   108,
      -1,    -1,   111,    -1,    -1,    -1,    -1,   116,   117,    -1,
      -1,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
      -1,   140,   141,   142,    -1,    -1,    -1,   146,    -1,   148,
     149,    -1,   151,   152,   153,    -1,    -1,   156,   157,    -1,
     159,   160,   161,   162,   163,    -1,    -1,   166,   167,   168,
      -1,    -1,   171,   172,    -1,   174,   175,   176,    -1,    -1,
     179,    -1,    -1,    -1,   183,    -1,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,    -1,   195,    -1,    -1,    -1,
     199,   200,    -1,   202,   203,    -1,   205,   206,    -1,    -1,
      -1,   210,   211,   212,   213,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,   222,    -1,    -1,    -1,    -1,   227,   228,
      -1,    -1,    -1,   232,    -1,   234,   235,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,   245,   246,    -1,    -1,
     249,    -1,    -1,   252,   253,    -1,    -1,    -1,    -1,    -1,
     259,   260,    -1,   262,    -1,   264,    -1,   266,   267,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,    -1,
     289,   290,   291,    -1,   293,   294,   295,   296,    -1,   298,
     299,    -1,    -1,    -1,    -1,   304,   305,   306,   307,   308,
     309,    -1,    -1,   312,   313,    -1,   315,    -1,   317,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,    -1,   334,   335,   336,   337,    -1,
      -1,    -1,   341,   342,    -1,    -1,    -1,    -1,   347,   348,
     349,    -1,   351,   352,   353,    -1,   355,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,    -1,    -1,   383,   384,   385,    -1,   387,    -1,
     389,   390,   391,   392,   393,    -1,   395,   396,   397,   398,
      -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,
     409,    -1,    -1,   412,   413,   414,   415,   416,    -1,   418,
     419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,   428,
      -1,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
      -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,    -1,    -1,
      -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,    -1,
      -1,   490,    -1,    -1,   493,   494,   495,    -1,    -1,    -1,
     499,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
      -1,   510,   511,   512,   513,    -1,   515,   516,    -1,    -1,
     519,   520,   521,   522,   523,    -1,   525,   526,   527,    -1,
     529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,    -1,
     539,   540,    -1,    -1,    -1,   544,   545,   546,   547,    -1,
     549,   550,    -1,   552,   553,    -1,   555,   556,    -1,    -1,
     559,    -1,    -1,   562,    -1,   564,    -1,   566,   567,   568,
      -1,    -1,    -1,    -1,    -1,    -1,   575,    -1,    -1,   578,
      -1,    -1,    -1,   582,   583,   584,   585,    -1,    -1,    -1,
      -1,    -1,    -1,   592,   593,    -1,   595,   596,   597,    -1,
       5,   600,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    59,    -1,    61,    -1,    63,    64,
      65,    66,    67,    68,    69,    -1,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      -1,    86,    87,    88,    89,    90,    -1,    92,    -1,    -1,
      95,    -1,    -1,    98,    -1,    -1,    -1,   102,    -1,    -1,
      -1,   106,   107,   108,    -1,    -1,   111,    -1,    -1,    -1,
      -1,   116,   117,    -1,    -1,    -1,    -1,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,    -1,   140,   141,   142,    -1,    -1,
      -1,   146,    -1,   148,   149,    -1,   151,   152,   153,    -1,
      -1,   156,   157,    -1,   159,   160,   161,   162,   163,    -1,
      -1,   166,   167,   168,    -1,    -1,   171,   172,    -1,   174,
     175,   176,    -1,    -1,   179,    -1,    -1,    -1,   183,    -1,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,    -1,
     205,   206,    -1,    -1,    -1,   210,   211,   212,   213,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,   222,    -1,    -1,
      -1,    -1,   227,   228,    -1,    -1,    -1,   232,    -1,   234,
     235,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,
     245,   246,    -1,    -1,   249,    -1,    -1,   252,   253,   254,
      -1,    -1,    -1,    -1,   259,   260,    -1,   262,    -1,   264,
      -1,   266,   267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,    -1,   289,   290,   291,    -1,   293,   294,
     295,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,   304,
     305,   306,   307,   308,   309,    -1,    -1,   312,   313,    -1,
     315,    -1,   317,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,    -1,   330,   331,    -1,    -1,   334,
     335,   336,   337,    -1,    -1,    -1,   341,   342,    -1,    -1,
      -1,    -1,   347,   348,   349,    -1,   351,   352,   353,    -1,
     355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,    -1,    -1,   383,   384,
     385,    -1,   387,    -1,   389,   390,   391,   392,   393,    -1,
     395,   396,   397,   398,    -1,    -1,   401,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,    -1,   412,   413,   414,
     415,   416,    -1,   418,   419,    -1,   421,   422,   423,    -1,
      -1,   426,    -1,   428,    -1,   430,   431,    -1,   433,   434,
      -1,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,    -1,    -1,   461,    -1,    -1,    -1,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,
      -1,   486,    -1,    -1,    -1,   490,    -1,    -1,   493,   494,
     495,    -1,    -1,    -1,   499,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,    -1,   510,   511,   512,   513,    -1,
     515,   516,    -1,    -1,   519,   520,   521,   522,   523,    -1,
     525,   526,   527,    -1,   529,   530,   531,   532,   533,    -1,
      -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,   544,
     545,   546,   547,    -1,   549,   550,    -1,   552,   553,    -1,
     555,   556,    -1,    -1,   559,    -1,    -1,   562,    -1,   564,
      -1,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,    -1,
     575,    -1,    -1,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,    -1,
     595,   596,   597,    -1,     5,   600,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    59,    -1,
      61,    -1,    63,    64,    65,    66,    67,    68,    69,    -1,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    -1,    86,    87,    88,    89,    90,
      -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,    -1,
      -1,   102,    -1,    -1,    -1,   106,   107,   108,    -1,    -1,
     111,    -1,    -1,    -1,    -1,   116,   117,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,    -1,    -1,    -1,   137,    -1,    -1,   140,
     141,   142,    -1,    -1,    -1,   146,    -1,   148,   149,    -1,
     151,   152,   153,    -1,    -1,   156,   157,    -1,   159,   160,
     161,   162,   163,    -1,    -1,   166,   167,   168,    -1,    -1,
     171,   172,    -1,   174,   175,   176,    -1,    -1,   179,    -1,
      -1,    -1,   183,    -1,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,    -1,   195,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,    -1,   205,   206,    -1,    -1,    -1,   210,
     211,   212,   213,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,   222,    -1,    -1,    -1,    -1,   227,   228,    -1,    -1,
      -1,   232,    -1,   234,   235,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,    -1,   245,   246,    -1,    -1,   249,    -1,
      -1,   252,   253,   254,    -1,    -1,    -1,    -1,   259,   260,
      -1,   262,    -1,   264,    -1,   266,   267,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,    -1,   289,   290,
     291,    -1,   293,   294,   295,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,   304,   305,   306,   307,   308,   309,    -1,
      -1,   312,   313,    -1,   315,    -1,   317,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,    -1,   330,
     331,    -1,    -1,   334,   335,   336,   337,    -1,    -1,    -1,
     341,   342,    -1,    -1,    -1,    -1,   347,   348,   349,    -1,
     351,   352,   353,    -1,   355,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
      -1,    -1,   383,   384,   385,    -1,   387,    -1,   389,   390,
     391,   392,   393,    -1,   395,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,    -1,    -1,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,    -1,    -1,    -1,   499,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,    -1,   510,
     511,   512,   513,    -1,   515,   516,    -1,    -1,   519,   520,
     521,   522,   523,    -1,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,
      -1,    -1,    -1,   544,   545,   546,   547,    -1,   549,   550,
      -1,   552,   553,    -1,   555,   556,    -1,    -1,   559,    -1,
      -1,   562,    -1,   564,    -1,   566,   567,   568,    -1,    -1,
      -1,    -1,    -1,    -1,   575,    -1,    -1,   578,    -1,    -1,
      -1,   582,   583,   584,   585,    -1,    -1,    -1,    -1,    -1,
      -1,   592,   593,    -1,   595,   596,   597,    -1,     5,   600,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    59,    -1,    61,    -1,    63,    64,    65,    66,
      67,    68,    69,    -1,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    -1,    86,
      87,    88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,
      -1,    98,    -1,    -1,    -1,   102,    -1,    -1,    -1,   106,
     107,   108,    -1,    -1,   111,    -1,    -1,    -1,    -1,   116,
     117,    -1,    -1,    -1,    -1,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,    -1,    -1,    -1,
     137,    -1,    -1,   140,   141,   142,    -1,    -1,    -1,   146,
      -1,   148,   149,    -1,   151,   152,   153,    -1,    -1,   156,
     157,    -1,   159,   160,   161,   162,   163,    -1,    -1,   166,
     167,   168,    -1,    -1,   171,   172,    -1,   174,   175,   176,
      -1,    -1,   179,    -1,    -1,    -1,   183,    -1,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,    -1,   195,    -1,
      -1,    -1,   199,   200,    -1,   202,    -1,    -1,   205,   206,
      -1,    -1,    -1,   210,   211,   212,   213,    -1,    -1,   216,
     217,   218,    -1,   220,    -1,   222,    -1,    -1,    -1,    -1,
     227,   228,    -1,    -1,    -1,   232,    -1,   234,   235,    -1,
     237,   238,    -1,    -1,    -1,   242,    -1,    -1,   245,   246,
      -1,    -1,   249,    -1,    -1,   252,   253,   254,    -1,    -1,
      -1,    -1,   259,   260,    -1,   262,    -1,   264,    -1,   266,
     267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,    -1,   289,   290,   291,    -1,   293,   294,   295,   296,
      -1,   298,   299,    -1,    -1,    -1,    -1,   304,   305,   306,
     307,   308,   309,    -1,    -1,   312,   313,    -1,   315,    -1,
     317,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,    -1,   330,   331,    -1,    -1,   334,   335,   336,
     337,    -1,    -1,    -1,   341,   342,    -1,    -1,    -1,    -1,
     347,   348,   349,    -1,   351,   352,   353,    -1,   355,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,
     367,    -1,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,    -1,    -1,   383,   384,   385,    -1,
     387,    -1,   389,   390,   391,   392,   393,    -1,   395,   396,
     397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,   415,   416,
      -1,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,   428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
      -1,    -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,
      -1,    -1,    -1,   490,    -1,    -1,   493,   494,   495,    -1,
      -1,    -1,   499,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,    -1,   510,   511,   512,   513,    -1,   515,   516,
      -1,    -1,   519,   520,   521,   522,   523,    -1,   525,   526,
     527,    -1,   529,   530,   531,   532,   533,    -1,    -1,    -1,
      -1,    -1,   539,   540,    -1,    -1,    -1,   544,   545,   546,
     547,    -1,   549,   550,    -1,   552,   553,    -1,   555,   556,
      -1,    -1,   559,    -1,    -1,   562,    -1,   564,    -1,   566,
     567,   568,    -1,    -1,    -1,    -1,    -1,    -1,   575,    -1,
      -1,   578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,
      -1,    -1,    -1,    -1,    -1,   592,   593,    -1,   595,   596,
     597,    -1,     5,   600,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    18,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    69,    -1,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,    -1,    -1,   102,
      -1,    -1,    -1,   106,   107,   108,    -1,    -1,   111,    -1,
      -1,    -1,    -1,   116,   117,    -1,    -1,    -1,    -1,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,    -1,   140,   141,   142,
      -1,    -1,    -1,   146,    -1,   148,   149,    -1,   151,   152,
     153,    -1,    -1,   156,   157,    -1,   159,   160,   161,   162,
     163,    -1,    -1,   166,   167,   168,    -1,    -1,   171,   172,
      -1,   174,   175,   176,    -1,    -1,   179,    -1,    -1,    -1,
     183,    -1,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,
      -1,    -1,   205,   206,    -1,    -1,    -1,   210,   211,   212,
     213,    -1,    -1,   216,   217,   218,    -1,   220,    -1,   222,
      -1,    -1,    -1,    -1,   227,   228,    -1,    -1,    -1,   232,
      -1,   234,   235,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,    -1,   245,   246,    -1,    -1,   249,    -1,    -1,   252,
     253,    -1,    -1,    -1,    -1,    -1,   259,   260,    -1,   262,
      -1,   264,    -1,   266,   267,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,    -1,   289,   290,   291,    -1,
     293,   294,   295,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,   304,   305,   306,   307,   308,   309,    -1,    -1,   312,
     313,    -1,   315,    -1,   317,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,    -1,   330,   331,    -1,
      -1,   334,   335,   336,   337,    -1,    -1,    -1,   341,   342,
      -1,    -1,    -1,    -1,   347,   348,   349,    -1,   351,   352,
     353,    -1,   355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,    -1,    -1,
     383,   384,   385,    -1,   387,    -1,   389,   390,   391,   392,
     393,    -1,   395,   396,   397,   398,    -1,    -1,   401,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,    -1,   421,   422,
     423,    -1,    -1,   426,    -1,   428,    -1,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,
      -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   484,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,    -1,    -1,    -1,   499,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,    -1,   510,   511,   512,
     513,    -1,   515,   516,    -1,    -1,   519,   520,   521,   522,
     523,    -1,   525,   526,   527,    -1,   529,   530,   531,   532,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,
      -1,   544,   545,   546,   547,    -1,   549,   550,    -1,   552,
     553,    -1,   555,   556,    -1,    -1,   559,    -1,    -1,   562,
      -1,   564,    -1,   566,   567,   568,    -1,    -1,    -1,    -1,
      -1,    -1,   575,    -1,    -1,   578,    -1,    -1,    -1,   582,
     583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,
     593,    -1,   595,   596,   597,    -1,     5,   600,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      59,    -1,    61,    -1,    63,    64,    65,    66,    67,    68,
      69,    -1,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    92,    -1,    -1,    95,    -1,    -1,    98,
      -1,    -1,    -1,   102,    -1,    -1,    -1,   106,   107,   108,
      -1,    -1,   111,    -1,    -1,    -1,    -1,   116,   117,    -1,
      -1,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
      -1,   140,   141,   142,    -1,    -1,    -1,   146,    -1,   148,
     149,    -1,   151,   152,   153,    -1,    -1,   156,   157,    -1,
     159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
      -1,    -1,   171,   172,    -1,   174,   175,   176,    -1,    -1,
     179,    -1,    -1,    -1,   183,    -1,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,    -1,   195,    -1,    -1,    -1,
     199,   200,    -1,   202,    -1,    -1,   205,   206,    -1,    -1,
      -1,   210,   211,   212,   213,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,   222,    -1,    -1,    -1,    -1,   227,   228,
      -1,    -1,    -1,   232,    -1,   234,   235,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,   245,   246,    -1,    -1,
     249,    -1,    -1,   252,   253,    -1,    -1,    -1,    -1,    -1,
     259,   260,    -1,   262,    -1,   264,    -1,   266,   267,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,    -1,
     289,   290,   291,    -1,   293,   294,   295,   296,    -1,   298,
     299,    -1,    -1,    -1,    -1,   304,   305,   306,   307,   308,
     309,    -1,    -1,   312,   313,    -1,   315,    -1,   317,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,    -1,   334,   335,   336,   337,    -1,
      -1,    -1,   341,   342,    -1,    -1,    -1,    -1,   347,   348,
     349,    -1,   351,   352,   353,    -1,   355,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,    -1,    -1,   383,   384,   385,    -1,   387,    -1,
     389,   390,   391,   392,   393,    -1,   395,   396,   397,   398,
      -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,
     409,    -1,    -1,   412,   413,   414,   415,   416,    -1,   418,
     419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,   428,
      -1,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
      -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,    -1,    -1,
      -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,    -1,
      -1,   490,    -1,    -1,   493,   494,   495,    -1,    -1,    -1,
     499,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
      -1,   510,   511,   512,   513,    -1,   515,   516,    -1,    -1,
     519,   520,   521,   522,   523,    -1,    -1,   526,   527,    -1,
     529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,    -1,
     539,   540,    -1,    -1,    -1,   544,   545,   546,   547,    -1,
     549,   550,    -1,   552,   553,    -1,   555,   556,    -1,    -1,
     559,    -1,    -1,   562,    -1,   564,    -1,   566,   567,   568,
      -1,    -1,    -1,    -1,    -1,    -1,   575,    -1,    -1,   578,
      -1,    -1,    -1,   582,   583,   584,   585,    -1,    -1,    -1,
      -1,    -1,    -1,   592,   593,    -1,   595,   596,   597,    -1,
       5,   600,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    59,    -1,    61,    -1,    63,    64,
      65,    66,    67,    68,    69,    -1,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      -1,    86,    87,    88,    89,    90,    -1,    92,    -1,    -1,
      95,    -1,    -1,    98,    -1,    -1,    -1,   102,    -1,    -1,
      -1,   106,   107,   108,    -1,    -1,   111,    -1,    -1,    -1,
      -1,   116,   117,    -1,    -1,    -1,    -1,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,    -1,   140,   141,   142,    -1,    -1,
      -1,   146,    -1,   148,   149,    -1,   151,   152,   153,    -1,
      -1,   156,   157,    -1,   159,   160,   161,   162,   163,    -1,
      -1,   166,   167,   168,    -1,    -1,   171,   172,    -1,   174,
     175,   176,    -1,    -1,   179,    -1,    -1,    -1,   183,    -1,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,    -1,
     205,   206,    -1,    -1,    -1,   210,   211,   212,   213,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,   222,    -1,    -1,
      -1,    -1,   227,   228,    -1,    -1,    -1,   232,    -1,   234,
     235,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,
     245,   246,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,
      -1,    -1,    -1,    -1,   259,   260,    -1,   262,    -1,   264,
      -1,   266,   267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,    -1,   289,   290,   291,    -1,   293,   294,
     295,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,   304,
     305,   306,   307,   308,   309,    -1,    -1,   312,   313,    -1,
     315,    -1,   317,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,    -1,   330,   331,    -1,    -1,   334,
     335,   336,   337,    -1,    -1,    -1,   341,   342,    -1,    -1,
      -1,    -1,   347,   348,   349,    -1,   351,   352,   353,    -1,
     355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,    -1,    -1,   383,   384,
     385,    -1,   387,    -1,   389,   390,   391,   392,   393,    -1,
     395,   396,   397,   398,    -1,    -1,   401,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,    -1,   412,   413,   414,
     415,   416,    -1,   418,   419,    -1,   421,   422,   423,    -1,
      -1,   426,    -1,   428,    -1,   430,   431,    -1,   433,   434,
      -1,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,    -1,    -1,   461,    -1,    -1,    -1,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
      -1,   486,    -1,    -1,    -1,   490,    -1,    -1,   493,   494,
     495,    -1,    -1,    -1,   499,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,    -1,   510,   511,   512,   513,    -1,
     515,   516,    -1,    -1,   519,   520,   521,   522,   523,    -1,
      -1,   526,   527,    -1,   529,   530,   531,   532,   533,    -1,
      -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,   544,
     545,   546,   547,    -1,   549,   550,    -1,   552,   553,    -1,
     555,   556,    -1,    -1,   559,    -1,    -1,   562,    -1,   564,
      -1,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,    -1,
     575,    -1,    -1,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,    -1,
     595,   596,   597,    -1,     5,   600,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    59,    -1,
      61,    -1,    63,    64,    65,    66,    67,    68,    69,    -1,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    -1,    86,    87,    88,    89,    90,
      -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,    -1,
      -1,   102,    -1,    -1,    -1,   106,   107,   108,    -1,    -1,
     111,    -1,    -1,    -1,    -1,   116,   117,    -1,    -1,    -1,
      -1,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,    -1,    -1,    -1,   137,    -1,    -1,   140,
     141,   142,    -1,    -1,    -1,   146,    -1,   148,   149,    -1,
     151,   152,   153,    -1,    -1,   156,   157,    -1,   159,   160,
     161,   162,   163,    -1,    -1,   166,   167,   168,    -1,    -1,
     171,   172,    -1,   174,   175,   176,    -1,    -1,   179,    -1,
      -1,    -1,   183,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,    -1,   195,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,    -1,   205,   206,    -1,    -1,    -1,   210,
     211,   212,   213,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,   222,    -1,    -1,    -1,    -1,   227,   228,    -1,    -1,
      -1,   232,    -1,   234,   235,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,    -1,   245,   246,    -1,    -1,   249,    -1,
      -1,   252,   253,    -1,    -1,    -1,    -1,    -1,   259,   260,
      -1,   262,    -1,   264,    -1,   266,   267,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,    -1,   289,   290,
     291,    -1,   293,   294,   295,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,   304,   305,   306,   307,   308,   309,    -1,
      -1,   312,   313,    -1,   315,    -1,   317,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,    -1,   330,
     331,    -1,    -1,   334,   335,   336,   337,    -1,    -1,    -1,
     341,   342,    -1,    -1,    -1,    -1,   347,   348,   349,    -1,
     351,   352,   353,    -1,   355,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
      -1,    -1,   383,   384,   385,    -1,   387,    -1,   389,   390,
     391,   392,   393,    -1,   395,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,    -1,    -1,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,    -1,    -1,    -1,   499,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,    -1,   510,
     511,   512,   513,    -1,   515,   516,    -1,    -1,   519,   520,
     521,   522,   523,    -1,    -1,   526,   527,    -1,   529,   530,
     531,   532,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,
      -1,    -1,    -1,   544,   545,   546,   547,    -1,   549,   550,
      -1,   552,   553,    -1,   555,   556,    -1,    -1,   559,    -1,
      -1,   562,    -1,   564,    -1,   566,   567,   568,    -1,    -1,
      -1,    -1,    -1,    -1,   575,    -1,    -1,   578,    -1,    -1,
      -1,   582,   583,   584,   585,    -1,    -1,    -1,    -1,    -1,
      -1,   592,   593,    -1,   595,   596,   597,    -1,     5,   600,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    59,    -1,    61,    -1,    63,    64,    65,    66,
      67,    68,    69,    -1,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    -1,    86,
      87,    88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,
      -1,    98,    -1,    -1,    -1,   102,    -1,    -1,    -1,   106,
     107,   108,    -1,    -1,   111,    -1,    -1,    -1,    -1,   116,
     117,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,    -1,    -1,    -1,
     137,    -1,    -1,   140,   141,   142,    -1,    -1,    -1,   146,
      -1,   148,   149,    -1,   151,   152,   153,    -1,    -1,   156,
     157,    -1,   159,   160,   161,   162,   163,    -1,    -1,   166,
     167,   168,    -1,    -1,   171,   172,    -1,   174,   175,   176,
      -1,    -1,   179,    -1,    -1,    -1,   183,    -1,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,    -1,   195,    -1,
      -1,    -1,   199,   200,    -1,   202,    -1,    -1,   205,   206,
      -1,    -1,    -1,   210,   211,   212,   213,    -1,    -1,   216,
     217,   218,    -1,   220,    -1,   222,    -1,    -1,    -1,    -1,
     227,   228,    -1,    -1,    -1,   232,    -1,   234,   235,    -1,
     237,   238,    -1,    -1,    -1,   242,    -1,    -1,   245,   246,
      -1,    -1,   249,    -1,    -1,   252,   253,    -1,    -1,    -1,
      -1,    -1,   259,   260,    -1,   262,    -1,   264,    -1,   266,
     267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,    -1,   289,   290,   291,    -1,   293,   294,   295,   296,
      -1,   298,   299,    -1,    -1,    -1,    -1,   304,   305,   306,
     307,   308,   309,    -1,    -1,   312,   313,    -1,   315,    -1,
     317,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,    -1,   330,   331,    -1,    -1,   334,   335,   336,
     337,    -1,    -1,    -1,   341,   342,    -1,    -1,    -1,    -1,
     347,   348,   349,    -1,   351,   352,   353,    -1,   355,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,
     367,    -1,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,    -1,    -1,   383,   384,   385,    -1,
     387,    -1,   389,   390,   391,   392,   393,    -1,   395,   396,
     397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,   415,   416,
      -1,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,   428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
      -1,    -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,
      -1,    -1,    -1,   490,    -1,    -1,   493,   494,   495,    -1,
      -1,    -1,   499,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,    -1,   510,   511,   512,   513,    -1,   515,   516,
      -1,    -1,   519,   520,   521,   522,   523,    -1,    -1,   526,
     527,    -1,   529,   530,   531,   532,   533,    -1,    -1,    -1,
      -1,    -1,   539,   540,    -1,    -1,    -1,   544,   545,   546,
     547,    -1,   549,   550,    -1,   552,   553,    -1,   555,   556,
      -1,    -1,   559,    -1,    -1,   562,    -1,   564,    -1,   566,
     567,   568,    -1,    -1,    -1,    -1,    -1,    -1,   575,    -1,
      -1,   578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,
      -1,    -1,    -1,    -1,    -1,   592,   593,    -1,   595,   596,
     597,    -1,     5,   600,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    69,    -1,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,    -1,    -1,   102,
      -1,    -1,    -1,   106,   107,   108,    -1,    -1,   111,    -1,
      -1,    -1,    -1,   116,   117,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,    -1,   140,   141,   142,
      -1,    -1,    -1,   146,    -1,   148,   149,    -1,   151,   152,
     153,    -1,    -1,   156,   157,    -1,   159,   160,   161,   162,
     163,    -1,    -1,   166,   167,   168,    -1,    -1,   171,   172,
      -1,   174,   175,   176,    -1,    -1,   179,    -1,    -1,    -1,
     183,    -1,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,
      -1,    -1,   205,   206,    -1,    -1,    -1,   210,   211,   212,
     213,    -1,    -1,   216,   217,   218,    -1,   220,    -1,   222,
      -1,    -1,    -1,    -1,   227,   228,    -1,    -1,    -1,   232,
      -1,   234,   235,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,    -1,   245,   246,    -1,    -1,   249,    -1,    -1,   252,
     253,    -1,    -1,    -1,    -1,    -1,   259,   260,    -1,   262,
      -1,   264,    -1,   266,   267,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,    -1,   289,   290,   291,    -1,
     293,   294,   295,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,   304,   305,   306,   307,   308,   309,    -1,    -1,   312,
     313,    -1,   315,    -1,   317,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,    -1,   330,   331,    -1,
      -1,   334,   335,   336,   337,    -1,    -1,    -1,   341,   342,
      -1,    -1,    -1,    -1,   347,   348,   349,    -1,   351,   352,
     353,    -1,   355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,    -1,    -1,
     383,   384,   385,    -1,   387,    -1,   389,   390,   391,   392,
     393,    -1,   395,   396,   397,   398,    -1,    -1,   401,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,    -1,   421,   422,
     423,    -1,    -1,   426,    -1,   428,    -1,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,
      -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   484,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,    -1,    -1,    -1,   499,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,    -1,   510,   511,   512,
     513,    -1,   515,   516,    -1,    -1,   519,   520,   521,   522,
     523,    -1,    -1,   526,   527,    -1,   529,   530,   531,   532,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,
      -1,   544,   545,   546,   547,    -1,   549,   550,    -1,   552,
     553,    -1,   555,   556,    -1,    -1,   559,    -1,    -1,   562,
      -1,   564,    -1,   566,   567,   568,    -1,    -1,    -1,    -1,
      -1,    -1,   575,    -1,    -1,   578,    -1,    -1,    -1,   582,
     583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,
     593,    -1,   595,   596,   597,    -1,     5,   600,     7,     8,
       9,    10,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      59,    -1,    61,    -1,    63,    64,    65,    66,    67,    68,
      69,    -1,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    -1,    86,    87,    88,
      89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,
      -1,    -1,    -1,   102,    -1,    -1,    -1,   106,   107,   108,
      -1,    -1,   111,    -1,    -1,    -1,    -1,   116,   117,    -1,
      -1,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
      -1,   140,   141,   142,    -1,    -1,    -1,   146,    -1,   148,
     149,    -1,   151,   152,   153,    -1,    -1,   156,   157,    -1,
     159,   160,   161,   162,   163,    -1,    -1,   166,   167,   168,
      -1,    -1,   171,   172,    -1,   174,   175,   176,    -1,    -1,
     179,    -1,    -1,    -1,   183,    -1,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,    -1,   195,    -1,    -1,    -1,
     199,   200,    -1,   202,    -1,    -1,   205,   206,    -1,    -1,
      -1,   210,   211,   212,   213,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,   222,    -1,    -1,    -1,    -1,   227,   228,
      -1,    -1,    -1,   232,    -1,   234,   235,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,   245,   246,    -1,    -1,
     249,    -1,    -1,   252,   253,    -1,    -1,    -1,    -1,    -1,
     259,   260,    -1,   262,    -1,   264,    -1,   266,   267,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,    -1,
     289,   290,   291,    -1,   293,   294,   295,   296,    -1,   298,
     299,    -1,    -1,    -1,    -1,   304,   305,   306,   307,   308,
     309,    -1,    -1,   312,   313,    -1,   315,    -1,   317,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,    -1,   334,   335,   336,   337,    -1,
      -1,    -1,   341,   342,    -1,    -1,    -1,    -1,   347,   348,
     349,    -1,   351,   352,   353,    -1,   355,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,    -1,    -1,   383,   384,   385,    -1,   387,    -1,
     389,   390,   391,   392,   393,    -1,   395,   396,   397,   398,
      -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,
     409,    -1,    -1,   412,   413,   414,   415,   416,    -1,   418,
     419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,   428,
      -1,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
      -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,    -1,    -1,
      -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,    -1,
      -1,   490,    -1,    -1,   493,   494,   495,    -1,    -1,    -1,
     499,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
      -1,   510,   511,   512,   513,    -1,   515,   516,    -1,    -1,
     519,   520,   521,   522,   523,    -1,    -1,   526,   527,    -1,
     529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,    -1,
     539,   540,    -1,    -1,    -1,   544,   545,   546,   547,    -1,
     549,   550,    -1,   552,   553,    -1,   555,   556,    -1,    -1,
     559,    -1,    -1,   562,    -1,   564,    -1,   566,   567,   568,
      -1,    -1,    -1,    -1,    -1,    -1,   575,    -1,    -1,   578,
      -1,    -1,    -1,   582,   583,   584,   585,    -1,    -1,    -1,
      -1,    -1,    -1,   592,   593,    -1,   595,   596,   597,    -1,
       5,   600,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    59,    -1,    61,    -1,    63,    64,
      65,    66,    67,    68,    69,    -1,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      -1,    86,    87,    88,    89,    90,    -1,    92,    -1,    -1,
      95,    -1,    -1,    98,    -1,    -1,    -1,   102,    -1,    -1,
      -1,   106,   107,   108,    -1,    -1,   111,    -1,    -1,    -1,
      -1,   116,   117,    -1,    -1,    -1,    -1,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,    -1,   140,   141,   142,    -1,    -1,
      -1,   146,    -1,   148,   149,    -1,   151,   152,   153,    -1,
      -1,   156,   157,    -1,   159,   160,   161,   162,   163,    -1,
      -1,   166,   167,   168,    -1,    -1,   171,   172,    -1,   174,
     175,   176,    -1,    -1,   179,    -1,    -1,    -1,   183,    -1,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,    -1,
     205,   206,    -1,    -1,    -1,   210,   211,   212,   213,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,   222,    -1,    -1,
      -1,    -1,   227,   228,    -1,    -1,    -1,   232,    -1,   234,
     235,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,
     245,   246,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,
      -1,    -1,    -1,    -1,   259,   260,    -1,   262,    -1,   264,
      -1,   266,   267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,    -1,   289,   290,   291,    -1,   293,   294,
     295,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,   304,
     305,   306,   307,   308,   309,    -1,    -1,   312,   313,    -1,
     315,    -1,   317,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,    -1,   330,   331,    -1,    -1,   334,
     335,   336,   337,    -1,    -1,    -1,   341,   342,    -1,    -1,
      -1,    -1,   347,   348,   349,    -1,   351,   352,   353,    -1,
     355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,    -1,    -1,   383,   384,
     385,   386,   387,    -1,   389,   390,   391,   392,   393,    -1,
     395,   396,   397,   398,    -1,    -1,   401,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,    -1,   412,   413,   414,
     415,   416,    -1,   418,   419,    -1,   421,   422,   423,    -1,
      -1,   426,    -1,   428,    -1,   430,   431,    -1,   433,   434,
      -1,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,    -1,    -1,   461,    -1,    -1,    -1,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,
      -1,   486,    -1,    -1,    -1,   490,    -1,    -1,   493,   494,
     495,    -1,    -1,    -1,   499,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,    -1,   510,   511,   512,   513,    -1,
     515,   516,    -1,    -1,   519,   520,   521,   522,   523,    -1,
      -1,   526,   527,    -1,   529,   530,   531,   532,   533,    -1,
      -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,   544,
     545,   546,   547,    -1,   549,   550,    -1,   552,   553,    -1,
     555,   556,    -1,    -1,   559,    -1,    -1,   562,    -1,   564,
      -1,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,    -1,
     575,    -1,    -1,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,    -1,
     595,   596,   597,    -1,     5,   600,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    59,    -1,
      61,    -1,    63,    64,    65,    66,    67,    68,    69,    -1,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    -1,    86,    87,    88,    89,    90,
      -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,    -1,
      -1,   102,    -1,    -1,    -1,   106,   107,   108,    -1,    -1,
     111,    -1,    -1,    -1,    -1,   116,   117,    -1,    -1,    -1,
      -1,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,    -1,    -1,    -1,   137,    -1,    -1,   140,
     141,   142,    -1,    -1,    -1,   146,    -1,   148,   149,    -1,
     151,   152,   153,    -1,    -1,   156,   157,    -1,   159,   160,
     161,   162,   163,    -1,    -1,   166,   167,   168,    -1,    -1,
     171,   172,    -1,   174,   175,   176,    -1,    -1,   179,    -1,
      -1,    -1,   183,    -1,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,    -1,   195,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,    -1,   205,   206,    -1,    -1,    -1,   210,
     211,   212,   213,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,   222,    -1,    -1,    -1,    -1,   227,   228,    -1,    -1,
      -1,   232,    -1,   234,   235,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,    -1,   245,   246,    -1,    -1,   249,    -1,
      -1,   252,   253,    -1,    -1,    -1,    -1,    -1,   259,   260,
      -1,   262,    -1,   264,    -1,   266,   267,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,    -1,   289,   290,
     291,    -1,   293,   294,   295,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,   304,   305,   306,   307,   308,   309,    -1,
      -1,   312,   313,    -1,   315,    -1,   317,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,    -1,   330,
     331,    -1,    -1,   334,   335,   336,   337,    -1,    -1,    -1,
     341,   342,    -1,    -1,    -1,    -1,   347,   348,   349,    -1,
     351,   352,   353,    -1,   355,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
      -1,    -1,   383,   384,   385,    -1,   387,    -1,   389,   390,
     391,   392,   393,    -1,   395,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,    -1,    -1,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,    -1,    -1,    -1,   499,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,    -1,   510,
     511,   512,   513,    -1,   515,   516,    -1,    -1,   519,   520,
     521,   522,   523,    -1,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,
      -1,    -1,    -1,   544,   545,   546,   547,    -1,   549,   550,
      -1,   552,   553,    -1,   555,   556,    -1,    -1,   559,    -1,
      -1,   562,    -1,   564,    -1,   566,   567,   568,    -1,    -1,
      -1,    -1,    -1,    -1,   575,    -1,    -1,   578,    -1,    -1,
      -1,   582,   583,   584,   585,    -1,    -1,    -1,    -1,    -1,
      -1,   592,   593,    -1,   595,   596,   597,    -1,     5,   600,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    59,    -1,    61,    -1,    63,    64,    65,    66,
      67,    68,    69,    -1,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    -1,    86,
      87,    88,    89,    90,    -1,    92,    -1,    -1,    95,    -1,
      -1,    98,    -1,    -1,    -1,   102,    -1,    -1,    -1,   106,
     107,   108,    -1,    -1,   111,    -1,    -1,    -1,    -1,   116,
     117,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,    -1,    -1,    -1,
     137,    -1,    -1,   140,   141,   142,    -1,    -1,    -1,   146,
      -1,   148,   149,    -1,   151,   152,   153,    -1,    -1,   156,
     157,    -1,   159,   160,   161,   162,   163,    -1,    -1,   166,
     167,   168,    -1,    -1,   171,   172,    -1,   174,   175,   176,
      -1,    -1,   179,    -1,    -1,    -1,   183,    -1,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,    -1,   195,    -1,
      -1,    -1,   199,   200,    -1,   202,    -1,    -1,   205,   206,
      -1,    -1,    -1,   210,   211,   212,   213,    -1,    -1,   216,
     217,   218,    -1,   220,    -1,   222,    -1,    -1,    -1,    -1,
     227,   228,    -1,    -1,    -1,   232,    -1,   234,   235,    -1,
     237,   238,    -1,    -1,    -1,   242,    -1,    -1,   245,   246,
      -1,    -1,   249,    -1,    -1,   252,   253,    -1,    -1,    -1,
      -1,    -1,   259,   260,    -1,   262,    -1,   264,    -1,   266,
     267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,    -1,   289,   290,   291,    -1,   293,   294,   295,   296,
      -1,   298,   299,    -1,    -1,    -1,    -1,   304,   305,   306,
     307,   308,   309,    -1,    -1,   312,   313,    -1,   315,    -1,
     317,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,    -1,   330,   331,    -1,    -1,   334,   335,   336,
     337,    -1,    -1,    -1,   341,   342,    -1,    -1,    -1,    -1,
     347,   348,   349,    -1,   351,   352,   353,    -1,   355,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,
     367,    -1,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,    -1,    -1,   383,   384,   385,    -1,
     387,    -1,   389,   390,   391,   392,   393,    -1,   395,   396,
     397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,   415,   416,
      -1,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,   428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
      -1,    -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,
      -1,    -1,    -1,   490,    -1,    -1,   493,   494,   495,    -1,
      -1,    -1,   499,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,    -1,   510,   511,   512,   513,    -1,   515,   516,
      -1,    -1,   519,   520,   521,   522,   523,    -1,    -1,   526,
     527,    -1,   529,   530,   531,   532,   533,    -1,    -1,    -1,
      -1,    -1,   539,   540,    -1,    -1,    -1,   544,   545,   546,
     547,    -1,   549,   550,    -1,   552,   553,    -1,   555,   556,
      -1,    -1,   559,    -1,    -1,   562,    -1,   564,    -1,   566,
     567,   568,    -1,    -1,    -1,    -1,    -1,    -1,   575,    -1,
      -1,   578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,
      -1,    -1,    -1,    -1,    -1,   592,   593,    -1,   595,   596,
     597,    -1,     5,   600,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    59,    -1,    61,    -1,
      63,    64,    65,    66,    67,    68,    69,    -1,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,    -1,    -1,   102,
      -1,    -1,    -1,   106,   107,   108,    -1,    -1,   111,    -1,
      -1,    -1,    -1,   116,   117,    -1,    -1,    -1,    -1,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,    -1,   140,   141,   142,
      -1,    -1,    -1,   146,    -1,   148,   149,    -1,   151,   152,
     153,    -1,    -1,   156,   157,    -1,   159,   160,   161,   162,
     163,    -1,    -1,   166,   167,   168,    -1,    -1,   171,   172,
      -1,   174,   175,   176,    -1,    -1,   179,    -1,    -1,    -1,
     183,    -1,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,
      -1,    -1,   205,   206,    -1,    -1,    -1,   210,   211,   212,
     213,    -1,    -1,   216,   217,   218,    -1,   220,    -1,   222,
      -1,    -1,    -1,    -1,   227,   228,    -1,    -1,    -1,   232,
      -1,   234,   235,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,    -1,   245,   246,    -1,    -1,   249,    -1,    -1,   252,
     253,    -1,    -1,    -1,    -1,    -1,   259,   260,    -1,   262,
      -1,   264,    -1,   266,   267,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,    -1,   289,   290,   291,    -1,
     293,   294,   295,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,   304,   305,   306,   307,   308,   309,    -1,    -1,   312,
     313,    -1,   315,    -1,   317,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,    -1,   330,   331,    -1,
      -1,   334,   335,   336,   337,    -1,    -1,    -1,   341,   342,
      -1,    -1,    -1,    -1,   347,   348,   349,    -1,   351,   352,
     353,    -1,   355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,    -1,    -1,
     383,   384,   385,    -1,   387,    -1,   389,   390,   391,   392,
     393,    -1,   395,   396,   397,   398,    -1,    -1,   401,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,    -1,   421,   422,
     423,    -1,    -1,   426,    -1,   428,    -1,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,
      -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   484,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,    -1,    -1,    -1,   499,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,    -1,   510,   511,   512,
     513,    -1,   515,   516,    -1,    -1,   519,   520,   521,   522,
     523,    -1,    -1,   526,   527,    -1,   529,   530,   531,   532,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,
      -1,   544,   545,   546,   547,    -1,   549,   550,    -1,   552,
     553,    -1,   555,   556,    -1,    -1,   559,    -1,    -1,   562,
      -1,   564,    -1,   566,   567,   568,    -1,    -1,    -1,    -1,
      -1,    -1,   575,    -1,    -1,   578,    -1,    -1,    -1,   582,
     583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,
     593,    -1,   595,   596,   597,    -1,     5,   600,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      59,    -1,    61,    -1,    63,    64,    65,    66,    67,    68,
      69,    -1,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    -1,    86,    87,    88,
      89,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,
      -1,    -1,    -1,   102,    -1,    -1,    -1,   106,   107,   108,
      -1,    -1,   111,    -1,    -1,    -1,    -1,   116,   117,    -1,
      -1,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
      -1,   140,   141,   142,    -1,    -1,    -1,   146,    -1,   148,
     149,    -1,   151,   152,   153,    -1,    -1,   156,   157,    -1,
     159,   160,   161,   162,   163,    -1,    -1,   166,   167,   168,
      -1,    -1,   171,   172,    -1,   174,   175,   176,    -1,    -1,
     179,    -1,    -1,    -1,   183,    -1,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,    -1,   195,    -1,    -1,    -1,
     199,   200,    -1,   202,    -1,    -1,   205,   206,    -1,    -1,
      -1,   210,   211,   212,   213,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,   222,    -1,    -1,    -1,    -1,   227,   228,
      -1,    -1,    -1,   232,    -1,   234,   235,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,   245,   246,    -1,    -1,
     249,    -1,    -1,   252,   253,    -1,    -1,    -1,    -1,    -1,
     259,   260,    -1,   262,    -1,   264,    -1,   266,   267,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,    -1,
     289,   290,   291,    -1,   293,   294,   295,   296,    -1,   298,
     299,    -1,    -1,    -1,    -1,   304,   305,   306,   307,   308,
     309,    -1,    -1,   312,   313,    -1,   315,    -1,   317,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,    -1,   334,   335,   336,   337,    -1,
      -1,    -1,   341,   342,    -1,    -1,    -1,    -1,   347,   348,
     349,    -1,   351,   352,   353,    -1,   355,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,    -1,    -1,   383,   384,   385,    -1,   387,    -1,
     389,   390,   391,   392,   393,    -1,   395,   396,   397,   398,
      -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,
     409,    -1,    -1,   412,   413,   414,   415,   416,    -1,   418,
     419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,   428,
      -1,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
      -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,    -1,    -1,
      -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,    -1,
      -1,   490,    -1,    -1,   493,   494,   495,    -1,    -1,    -1,
     499,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
      -1,   510,   511,   512,   513,    -1,   515,   516,    -1,    -1,
     519,   520,   521,   522,   523,    -1,    -1,   526,   527,    -1,
     529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,    -1,
     539,   540,    -1,    -1,    -1,   544,   545,   546,   547,    -1,
     549,   550,    -1,   552,   553,    -1,   555,   556,    -1,    -1,
     559,    -1,    -1,   562,    -1,   564,    -1,   566,   567,   568,
      -1,    -1,    -1,    -1,    -1,    -1,   575,    -1,    -1,   578,
      -1,    -1,    -1,   582,   583,   584,   585,    -1,    -1,    -1,
      -1,    -1,    -1,   592,   593,    -1,   595,   596,   597,    -1,
       5,   600,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,
      55,    -1,    57,    58,    -1,    -1,    -1,    -1,    63,    64,
      65,    66,    67,    68,    69,    -1,    71,    72,    -1,    74,
      -1,    76,    -1,    78,    79,    80,    81,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    90,    -1,    92,    -1,    -1,
      95,    -1,    -1,    98,    -1,    -1,    -1,   102,    -1,    -1,
      -1,   106,   107,   108,    -1,    -1,   111,    -1,    -1,    -1,
      -1,   116,    -1,    -1,    -1,    -1,    -1,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,    -1,
      -1,    -1,    -1,    -1,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,    -1,   151,   152,   153,    -1,
      -1,   156,   157,    -1,   159,   160,   161,   162,    -1,    -1,
      -1,   166,   167,   168,    -1,    -1,   171,   172,   173,   174,
     175,   176,    -1,    -1,    -1,    -1,    -1,    -1,   183,    -1,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,    -1,
     195,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,
      -1,   206,    -1,    -1,    -1,   210,   211,   212,   213,   214,
      -1,   216,   217,   218,    -1,   220,    -1,   222,    -1,    -1,
      -1,    -1,   227,    -1,    -1,    -1,    -1,   232,    -1,   234,
     235,    -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,
      -1,   246,    -1,    -1,   249,   250,    -1,   252,   253,    -1,
      -1,    -1,    -1,    -1,   259,   260,    -1,   262,    -1,   264,
      -1,   266,   267,    -1,    -1,    -1,    -1,   272,    -1,    -1,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,    -1,   289,   290,   291,    -1,   293,   294,
     295,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,   304,
     305,   306,   307,   308,   309,    -1,    -1,   312,   313,    -1,
     315,    -1,   317,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,    -1,   330,   331,    -1,    -1,   334,
     335,   336,   337,    -1,    -1,    -1,    -1,   342,    -1,    -1,
      -1,    -1,   347,   348,   349,    -1,   351,   352,   353,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   366,   367,    -1,    -1,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,   379,    -1,    -1,    -1,    -1,   384,
     385,    -1,   387,    -1,   389,   390,   391,   392,   393,    -1,
     395,   396,   397,   398,    -1,    -1,   401,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,    -1,   412,   413,   414,
     415,   416,    -1,   418,    -1,    -1,   421,    -1,   423,   424,
      -1,   426,    -1,    -1,    -1,   430,    -1,    -1,   433,   434,
     435,    -1,    -1,    -1,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,   449,    -1,    -1,    -1,    -1,   454,
     455,   456,    -1,    -1,    -1,    -1,   461,    -1,    -1,    -1,
     465,    -1,    -1,   468,    -1,   470,    -1,   472,    -1,    -1,
     475,   476,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,
      -1,   486,    -1,    -1,    -1,   490,    -1,    -1,   493,    -1,
     495,    -1,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,    -1,   510,   511,   512,   513,    -1,
     515,   516,    -1,    -1,   519,   520,   521,   522,   523,    -1,
      -1,   526,   527,    -1,   529,   530,   531,   532,   533,    -1,
      -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,    -1,
     545,   546,   547,    -1,   549,   550,    -1,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,    -1,    -1,   562,    -1,    -1,
      -1,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,    -1,
     575,    -1,    -1,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,    -1,   588,    -1,    -1,    -1,   592,    -1,    -1,
     595,    -1,   597,    -1,     5,   600,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      51,    52,    -1,    54,    55,    -1,    57,    58,    -1,    -1,
      -1,    -1,    63,    64,    65,    66,    67,    68,    69,    -1,
      71,    72,    -1,    74,    -1,    76,    -1,    78,    79,    80,
      81,    -1,    83,    84,    -1,    86,    87,    88,    -1,    90,
      -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,    -1,
      -1,   102,    -1,    -1,    -1,   106,   107,   108,    -1,    -1,
     111,    -1,    -1,    -1,    -1,   116,    -1,    -1,    -1,    -1,
      -1,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,    -1,    -1,    -1,    -1,    -1,    -1,   140,
     141,   142,    -1,   144,    -1,   146,    -1,   148,   149,    -1,
     151,   152,   153,    -1,    -1,   156,   157,    -1,   159,   160,
     161,   162,    -1,    -1,    -1,   166,   167,   168,    -1,    -1,
     171,   172,   173,   174,   175,   176,    -1,    -1,    -1,    -1,
      -1,    -1,   183,    -1,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,    -1,   195,    -1,    -1,    -1,    -1,   200,
      -1,    -1,    -1,    -1,    -1,   206,    -1,    -1,    -1,   210,
     211,   212,   213,   214,    -1,   216,   217,   218,    -1,   220,
      -1,   222,    -1,    -1,    -1,    -1,   227,    -1,    -1,    -1,
      -1,   232,    -1,   234,   235,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,   246,    -1,    -1,   249,   250,
      -1,   252,   253,    -1,    -1,    -1,    -1,    -1,   259,   260,
      -1,   262,    -1,   264,    -1,   266,   267,    -1,    -1,    -1,
      -1,   272,    -1,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,    -1,   289,   290,
     291,    -1,   293,   294,   295,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,   304,   305,   306,   307,   308,   309,    -1,
      -1,   312,   313,    -1,   315,    -1,   317,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,    -1,   330,
     331,    -1,    -1,   334,   335,   336,   337,    -1,    -1,    -1,
      -1,   342,    -1,    -1,    -1,    -1,   347,   348,   349,    -1,
     351,   352,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,    -1,    -1,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,   379,    -1,
      -1,    -1,    -1,   384,   385,    -1,   387,    -1,   389,   390,
     391,   392,   393,    -1,   395,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,    -1,    -1,
     421,    -1,   423,   424,    -1,   426,    -1,    -1,    -1,   430,
      -1,    -1,   433,   434,   435,    -1,    -1,    -1,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,   449,    -1,
      -1,    -1,    -1,   454,   455,   456,    -1,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,    -1,   468,    -1,   470,
      -1,   472,    -1,    -1,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,    -1,   490,
      -1,    -1,   493,    -1,   495,    -1,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,    -1,   510,
     511,   512,   513,    -1,   515,   516,    -1,    -1,   519,   520,
     521,   522,   523,    -1,    -1,   526,   527,    -1,   529,   530,
     531,   532,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,
      -1,    -1,    -1,    -1,   545,   546,   547,    -1,   549,   550,
      -1,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,    -1,
      -1,   562,    -1,    -1,    -1,   566,   567,   568,    -1,    -1,
      -1,    -1,    -1,    -1,   575,    -1,    -1,   578,    -1,    -1,
      -1,   582,   583,   584,   585,   586,    -1,   588,    -1,    -1,
      -1,   592,    -1,    -1,   595,    -1,   597,    -1,     5,   600,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,    -1,
      57,    58,    -1,    -1,    -1,    -1,    63,    64,    65,    66,
      67,    68,    69,    -1,    71,    72,    -1,    74,    -1,    76,
      -1,    78,    79,    80,    81,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    90,    -1,    92,    -1,    -1,    95,    -1,
      -1,    98,    -1,    -1,    -1,   102,    -1,    -1,    -1,   106,
     107,   108,    -1,    -1,   111,    -1,    -1,    -1,    -1,   116,
      -1,    -1,    -1,    -1,    -1,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,    -1,    -1,    -1,
      -1,    -1,    -1,   140,   141,   142,    -1,   144,    -1,   146,
      -1,   148,   149,    -1,   151,   152,   153,    -1,    -1,   156,
     157,    -1,   159,   160,   161,   162,    -1,    -1,    -1,   166,
     167,   168,    -1,    -1,   171,   172,   173,   174,   175,   176,
      -1,    -1,    -1,    -1,    -1,    -1,   183,    -1,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,    -1,   195,    -1,
      -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,    -1,   206,
      -1,    -1,    -1,   210,   211,   212,   213,   214,    -1,   216,
     217,   218,    -1,   220,    -1,   222,    -1,    -1,    -1,    -1,
     227,    -1,    -1,    -1,    -1,   232,    -1,   234,   235,    -1,
     237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,   246,
      -1,    -1,   249,   250,    -1,   252,   253,    -1,    -1,    -1,
      -1,    -1,   259,   260,    -1,   262,    -1,   264,    -1,   266,
     267,    -1,    -1,    -1,    -1,   272,    -1,    -1,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,    -1,   289,   290,   291,    -1,   293,   294,   295,   296,
      -1,   298,   299,    -1,    -1,    -1,    -1,   304,   305,   306,
     307,   308,   309,    -1,    -1,   312,   313,    -1,   315,    -1,
     317,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,    -1,   330,   331,    -1,    -1,   334,   335,   336,
     337,    -1,    -1,    -1,    -1,   342,    -1,    -1,    -1,    -1,
     347,   348,   349,    -1,   351,   352,   353,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   366,
     367,    -1,    -1,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,    -1,    -1,    -1,    -1,   384,   385,    -1,
     387,    -1,   389,   390,   391,   392,   393,    -1,   395,   396,
     397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,   415,   416,
      -1,   418,    -1,    -1,   421,    -1,   423,   424,    -1,   426,
      -1,    -1,    -1,   430,    -1,    -1,   433,   434,   435,    -1,
      -1,    -1,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,   449,    -1,    -1,    -1,    -1,   454,   455,   456,
      -1,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,
      -1,   468,    -1,   470,    -1,   472,    -1,    -1,   475,   476,
      -1,    -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,
      -1,    -1,    -1,   490,    -1,    -1,   493,    -1,   495,    -1,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,    -1,   510,   511,   512,   513,    -1,   515,   516,
      -1,    -1,   519,   520,   521,   522,   523,    -1,    -1,   526,
     527,    -1,   529,   530,   531,   532,   533,    -1,    -1,    -1,
      -1,    -1,   539,   540,    -1,    -1,    -1,    -1,   545,   546,
     547,    -1,   549,   550,    -1,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,    -1,    -1,   562,    -1,    -1,    -1,   566,
     567,   568,    -1,    -1,    -1,    -1,    -1,    -1,   575,    -1,
      -1,   578,    -1,    -1,    -1,   582,   583,   584,   585,   586,
      -1,   588,    -1,    -1,    -1,   592,    -1,    -1,   595,    -1,
     597,    -1,     5,   600,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,
      -1,    54,    55,    -1,    57,    58,    -1,    -1,    -1,    -1,
      63,    64,    65,    66,    67,    68,    69,    -1,    71,    72,
      -1,    74,    -1,    76,    -1,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,    -1,    -1,   102,
      -1,    -1,    -1,   106,   107,   108,    -1,    -1,   111,    -1,
      -1,    -1,    -1,   116,    -1,    -1,    -1,    -1,    -1,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,    -1,    -1,    -1,    -1,    -1,    -1,   140,   141,   142,
      -1,    -1,    -1,   146,    -1,   148,   149,    -1,   151,   152,
     153,    -1,    -1,   156,   157,    -1,   159,   160,   161,   162,
      -1,    -1,    -1,   166,   167,   168,    -1,    -1,   171,   172,
     173,   174,   175,   176,    -1,    -1,    -1,    -1,    -1,    -1,
     183,    -1,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,    -1,   195,    -1,    -1,    -1,    -1,   200,    -1,    -1,
      -1,    -1,    -1,   206,    -1,    -1,    -1,   210,   211,   212,
     213,   214,    -1,   216,   217,   218,    -1,   220,    -1,   222,
      -1,    -1,    -1,    -1,   227,    -1,    -1,    -1,    -1,   232,
      -1,   234,   235,    -1,   237,   238,   239,    -1,    -1,   242,
      -1,    -1,    -1,   246,    -1,    -1,   249,   250,    -1,   252,
     253,    -1,    -1,    -1,    -1,    -1,   259,   260,    -1,   262,
      -1,   264,    -1,   266,   267,    -1,    -1,    -1,    -1,   272,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,    -1,   289,   290,   291,    -1,
     293,   294,   295,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,   304,   305,   306,   307,   308,   309,    -1,    -1,   312,
     313,    -1,   315,    -1,   317,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,    -1,   330,   331,    -1,
      -1,   334,   335,   336,   337,    -1,    -1,    -1,    -1,   342,
      -1,    -1,    -1,    -1,   347,   348,   349,    -1,   351,   352,
     353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   366,   367,    -1,    -1,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,   379,    -1,    -1,    -1,
      -1,   384,   385,    -1,   387,    -1,   389,   390,   391,   392,
     393,    -1,   395,   396,   397,   398,    -1,    -1,   401,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,   415,   416,    -1,   418,    -1,    -1,   421,    -1,
     423,   424,    -1,   426,    -1,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,    -1,    -1,    -1,   439,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,   449,    -1,    -1,    -1,
      -1,   454,   455,   456,    -1,    -1,    -1,    -1,   461,    -1,
      -1,    -1,   465,    -1,    -1,   468,    -1,   470,    -1,   472,
      -1,    -1,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   484,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,
     493,    -1,   495,    -1,    -1,    -1,    -1,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,    -1,   510,   511,   512,
     513,    -1,   515,   516,    -1,    -1,   519,   520,   521,   522,
     523,    -1,    -1,   526,   527,    -1,   529,   530,   531,   532,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,
      -1,    -1,   545,   546,   547,    -1,   549,   550,    -1,   552,
     553,    -1,    -1,    -1,    -1,    -1,   559,    -1,    -1,   562,
      -1,    -1,    -1,   566,   567,   568,    -1,    -1,    -1,    -1,
      -1,    -1,   575,    -1,    -1,   578,    -1,    -1,    -1,   582,
     583,   584,   585,    -1,    -1,   588,    -1,    -1,    -1,   592,
      -1,    -1,   595,    -1,   597,    -1,     5,   600,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    -1,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    51,    52,    -1,    54,    55,    -1,    57,    58,
      -1,    -1,    -1,    -1,    63,    64,    65,    66,    67,    68,
      69,    -1,    71,    72,    -1,    74,    -1,    76,    -1,    78,
      79,    80,    81,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,
      -1,    -1,    -1,   102,    -1,    -1,    -1,   106,   107,   108,
      -1,    -1,   111,    -1,    -1,    -1,    -1,   116,    -1,    -1,
      -1,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,    -1,    -1,    -1,    -1,    -1,
      -1,   140,   141,   142,    -1,    -1,    -1,   146,    -1,   148,
     149,    -1,   151,   152,   153,    -1,    -1,   156,   157,    -1,
     159,   160,   161,   162,    -1,    -1,    -1,   166,   167,   168,
      -1,    -1,   171,   172,   173,   174,   175,   176,    -1,    -1,
      -1,    -1,    -1,    -1,   183,    -1,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,    -1,   195,    -1,    -1,    -1,
      -1,   200,    -1,    -1,    -1,    -1,    -1,   206,    -1,    -1,
      -1,   210,   211,   212,   213,   214,    -1,   216,   217,   218,
      -1,   220,    -1,   222,    -1,    -1,    -1,    -1,   227,    -1,
      -1,    -1,    -1,   232,    -1,   234,   235,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,   246,    -1,    -1,
     249,   250,    -1,   252,   253,    -1,    -1,    -1,    -1,    -1,
     259,   260,    -1,   262,    -1,   264,    -1,   266,   267,    -1,
      -1,    -1,    -1,   272,    -1,    -1,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,    -1,
     289,   290,   291,    -1,   293,   294,   295,   296,    -1,   298,
     299,    -1,    -1,    -1,    -1,   304,   305,   306,   307,   308,
     309,    -1,    -1,   312,   313,    -1,   315,    -1,   317,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,    -1,   334,   335,   336,   337,    -1,
      -1,    -1,    -1,   342,    -1,    -1,    -1,    -1,   347,   348,
     349,    -1,   351,   352,   353,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   366,   367,    -1,
      -1,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
     379,    -1,    -1,    -1,    -1,   384,   385,    -1,   387,    -1,
     389,   390,   391,   392,   393,    -1,   395,   396,   397,   398,
      -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,
     409,    -1,    -1,   412,   413,   414,   415,   416,    -1,   418,
      -1,    -1,   421,    -1,   423,   424,    -1,   426,    -1,    -1,
      -1,   430,    -1,    -1,   433,   434,   435,    -1,    -1,    -1,
     439,   440,   441,   442,   443,   444,    -1,   446,   447,    -1,
     449,    -1,    -1,    -1,    -1,   454,   455,   456,    -1,    -1,
      -1,    -1,   461,    -1,    -1,    -1,   465,    -1,    -1,   468,
      -1,   470,    -1,   472,    -1,    -1,   475,   476,    -1,    -1,
      -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,    -1,
      -1,   490,    -1,    -1,   493,    -1,   495,    -1,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
      -1,   510,   511,   512,   513,    -1,   515,   516,    -1,    -1,
     519,   520,   521,   522,   523,    -1,    -1,   526,   527,    -1,
     529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,    -1,
     539,   540,    -1,    -1,    -1,    -1,   545,   546,   547,    -1,
     549,   550,    -1,   552,   553,    -1,    -1,    -1,    -1,    -1,
     559,    -1,    -1,   562,    -1,    -1,    -1,   566,   567,   568,
      -1,    -1,    -1,    -1,    -1,    -1,   575,    -1,    -1,   578,
      -1,    -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,
      -1,    -1,    -1,   592,    -1,    -1,   595,    -1,   597,    -1,
       5,   600,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,
      55,    -1,    57,    58,    -1,    -1,    -1,    -1,    63,    64,
      65,    66,    67,    68,    69,    -1,    71,    72,    -1,    74,
      -1,    76,    -1,    78,    79,    80,    81,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    90,    -1,    92,    -1,    -1,
      95,    -1,    -1,    98,    -1,    -1,    -1,   102,    -1,    -1,
      -1,   106,   107,   108,    -1,    -1,   111,    -1,    -1,    -1,
      -1,   116,    -1,    -1,    -1,    -1,    -1,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,    -1,
      -1,    -1,    -1,    -1,    -1,   140,   141,   142,    -1,    -1,
      -1,   146,    -1,   148,   149,    -1,   151,   152,   153,    -1,
      -1,   156,   157,    -1,   159,   160,   161,   162,    -1,    -1,
      -1,   166,   167,   168,    -1,    -1,   171,   172,   173,   174,
     175,   176,    -1,    -1,    -1,    -1,    -1,    -1,   183,    -1,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,    -1,
     195,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,
      -1,   206,    -1,    -1,    -1,   210,   211,   212,   213,   214,
      -1,   216,   217,   218,    -1,   220,    -1,   222,    -1,    -1,
      -1,    -1,   227,    -1,    -1,    -1,    -1,   232,    -1,   234,
     235,    -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,
      -1,   246,    -1,    -1,   249,   250,    -1,   252,   253,    -1,
      -1,    -1,    -1,    -1,   259,   260,    -1,   262,    -1,   264,
      -1,   266,   267,    -1,    -1,    -1,    -1,   272,    -1,    -1,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,    -1,   289,   290,   291,    -1,   293,   294,
     295,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,   304,
     305,   306,   307,   308,   309,    -1,    -1,   312,   313,    -1,
     315,    -1,   317,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,    -1,   330,   331,    -1,    -1,   334,
     335,   336,   337,    -1,    -1,    -1,    -1,   342,    -1,    -1,
      -1,    -1,   347,   348,   349,    -1,   351,   352,   353,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   366,   367,    -1,    -1,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,   379,    -1,    -1,    -1,    -1,   384,
     385,    -1,   387,    -1,   389,   390,   391,   392,   393,    -1,
     395,   396,   397,   398,    -1,    -1,   401,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,    -1,   412,   413,   414,
     415,   416,    -1,   418,    -1,    -1,   421,    -1,   423,   424,
      -1,   426,    -1,    -1,    -1,   430,    -1,    -1,   433,   434,
     435,    -1,    -1,    -1,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,   449,    -1,    -1,    -1,    -1,   454,
     455,   456,    -1,    -1,    -1,    -1,   461,    -1,    -1,    -1,
     465,    -1,    -1,   468,    -1,   470,    -1,   472,    -1,    -1,
     475,   476,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,
      -1,   486,    -1,    -1,    -1,   490,    -1,    -1,   493,    -1,
     495,    -1,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,    -1,   510,   511,   512,   513,    -1,
     515,   516,    -1,    -1,   519,   520,   521,   522,   523,    -1,
      -1,   526,   527,    -1,   529,   530,   531,   532,   533,    -1,
      -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,    -1,
     545,   546,   547,    -1,   549,   550,    -1,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,    -1,    -1,   562,    -1,    -1,
      -1,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,    -1,
     575,    -1,    -1,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,    -1,   588,    -1,    -1,    -1,   592,    -1,    -1,
     595,    -1,   597,    -1,     5,   600,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      51,    52,    -1,    54,    55,    -1,    57,    58,    -1,    -1,
      -1,    -1,    63,    64,    65,    66,    67,    68,    69,    -1,
      71,    72,    -1,    74,    -1,    76,    -1,    78,    79,    80,
      81,    -1,    83,    84,    -1,    86,    87,    88,    -1,    90,
      -1,    92,    -1,    -1,    95,    -1,    -1,    98,    -1,    -1,
      -1,   102,    -1,    -1,    -1,   106,   107,   108,    -1,    -1,
     111,    -1,    -1,    -1,    -1,   116,    -1,    -1,    -1,    -1,
      -1,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,    -1,    -1,    -1,    -1,    -1,    -1,   140,
     141,   142,    -1,    -1,    -1,   146,    -1,   148,   149,    -1,
     151,   152,   153,    -1,    -1,   156,   157,    -1,   159,   160,
     161,   162,    -1,    -1,    -1,   166,   167,   168,    -1,    -1,
     171,   172,   173,   174,   175,   176,    -1,    -1,    -1,    -1,
      -1,    -1,   183,    -1,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,    -1,   195,    -1,    -1,    -1,    -1,   200,
      -1,    -1,    -1,    -1,    -1,   206,    -1,    -1,    -1,   210,
     211,   212,   213,   214,    -1,   216,   217,   218,    -1,   220,
      -1,   222,    -1,    -1,    -1,    -1,   227,    -1,    -1,    -1,
      -1,   232,    -1,   234,   235,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,   246,    -1,    -1,   249,   250,
      -1,   252,   253,    -1,    -1,    -1,    -1,    -1,   259,   260,
      -1,   262,    -1,   264,    -1,   266,   267,    -1,    -1,    -1,
      -1,   272,    -1,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,    -1,   289,   290,
     291,    -1,   293,   294,   295,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,   304,   305,   306,   307,   308,   309,    -1,
      -1,   312,   313,    -1,   315,    -1,   317,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,    -1,   330,
     331,    -1,    -1,   334,   335,   336,   337,    -1,    -1,    -1,
      -1,   342,    -1,    -1,    -1,    -1,   347,   348,   349,    -1,
     351,   352,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,    -1,    -1,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,   379,    -1,
      -1,    -1,    -1,   384,   385,    -1,   387,    -1,   389,   390,
     391,   392,   393,    -1,   395,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,    -1,    -1,
     421,    -1,   423,   424,    -1,   426,    -1,    -1,    -1,   430,
      -1,    -1,   433,   434,   435,    -1,    -1,    -1,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,   449,    -1,
      -1,    -1,    -1,   454,   455,   456,    -1,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,    -1,   468,    -1,   470,
      -1,   472,    -1,    -1,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,    -1,   490,
      -1,    -1,   493,    -1,   495,    -1,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,    -1,   510,
     511,   512,   513,    -1,   515,   516,    -1,    -1,   519,   520,
     521,   522,   523,    -1,    -1,   526,   527,    -1,   529,   530,
     531,   532,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,
      -1,    -1,    -1,    -1,   545,   546,   547,    -1,   549,   550,
      -1,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,    -1,
      -1,   562,    -1,    -1,    -1,   566,   567,   568,    -1,    -1,
      -1,    -1,    -1,    -1,   575,    -1,    -1,   578,    -1,    -1,
      -1,   582,   583,   584,   585,    -1,    -1,   588,    -1,    -1,
      -1,   592,    -1,    -1,   595,    -1,   597,    -1,     5,   600,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,    -1,
      57,    58,    -1,    -1,    -1,    -1,    63,    64,    65,    66,
      67,    68,    69,    -1,    71,    72,    -1,    74,    -1,    76,
      -1,    78,    79,    80,    81,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    90,    -1,    92,    -1,    -1,    95,    -1,
      -1,    98,    -1,    -1,    -1,   102,    -1,    -1,    -1,   106,
     107,   108,    -1,    -1,   111,    -1,    -1,    -1,    -1,   116,
      -1,    -1,    -1,    -1,    -1,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,    -1,    -1,    -1,
      -1,    -1,    -1,   140,   141,   142,    -1,    -1,    -1,   146,
      -1,   148,   149,    -1,   151,   152,   153,    -1,    -1,   156,
     157,    -1,   159,   160,   161,   162,    -1,    -1,    -1,   166,
     167,   168,    -1,    -1,   171,   172,   173,   174,   175,   176,
      -1,    -1,    -1,    -1,    -1,    -1,   183,    -1,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,    -1,   195,    -1,
      -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,    -1,   206,
      -1,    -1,    -1,   210,   211,   212,   213,   214,    -1,   216,
     217,   218,    -1,   220,    -1,   222,    -1,    -1,    -1,    -1,
     227,    -1,    -1,    -1,    -1,   232,    -1,   234,   235,    -1,
     237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,   246,
      -1,    -1,   249,   250,    -1,   252,   253,    -1,    -1,    -1,
      -1,    -1,   259,   260,    -1,   262,    -1,   264,    -1,   266,
     267,    -1,    -1,    -1,    -1,   272,    -1,    -1,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,    -1,   289,   290,   291,    -1,   293,   294,   295,   296,
      -1,   298,   299,    -1,    -1,    -1,    -1,   304,   305,   306,
     307,   308,   309,    -1,    -1,   312,   313,    -1,   315,    -1,
     317,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,    -1,   330,   331,    -1,    -1,   334,   335,   336,
     337,    -1,    -1,    -1,    -1,   342,    -1,    -1,    -1,    -1,
     347,   348,   349,    -1,   351,   352,   353,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   366,
     367,    -1,    -1,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,    -1,    -1,    -1,    -1,   384,   385,    -1,
     387,    -1,   389,   390,   391,   392,   393,    -1,   395,   396,
     397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,   415,   416,
      -1,   418,    -1,    -1,   421,    -1,   423,   424,    -1,   426,
      -1,    -1,    -1,   430,    -1,    -1,   433,   434,   435,    -1,
      -1,    -1,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,   449,    -1,    -1,    -1,    -1,   454,   455,   456,
      -1,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,
      -1,   468,    -1,   470,    -1,   472,    -1,    -1,   475,   476,
      -1,    -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,
      -1,    -1,    -1,   490,    -1,    -1,   493,    -1,   495,    -1,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,    -1,   510,   511,   512,   513,    -1,   515,   516,
      -1,    -1,   519,   520,   521,   522,   523,    -1,    -1,   526,
     527,    -1,   529,   530,   531,   532,   533,    -1,    -1,    -1,
      -1,    -1,   539,   540,    -1,    -1,    -1,    -1,   545,   546,
     547,    -1,   549,   550,    -1,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,    -1,    -1,   562,    -1,    -1,    -1,   566,
     567,   568,    -1,    -1,    -1,    -1,    -1,    -1,   575,    -1,
      -1,   578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,
      -1,   588,    -1,    -1,    -1,   592,    -1,    -1,   595,    -1,
     597,    -1,     5,   600,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,
      -1,    54,    55,    -1,    57,    58,    -1,    -1,    -1,    -1,
      63,    64,    65,    66,    67,    68,    69,    -1,    71,    72,
      -1,    74,    -1,    76,    -1,    78,    79,    80,    81,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    90,    -1,    92,
      -1,    -1,    95,    -1,    -1,    98,    -1,    -1,    -1,   102,
      -1,    -1,    -1,   106,   107,   108,    -1,    -1,   111,    -1,
      -1,    -1,    -1,   116,    -1,    -1,    -1,    -1,    -1,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,    -1,    -1,    -1,    -1,    -1,    -1,   140,   141,   142,
      -1,    -1,    -1,   146,    -1,    -1,   149,    -1,   151,   152,
     153,    -1,    -1,   156,   157,    -1,   159,   160,   161,   162,
      -1,    -1,    -1,   166,   167,   168,    -1,    -1,   171,   172,
     173,   174,   175,   176,    -1,    -1,    -1,    -1,    -1,    -1,
     183,    -1,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,    -1,   195,    -1,    -1,    -1,    -1,   200,    -1,    -1,
      -1,    -1,    -1,   206,    -1,    -1,    -1,   210,   211,   212,
     213,   214,    -1,   216,   217,   218,    -1,   220,    -1,   222,
      -1,    -1,    -1,    -1,   227,    -1,    -1,    -1,    -1,   232,
      -1,   234,   235,    -1,   237,   238,   239,    -1,    -1,   242,
      -1,    -1,    -1,   246,    -1,    -1,   249,   250,    -1,   252,
     253,    -1,    -1,    -1,    -1,    -1,   259,   260,    -1,   262,
      -1,   264,    -1,   266,   267,    -1,    -1,    -1,    -1,   272,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,    -1,   289,   290,   291,    -1,
     293,   294,   295,   296,    -1,   298,   299,    -1,    -1,    -1,
      -1,   304,   305,   306,   307,   308,   309,    -1,    -1,   312,
     313,    -1,   315,    -1,   317,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,    -1,   330,   331,    -1,
      -1,   334,   335,   336,   337,    -1,    -1,    -1,    -1,   342,
      -1,    -1,    -1,    -1,   347,   348,   349,    -1,   351,   352,
     353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   366,   367,    -1,    -1,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,   379,    -1,    -1,    -1,
      -1,   384,   385,    -1,   387,    -1,   389,   390,   391,   392,
     393,    -1,   395,   396,   397,   398,    -1,    -1,   401,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,   415,   416,    -1,   418,    -1,    -1,   421,    -1,
     423,   424,    -1,   426,    -1,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,    -1,    -1,    -1,   439,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,   449,    -1,    -1,    -1,
      -1,   454,   455,   456,    -1,    -1,    -1,    -1,   461,    -1,
      -1,    -1,   465,    -1,    -1,   468,    -1,   470,    -1,   472,
      -1,    -1,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   484,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,
     493,    -1,   495,    -1,    -1,    -1,    -1,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,    -1,   510,   511,   512,
     513,    -1,   515,   516,    -1,    -1,   519,   520,   521,   522,
     523,    -1,    -1,   526,   527,    -1,   529,   530,   531,   532,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,
      -1,    -1,   545,   546,   547,    -1,   549,   550,    -1,   552,
     553,    -1,    -1,    -1,    -1,    -1,   559,    -1,    -1,   562,
      -1,    -1,    -1,   566,   567,   568,    -1,    -1,    -1,    -1,
      -1,    -1,   575,    -1,    -1,   578,    -1,    -1,    -1,   582,
     583,   584,   585,    -1,    -1,   588,    -1,    -1,    -1,   592,
      -1,    -1,   595,    -1,   597,    -1,     5,   600,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    -1,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    51,    52,    -1,    54,    55,    -1,    57,    58,
      -1,    -1,    -1,    -1,    63,    64,    65,    66,    67,    68,
      69,    -1,    71,    72,    -1,    74,    -1,    76,    -1,    78,
      79,    80,    81,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,    98,
      -1,    -1,    -1,   102,    -1,    -1,    -1,   106,   107,   108,
      -1,    -1,   111,    -1,    -1,    -1,    -1,   116,    -1,    -1,
      -1,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,    -1,    -1,    -1,    -1,    -1,
      -1,   140,   141,   142,    -1,    -1,    -1,   146,    -1,    -1,
     149,    -1,   151,   152,   153,    -1,    -1,   156,   157,    -1,
     159,   160,   161,   162,    -1,    -1,    -1,   166,   167,   168,
      -1,    -1,   171,   172,   173,   174,   175,   176,    -1,    -1,
      -1,    -1,    -1,    -1,   183,    -1,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,    -1,   195,    -1,    -1,    -1,
      -1,   200,    -1,    -1,    -1,    -1,    -1,   206,    -1,    -1,
      -1,   210,   211,   212,   213,   214,    -1,   216,   217,   218,
      -1,   220,    -1,   222,    -1,    -1,    -1,    -1,   227,    -1,
      -1,    -1,    -1,   232,    -1,   234,   235,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,   246,    -1,    -1,
     249,   250,    -1,   252,   253,    -1,    -1,    -1,    -1,    -1,
     259,   260,    -1,   262,    -1,   264,    -1,   266,   267,    -1,
      -1,    -1,    -1,   272,    -1,    -1,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,    -1,
     289,   290,   291,    -1,   293,   294,   295,   296,    -1,   298,
     299,    -1,    -1,    -1,    -1,   304,   305,   306,   307,   308,
     309,    -1,    -1,   312,   313,    -1,   315,    -1,   317,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,    -1,   334,   335,   336,   337,    -1,
      -1,    -1,    -1,   342,    -1,    -1,    -1,    -1,   347,   348,
     349,    -1,   351,   352,   353,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   366,   367,    -1,
      -1,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
     379,    -1,    -1,    -1,    -1,   384,   385,    -1,   387,    -1,
     389,   390,   391,   392,   393,    -1,   395,   396,   397,   398,
      -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,
     409,    -1,    -1,   412,   413,   414,   415,   416,    -1,   418,
      -1,    -1,   421,    -1,   423,   424,    -1,   426,    -1,    -1,
      -1,   430,    -1,    -1,   433,   434,   435,    -1,    -1,    -1,
     439,   440,   441,   442,   443,   444,    -1,   446,   447,    -1,
     449,    -1,    -1,    -1,    -1,   454,   455,   456,    -1,    -1,
      -1,    -1,   461,    -1,    -1,    -1,   465,    -1,    -1,   468,
      -1,   470,    -1,   472,    -1,    -1,   475,   476,    -1,    -1,
      -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,    -1,
      -1,   490,    -1,    -1,   493,    -1,   495,    -1,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
      -1,   510,   511,   512,   513,    -1,   515,   516,    -1,    -1,
     519,   520,   521,   522,   523,    -1,    -1,   526,   527,    -1,
     529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,    -1,
     539,   540,    -1,    -1,    -1,    -1,   545,   546,   547,    -1,
     549,   550,    -1,   552,   553,    -1,    -1,    -1,    -1,    -1,
     559,    -1,    -1,   562,    -1,    -1,    -1,   566,   567,   568,
      -1,    -1,    -1,    -1,    -1,    -1,   575,    -1,    -1,   578,
      -1,    -1,    -1,   582,   583,   584,   585,    -1,    -1,   588,
      -1,    -1,    -1,   592,    -1,    -1,   595,    -1,   597,    -1,
       5,   600,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    -1,    -1,    -1,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    -1,    -1,    -1,    63,    64,
      65,    66,    -1,    68,    69,    -1,    71,    72,    -1,    74,
      -1,    76,    -1,    78,    79,    80,    81,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    90,    -1,    92,    -1,    -1,
      95,    -1,    -1,    98,    -1,    -1,    -1,   102,    -1,    -1,
      -1,   106,   107,   108,    -1,    -1,   111,    -1,    -1,    -1,
      -1,   116,    -1,    -1,    -1,    -1,    -1,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,    -1,
      -1,    -1,    -1,    -1,    -1,   140,   141,   142,    -1,    -1,
      -1,   146,    -1,    -1,   149,    -1,   151,   152,   153,    -1,
      -1,   156,   157,    -1,   159,   160,   161,   162,    -1,    -1,
      -1,   166,   167,   168,    -1,    -1,   171,   172,    -1,   174,
     175,   176,    -1,    -1,    -1,    -1,    -1,    -1,   183,    -1,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,    -1,
     195,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,
      -1,   206,    -1,    -1,    -1,   210,   211,   212,   213,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,   222,    -1,    -1,
      -1,    -1,   227,    -1,    -1,    -1,    -1,   232,    -1,   234,
     235,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,
      -1,   246,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,
      -1,    -1,    -1,    -1,   259,   260,    -1,   262,    -1,   264,
      -1,   266,   267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,    -1,   289,   290,   291,    -1,   293,   294,
     295,   296,    -1,   298,   299,    -1,    -1,    -1,    -1,   304,
     305,   306,   307,   308,   309,    -1,    -1,   312,   313,    -1,
     315,    -1,   317,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,    -1,   330,   331,    -1,    -1,   334,
     335,   336,   337,    -1,    -1,    -1,    -1,   342,    -1,    -1,
      -1,    -1,   347,   348,   349,    -1,   351,   352,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   366,   367,    -1,    -1,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,   379,    -1,    -1,    -1,    -1,   384,
     385,    -1,   387,    -1,   389,   390,   391,   392,   393,    -1,
     395,   396,   397,   398,    -1,    -1,   401,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,    -1,   412,   413,   414,
     415,   416,    -1,   418,    -1,    -1,   421,    -1,   423,    -1,
      -1,   426,    -1,    -1,    -1,   430,    -1,    -1,   433,   434,
      -1,    -1,    -1,    -1,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,   449,    -1,    -1,    -1,    -1,   454,
     455,   456,    -1,    -1,    -1,    -1,   461,    -1,    -1,    -1,
     465,    -1,    -1,   468,    -1,   470,    -1,   472,    -1,    -1,
     475,   476,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,
      -1,   486,    -1,    -1,    -1,   490,    -1,    -1,   493,    -1,
     495,    -1,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,    -1,   510,   511,   512,   513,    -1,
     515,   516,    -1,    -1,   519,   520,   521,   522,   523,    -1,
      -1,   526,   527,    -1,   529,   530,   531,   532,   533,    -1,
      -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,    -1,
     545,   546,   547,    -1,   549,   550,    -1,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,    -1,    -1,   562,    -1,    -1,
      -1,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,    -1,
     575,    -1,    -1,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,
     595,    -1,   597,    -1,    -1,   600
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    14,    30,    34,    48,    49,    56,    61,    62,
      77,    96,   117,   125,   126,   127,   137,   138,   150,   163,
     179,   194,   199,   202,   226,   228,   244,   261,   265,   354,
     373,   383,   394,   417,   420,   422,   425,   428,   429,   436,
     438,   445,   451,   459,   464,   466,   469,   494,   499,   544,
     556,   560,   563,   569,   596,   611,   622,   625,   626,   627,
     628,   629,   631,   636,   638,   645,   675,   703,   710,   818,
     969,  1007,  1010,  1018,  1021,  1026,  1028,  1029,  1034,  1037,
    1042,  1049,  1061,  1062,  1219,  1221,  1231,  1234,  1259,  1267,
    1278,  1285,  1299,  1302,  1305,  1314,  1320,  1324,  1326,  1327,
    1377,  1394,  1400,  1402,  1409,  1411,  1437,  1443,  1444,  1445,
    1446,  1499,  1507,  1508,    11,   104,   122,   187,   215,   266,
     388,   457,   516,  1003,  1468,  1469,  1470,  1473,   262,   343,
    1036,  1438,   525,  1368,   219,     5,     7,     8,     9,    10,
      11,    17,    20,    22,    23,    24,    25,    26,    27,    28,
      30,    34,    38,    41,    42,    43,    45,    47,    48,    51,
      54,    55,    57,    58,    59,    61,    63,    64,    65,    66,
      67,    68,    69,    71,    72,    74,    75,    76,    77,    78,
      79,    80,    81,    83,    84,    86,    87,    88,    89,    90,
      92,    95,    98,   102,   106,   107,   108,   111,   116,   117,
     122,   124,   128,   130,   131,   132,   133,   137,   140,   141,
     142,   146,   148,   149,   151,   152,   153,   156,   157,   159,
     160,   161,   162,   163,   166,   167,   168,   171,   172,   174,
     175,   176,   179,   183,   185,   187,   189,   190,   191,   192,
     193,   195,   199,   200,   202,   205,   206,   210,   211,   212,
     213,   216,   217,   218,   220,   222,   227,   228,   232,   234,
     235,   237,   238,   242,   245,   246,   249,   252,   253,   259,
     260,   262,   264,   266,   267,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   289,   290,
     291,   293,   294,   295,   296,   298,   299,   304,   305,   306,
     307,   308,   309,   312,   313,   315,   317,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   330,   331,   334,   335,
     336,   337,   341,   342,   347,   348,   349,   351,   352,   353,
     355,   365,   366,   367,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   383,   384,   385,   387,
     389,   390,   391,   392,   393,   395,   396,   397,   398,   401,
     405,   406,   407,   408,   409,   412,   413,   414,   415,   416,
     418,   419,   421,   422,   423,   426,   428,   430,   431,   433,
     434,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   449,   450,   454,   455,   456,   457,   461,   465,   467,
     468,   469,   470,   472,   473,   474,   475,   476,   483,   484,
     486,   490,   493,   494,   495,   499,   500,   502,   503,   504,
     505,   506,   507,   510,   511,   512,   513,   515,   516,   519,
     520,   521,   522,   523,   526,   527,   529,   530,   531,   532,
     533,   539,   540,   544,   545,   546,   547,   549,   550,   552,
     553,   555,   556,   559,   562,   564,   566,   567,   568,   575,
     578,   582,   583,   584,   585,   592,   593,   595,   596,   597,
     600,   669,  1367,  1371,  1375,  1376,   289,   515,   518,  1396,
    1396,   592,  1439,   104,   186,   266,   457,   477,   516,   522,
     558,   566,   651,   652,   870,   871,   872,   947,   948,   949,
    1268,  1220,   104,   161,   187,   219,   266,   388,   457,   516,
     522,   541,   566,   582,  1230,  1371,  1036,   668,   619,  1364,
    1366,  1371,   637,  1232,   377,    83,   396,  1325,   107,   219,
     597,  1332,  1396,  1036,   819,  1371,  1321,   445,   566,  1396,
    1036,  1235,  1315,   480,   700,   704,   705,  1371,   668,  1439,
    1371,  1065,  1067,  1068,   356,  1379,  1286,   704,   494,   499,
     469,   539,   469,   518,  1280,   377,  1401,  1260,  1371,    30,
      77,   148,   383,   406,   438,   494,  1501,   451,   611,  1063,
       0,   150,   623,   383,   167,   372,  1303,  1364,  1371,   154,
     980,  1371,   154,   669,   196,   669,   254,  1368,  1371,  1373,
     765,   766,   769,   792,  1371,   518,   975,  1078,  1468,  1396,
    1439,  1043,   676,   619,   537,  1019,  1030,    16,  1440,   214,
     873,   196,  1373,   767,   792,   668,   361,  1465,  1469,  1470,
    1471,  1472,  1473,   518,   871,   219,   219,   219,   215,   273,
     398,  1276,  1277,     7,    20,    27,    33,    35,    36,    37,
      39,    52,    53,    59,    60,    68,    71,    89,    93,    94,
      99,   100,   103,   104,   109,   110,   111,   116,   118,   121,
     164,   169,   170,   177,   190,   192,   197,   203,   210,   214,
     226,   229,   251,   259,   270,   292,   297,   308,   312,   314,
     318,   319,   320,   321,   322,   329,   338,   339,   340,   344,
     345,   349,   368,   374,   378,   379,   381,   395,   424,   425,
     437,   443,   449,   497,   498,   504,   508,   509,   514,   525,
     530,   531,   532,   533,   542,   543,   544,   548,   551,   566,
     571,   572,   573,   574,   579,   581,   585,   600,   604,   605,
     610,   611,   614,   615,   618,   619,  1082,  1083,  1084,  1085,
    1089,  1092,  1093,  1094,  1095,  1096,  1097,  1105,  1109,  1121,
    1351,  1353,  1355,  1356,  1360,  1362,  1367,  1371,   214,  1229,
    1229,  1229,  1371,   196,  1229,  1229,   792,  1229,   668,  1229,
    1396,   632,  1306,    12,    13,    96,   125,   138,   161,   163,
     174,   194,   219,   226,   265,   389,   393,   410,   418,   426,
     451,   464,   465,   510,   541,   563,   565,  1412,  1414,  1416,
    1417,  1371,   353,    67,   402,   619,  1373,   123,   204,   273,
    1237,  1371,  1082,   230,  1328,  1395,  1396,    46,   820,   184,
      33,    58,   289,  1291,  1322,  1371,   668,  1038,  1396,   123,
     273,  1238,  1266,    58,   289,   396,   469,  1316,  1317,   575,
     701,   459,   706,    12,   393,  1410,  1414,   537,  1440,  1066,
      12,   134,   204,   482,   483,   484,   485,   486,   487,   488,
     501,  1072,  1073,  1074,  1464,  1378,    23,    34,    59,    60,
      66,    71,    92,    94,    96,   105,   152,   157,   160,   185,
     187,   193,   195,   218,   219,   220,   241,   262,   289,   353,
     376,   387,   388,   391,   392,   397,   413,   456,   469,   500,
     518,   519,   529,   567,   584,   921,   946,  1287,  1291,  1292,
    1294,  1385,   706,  1012,  1013,  1012,  1012,   589,  1011,  1012,
    1279,  1371,  1396,  1266,    35,   203,   525,  1352,  1369,  1500,
    1500,  1500,  1500,  1500,  1067,  1063,   612,   617,  1371,  1301,
    1300,   306,   523,   550,   971,   564,   100,  1373,  1374,   973,
     771,   793,  1371,   972,   355,     6,    56,   138,   339,   401,
     403,   794,  1364,   489,  1474,  1475,   161,   974,  1027,  1044,
    1045,  1046,  1047,  1364,   611,   677,  1371,   639,  1225,  1226,
    1364,  1225,    55,   341,   341,   417,  1441,   338,   339,  1088,
    1371,   770,   793,   181,     6,  1374,  1427,  1428,   425,    10,
     388,   541,   655,  1078,  1467,  1475,  1483,  1487,  1488,  1494,
     655,  1078,  1466,  1475,  1483,  1488,  1494,  1468,  1473,   873,
    1371,  1371,  1371,   184,  1269,  1273,  1274,  1371,  1276,   611,
     611,   611,  1092,   611,   611,   611,  1082,  1124,   611,   611,
     611,   611,   611,   611,   611,   611,   611,  1081,  1081,   611,
    1081,   611,   611,   611,   551,   611,  1351,   611,   611,   611,
     611,   611,   611,   611,   611,   611,   611,   611,  1082,   611,
     611,   611,  1122,  1123,  1360,  1371,   611,   611,   611,   611,
     611,   611,   611,   611,   611,  1082,   611,  1081,   611,   611,
     611,   611,   611,   611,   611,   611,   611,   611,   611,   611,
     611,   611,   611,   611,   611,  1081,   611,  1351,   611,   611,
     611,  1351,   611,   611,    35,   203,   525,   611,  1081,  1081,
    1081,   611,   611,   611,   611,   611,  1092,  1092,  1092,  1082,
    1459,  1460,  1371,  1110,  1371,    15,    16,   358,   361,   598,
    1086,  1087,   154,   155,   188,   198,   236,   247,   274,   332,
    1090,    31,   135,   233,   255,   318,   411,   462,   463,   475,
     602,   603,   604,   605,   606,   607,   608,   609,  1088,  1092,
      70,   360,   613,  1369,   611,   619,   164,  1371,   669,  1371,
     350,   793,   669,  1373,   803,  1292,   669,  1374,  1426,  1224,
    1229,   570,   633,    33,    58,    66,   128,   152,   156,   189,
     206,   220,   267,   289,   387,   396,   397,   412,   430,   469,
     470,   495,   519,   529,   567,  1307,  1311,  1312,  1396,   387,
    1415,   440,   440,   516,   522,   566,   582,   356,  1419,   515,
     350,  1421,    65,   469,  1418,   105,   582,  1420,   350,   613,
      18,   154,  1174,  1175,  1403,  1371,  1003,   474,    48,    81,
     273,  1334,  1364,  1397,  1398,  1035,   257,   260,   399,   821,
     823,   618,   630,  1368,    29,   267,  1039,  1374,  1040,  1041,
    1364,  1022,   230,  1226,  1239,  1240,    48,  1318,   613,  1369,
      54,    64,    74,    86,    87,    88,   102,   307,   324,   447,
     503,   521,   707,   709,  1415,   350,   350,   445,  1442,  1441,
     557,  1447,  1448,   606,  1076,  1077,  1078,  1074,  1380,  1381,
    1382,   160,   459,   255,   587,  1298,  1298,   611,   104,   161,
     187,   388,   518,   541,   582,  1298,    12,   882,  1373,   256,
    1193,  1195,   184,   233,  1293,  1295,    69,   495,   182,  1298,
     495,   515,    69,   495,    12,    41,    90,    95,   235,   305,
     367,   476,   512,  1281,  1282,  1283,  1298,   160,   206,   495,
     495,  1298,  1298,  1298,  1193,  1298,  1295,   267,   151,    72,
     390,   515,   540,   495,   522,   578,  1009,   416,   490,  1014,
    1015,  1008,    84,  1226,  1003,   613,   352,  1503,   511,  1504,
     240,   433,  1502,   612,  1448,  1450,  1452,  1453,   150,   624,
    1061,  1304,  1352,  1371,   121,   868,   869,   879,   880,   930,
     107,  1081,   618,   670,     6,   772,   670,   611,   106,   789,
     789,   789,     4,   970,   450,   582,   669,  1475,  1225,   233,
     613,   373,  1055,  1057,  1058,   678,   679,  1082,   216,   275,
     276,   277,   278,   279,   280,   282,   283,   284,   285,   286,
     287,   288,   290,   291,   414,   415,   640,   641,   644,   167,
     398,   613,  1020,    57,   167,   171,   182,   304,   398,  1031,
    1032,  1033,    55,   417,   164,   650,   772,   107,   789,   212,
     613,  1078,  1078,  1078,   161,   187,   187,  1475,  1364,   950,
     951,   950,   950,  1227,  1228,  1364,  1365,  1371,   613,  1271,
     619,  1275,  1082,  1082,    12,   134,  1117,  1176,  1117,  1117,
    1117,   586,  1126,  1082,  1082,  1121,  1121,  1082,  1082,  1082,
     134,  1117,  1176,   612,  1082,   612,  1082,  1082,  1082,  1082,
    1360,  1459,   112,   113,   114,   115,   116,   207,   208,   209,
     210,   308,   310,   311,   312,   319,   395,   448,   449,   585,
     599,   600,  1171,  1172,  1121,   108,   111,   530,   533,  1173,
     134,  1112,  1082,  1082,  1082,  1082,  1171,  1082,  1121,  1123,
       9,   613,   619,   134,  1117,  1082,  1082,   134,  1117,  1082,
    1082,  1121,  1121,  1121,  1082,  1082,  1082,  1082,  1121,  1085,
    1082,  1082,  1082,  1082,  1082,  1082,  1117,  1117,  1082,  1082,
     134,  1117,  1082,  1082,  1172,  1172,  1082,    44,   248,   538,
    1082,  1082,   612,  1361,  1362,  1371,  1117,  1117,  1082,  1082,
     612,   613,   612,   451,   611,  1456,  1457,  1082,   618,  1111,
    1373,   619,  1082,  1082,  1082,  1084,   170,   344,   543,   559,
    1088,    12,    17,  1084,  1091,  1085,  1085,   611,  1092,  1085,
    1085,  1085,  1085,   255,  1085,  1085,   229,  1085,   229,  1085,
    1085,  1085,  1085,  1085,    31,   233,   255,   411,  1373,  1092,
    1082,  1098,  1371,   619,  1364,   803,   342,   583,   804,   805,
     152,   613,  1225,  1222,   618,   634,   635,   267,   267,   267,
     267,    48,   267,   267,   613,  1308,   515,   611,  1429,  1374,
    1429,  1429,  1429,   187,   388,   518,  1413,  1417,  1371,   175,
     335,  1371,  1404,  1405,  1239,  1368,  1050,   262,  1333,  1175,
     613,  1225,    72,   611,   828,   829,   828,   829,   372,   831,
     200,   243,  1373,   118,   177,   270,   345,   548,  1202,  1203,
    1204,    29,   537,  1323,   613,   537,   613,   537,  1225,  1240,
    1236,    12,  1319,  1317,   613,   154,   613,  1374,   187,   388,
    1413,  1371,    12,   134,  1455,   613,  1069,  1082,  1358,  1371,
     613,   193,   262,   351,   456,  1383,  1384,  1387,  1388,   233,
    1296,  1368,  1082,   606,   873,   669,   669,   669,  1364,   669,
    1364,   267,   323,   495,  1290,  1290,   270,   345,   548,  1196,
    1197,  1353,  1371,  1298,  1371,   669,  1298,  1374,  1293,   669,
    1298,   234,   513,   172,   182,  1284,   613,  1296,   496,  1293,
    1364,  1295,  1293,  1293,  1298,   515,  1298,   562,  1016,   613,
    1016,   472,   451,   611,   615,  1127,  1128,  1129,  1130,  1131,
    1140,  1141,  1155,  1352,   375,  1505,   359,  1189,  1195,  1454,
     869,    70,   921,   130,  1373,    75,    89,   245,   316,   341,
     400,   489,   672,   674,   407,   552,   790,   791,   222,   786,
     787,   788,   795,   803,   805,   104,   205,   365,   374,   380,
     473,   566,   653,   654,  1368,    24,   296,   780,   781,   782,
     795,   796,   797,   803,   805,   773,   774,   780,     6,    13,
      14,    25,    26,    56,    61,    62,    68,    75,    83,    93,
     107,   124,   131,   132,   138,   146,   152,   180,   217,   219,
     227,   242,   295,   313,   317,   354,   359,   366,   373,   374,
     405,   419,   420,   421,   422,   442,   500,   516,   520,   544,
     557,   815,   875,   877,   879,   880,   981,   985,   987,   990,
     996,   997,   998,  1185,   122,   232,  1364,   976,   121,  1048,
    1371,  1046,  1364,   817,  1057,   219,   243,   944,  1059,   612,
     613,   154,   154,   154,   154,   154,   154,   154,   154,   154,
     154,   154,   154,   154,   154,   154,   154,   154,   154,   613,
    1226,   564,  1032,   867,   868,    75,   336,   408,   553,   783,
     784,   785,   795,   799,   800,   801,   802,   803,   805,   593,
     569,   768,    46,   589,  1428,   187,   669,   669,   873,   669,
    1371,   646,   546,   570,   958,   350,   350,   350,   613,  1272,
    1270,   619,  1275,  1274,   184,   606,  1371,   613,   612,  1117,
     612,  1118,   612,   612,   612,  1082,   144,   586,  1125,    18,
     612,   570,   612,   612,   612,   613,   570,   613,  1106,   612,
     606,   612,   613,   613,   612,   612,   612,   612,   184,   612,
     613,  1108,   612,   613,   613,   613,   605,   613,   612,   612,
     611,  1360,  1371,  1117,   612,   612,   612,  1117,   612,   613,
     612,   612,   612,   612,   612,   612,   612,   613,   612,   233,
     612,   613,   613,   613,   613,   612,   612,   612,   613,   184,
     613,  1117,   612,   612,   612,   613,   613,   613,   612,   184,
    1082,   184,  1082,   184,  1082,   184,   612,   613,   612,   612,
     612,   612,   613,   612,  1121,  1145,  1146,  1147,   451,   611,
    1064,  1451,  1452,   557,  1461,   616,   193,   262,   456,  1386,
     460,  1371,   170,   344,   543,   559,   611,    16,  1082,  1459,
     159,  1181,  1085,  1082,  1082,  1085,   611,  1092,  1085,  1078,
    1102,  1103,  1104,   611,   619,  1371,  1223,   804,   154,   460,
    1250,  1251,  1374,    50,   432,  1004,  1225,  1373,   613,  1312,
    1225,  1313,  1371,  1430,  1431,   537,   606,  1364,  1371,  1425,
    1425,  1425,   154,   175,   188,   198,   246,   247,   274,   335,
     385,  1406,  1408,   587,  1177,  1233,  1051,  1052,  1053,  1054,
    1364,   221,   273,   402,   594,  1399,  1398,   611,  1078,   203,
     270,   345,   548,  1200,  1203,   507,   832,   822,    11,   824,
    1082,  1368,  1374,  1374,  1041,  1364,   167,   398,   568,  1023,
    1024,  1025,   451,   459,   574,   575,   611,   863,  1241,  1244,
     709,   111,   530,   533,   708,  1109,  1355,  1360,   194,   184,
    1425,  1425,  1425,  1449,  1077,   184,   230,  1070,  1071,  1188,
    1189,  1214,  1079,  1079,   619,  1381,   121,   539,  1371,  1390,
     325,   374,   618,   921,  1389,  1368,   184,  1297,   612,  1371,
     348,   613,  1298,   396,  1193,  1283,  1297,  1298,  1293,  1364,
    1298,  1298,  1293,   644,  1017,  1015,  1154,  1371,    97,   223,
     240,   251,   328,   437,   501,  1139,   459,   613,  1364,  1154,
     613,   182,  1506,    46,  1193,  1251,  1251,   326,  1368,   489,
     489,   489,   489,   489,   450,  1368,  1368,  1251,   613,   788,
    1368,  1368,  1368,  1368,   118,   177,   203,   270,   345,   548,
    1199,  1368,  1368,   612,   613,  1251,  1251,   613,   782,   775,
     776,   795,   796,   797,    73,    85,   373,   891,   894,   895,
     942,   944,   948,   949,  1002,  1002,   373,  1251,  1251,  1002,
    1251,   373,   373,  1251,  1251,   537,   130,  1251,   241,   516,
     181,   373,   386,   944,  1002,   241,  1251,   516,   130,  1251,
    1251,  1251,  1251,  1002,   373,    46,  1251,   817,  1251,   373,
     371,    18,   154,   537,  1006,   373,   373,  1251,   133,   305,
    1371,  1251,   373,  1251,   875,   613,   814,   815,   985,   611,
     619,   890,   896,  1363,  1371,  1476,   350,   663,   977,  1056,
     611,  1082,   611,  1199,  1368,  1368,   118,   177,   270,   345,
     548,  1201,  1368,  1199,  1368,  1368,  1368,  1368,  1368,  1199,
    1199,  1368,  1356,  1368,  1199,   641,  1251,  1251,  1251,  1251,
     613,   785,  1373,   266,   168,   777,   778,   779,   795,   796,
     797,   798,   801,   802,   803,   805,   374,   525,  1373,  1371,
    1495,     8,    29,   763,   669,   611,   434,   255,   611,   807,
     874,   876,   877,    45,   200,   444,   963,   963,  1364,  1364,
    1364,  1228,  1371,   570,  1177,  1371,  1128,   619,  1275,   229,
    1082,   612,  1082,   528,  1082,  1082,   148,    33,    60,   108,
     111,   119,   330,   467,   533,   561,  1119,    33,   922,  1373,
    1082,   922,  1119,  1121,   612,   229,   229,  1082,  1082,  1121,
    1082,  1082,  1082,  1082,  1082,  1085,   612,   612,  1082,  1082,
    1082,  1082,  1082,  1082,  1121,   229,  1082,  1082,  1082,   612,
    1082,  1082,  1082,  1082,   184,  1082,   184,  1082,   184,  1082,
    1082,  1082,   612,  1462,  1463,  1464,  1146,  1064,   612,  1455,
     619,   619,   619,  1373,  1082,  1459,  1084,   612,   613,   612,
    1092,  1171,  1171,    16,  1082,  1459,  1181,  1082,   612,   613,
    1120,  1121,  1371,   881,  1373,  1004,   635,  1309,   612,   613,
    1427,   619,   619,   537,   537,   537,  1407,  1178,  1194,  1195,
    1241,   613,  1055,  1057,   525,  1370,   594,   262,   825,   826,
     827,  1371,   837,  1085,    46,   611,   839,   829,   154,   611,
     537,  1024,   864,  1242,   611,  1247,  1252,  1247,   612,   863,
    1243,  1357,  1358,  1361,  1371,  1245,   154,   356,  1427,   184,
     184,   184,  1062,   139,  1128,  1215,   182,   265,  1075,  1214,
    1194,  1071,    18,  1080,  1368,  1371,   606,  1371,   619,   237,
     619,  1250,   121,   922,   923,  1250,   182,  1250,   618,  1373,
      33,   121,   925,   926,  1373,  1201,  1288,   157,   584,  1197,
    1197,   345,  1289,  1177,  1293,   613,  1142,  1149,  1154,  1127,
     240,   240,   362,  1156,   240,   251,   437,  1156,  1140,  1127,
    1262,  1263,  1361,  1129,  1175,  1151,  1152,  1199,   309,  1190,
     121,   927,   929,  1373,   923,   107,   107,   122,   232,   806,
    1202,  1367,   788,   654,   806,   806,   782,   613,   776,   966,
    1363,  1036,    62,   181,   386,   558,   893,   943,   966,   944,
     945,   945,  1363,  1036,  1201,  1199,  1363,  1199,    12,   986,
     994,   995,  1371,  1036,  1368,  1368,   921,  1251,  1199,   243,
     994,   243,  1363,  1363,   881,  1251,   175,   246,   341,   884,
    1199,  1201,  1201,  1363,  1036,  1186,  1187,  1361,   121,  1199,
     816,  1368,  1036,  1364,  1036,  1036,    78,    80,   121,   142,
     176,   409,   883,  1199,   986,   878,     6,   138,   998,   887,
     888,   889,   890,   891,  1371,     8,   175,  1005,   410,   892,
     893,   936,   897,   619,   611,  1477,    79,   446,   420,   978,
     611,   386,  1167,  1168,  1169,  1371,   642,   643,  1199,  1368,
    1200,   806,   806,   785,   355,   196,  1251,   613,   779,   525,
      18,   434,   611,   125,   226,   563,   764,   656,  1489,   119,
     231,   404,   502,   886,  1364,   255,   373,   808,   813,   814,
     887,   813,   613,   876,   647,   648,   649,   619,  1128,  1188,
    1275,  1177,  1082,   612,  1082,   528,   611,   913,   914,   914,
     611,   908,   909,   913,   914,   231,   231,   612,   612,   612,
     612,   612,  1107,  1082,  1082,   612,   612,   359,  1114,   613,
     613,   612,   613,   612,   233,  1099,  1100,   612,   612,   612,
     612,   613,   612,   612,  1082,   612,   182,   612,   612,   613,
     612,   613,   613,   612,  1082,   612,  1082,   612,  1082,   612,
     612,   612,  1076,  1464,   612,  1458,   619,   967,   612,  1121,
    1084,   612,   613,   612,  1079,  1104,   612,   589,  1310,  1431,
     589,  1434,   606,   606,  1427,  1427,  1427,   611,  1082,   350,
    1257,  1053,  1364,  1057,   215,  1060,  1329,   612,   613,  1079,
     823,   373,   840,   841,  1200,   825,  1374,  1072,  1248,  1249,
    1361,  1253,   613,   611,  1244,   612,   612,   613,   619,  1447,
     708,   184,  1427,  1427,  1427,  1177,  1177,   140,   363,  1210,
    1211,  1216,   563,   233,  1368,  1371,   619,  1371,   253,  1371,
      12,    33,   121,   350,  1082,  1393,    70,   928,  1082,  1374,
     349,   374,   525,  1392,  1386,  1250,  1193,  1193,  1298,   644,
     557,   612,  1451,  1150,   616,   240,  1140,  1156,  1156,   240,
     350,   350,   570,   613,  1261,  1250,  1165,  1166,  1072,  1082,
    1191,  1359,   776,   988,   611,   243,   243,   945,   966,   951,
     966,   966,   138,   459,   986,   999,   983,   613,  1200,   923,
    1368,   966,  1004,  1368,  1000,   986,   613,    19,   126,  1192,
     820,   986,   991,   986,   611,   612,   613,  1371,  1364,    32,
      33,    38,    40,    42,    43,    60,   108,   111,   119,   136,
     153,   176,   178,   190,   191,   231,   259,   268,   269,   271,
     301,   302,   303,   320,   321,   322,   327,   330,   346,   347,
     378,   379,   404,   455,   459,   471,   526,   530,   533,   534,
     535,   536,   576,   577,   600,   898,   901,   902,   903,   904,
     905,   906,   907,  1371,  1371,  1478,    18,   339,   384,    22,
     162,   657,   537,   131,   146,   659,   986,   612,   613,   612,
     613,   611,  1371,   806,   779,  1368,   886,  1496,   350,   350,
     680,   681,   683,  1371,   474,  1364,   863,   612,   215,   425,
     810,  1335,   876,   611,   611,   611,  1371,  1177,   256,  1198,
    1171,  1082,   118,   270,   345,   548,    20,    33,    47,   555,
     921,   931,   932,   933,   345,   612,  1171,  1171,    46,   453,
    1113,  1082,  1082,  1121,    42,   328,   612,   589,  1101,  1082,
    1171,  1082,  1082,  1082,  1082,   612,   612,   612,  1148,  1456,
    1371,   612,  1121,  1080,   402,   194,   427,  1432,  1432,  1432,
     121,  1082,  1255,  1256,   141,  1060,   249,  1335,   827,   612,
     200,   243,   842,   612,   613,   612,  1076,   613,  1250,  1254,
    1255,  1252,  1246,  1244,  1357,  1371,  1427,  1194,   196,  1182,
    1370,  1370,   618,  1212,  1213,  1373,   461,   606,   402,   423,
     454,  1391,   929,  1250,   611,   611,  1390,  1082,  1455,  1175,
    1130,  1127,  1140,   240,   240,  1127,  1140,  1133,  1132,  1134,
    1263,  1177,  1256,  1163,  1164,  1076,   613,  1192,   372,   611,
     989,  1082,   966,   951,   611,   950,   950,   121,   121,   896,
    1031,   995,   928,   898,   982,  1187,   992,   994,   984,  1313,
     889,   611,   937,   913,   913,   914,   908,   382,   899,   908,
     908,   933,    60,   576,   902,   904,   933,   933,    60,   577,
     577,   580,   908,   900,   914,   933,   913,   914,    25,    70,
      75,   121,   344,   350,   386,   455,   558,   916,   917,   918,
     935,  1088,   580,   913,   933,    33,   913,   934,   913,   913,
     914,   611,   909,   915,   619,   612,   613,  1479,  1480,   384,
    1082,  1082,   350,   663,   669,   350,    75,   664,   612,  1168,
     643,   653,   474,   224,   233,   364,   684,   685,   686,   687,
    1078,   446,   612,   613,   682,  1368,   612,   612,   874,    18,
     866,   964,   965,  1371,   964,   964,  1197,   612,   612,   612,
     612,   612,    33,    20,   555,   921,    33,   922,   613,   612,
     612,  1115,  1352,   612,   612,   613,   612,   315,   245,   396,
     612,   612,   612,   612,   612,   612,   885,  1071,  1194,  1451,
     612,   265,   356,    63,   238,   337,   491,   505,   595,  1423,
    1424,   589,  1433,  1433,  1433,   612,   613,  1258,   230,   611,
     830,   824,   843,  1371,   841,   865,  1249,  1256,   612,  1450,
      46,   201,  1179,  1217,  1373,   613,   315,    76,   549,   402,
    1392,   525,   525,  1250,  1143,   350,  1136,  1140,  1140,   350,
    1138,  1082,  1082,   611,  1188,   180,   215,   569,  1158,  1159,
    1162,  1153,  1359,  1200,   840,   612,   611,   611,   964,   611,
     611,   111,   530,   533,   604,   605,  1354,  1355,  1005,   916,
    1036,   993,  1023,   612,   938,  1371,   292,   939,   467,   561,
     601,   910,   911,   912,   611,   910,   910,   933,   580,   910,
     611,   933,   910,   927,  1368,   340,   920,  1354,   563,   121,
     243,   918,   243,   344,   933,   934,   933,   934,   910,   345,
     910,  1371,  1371,   451,   611,  1481,  1171,   469,  1368,   137,
     979,   612,  1368,   612,   613,   682,  1484,   657,  1490,   683,
     898,   919,   809,   813,   611,   863,   612,   613,  1192,   611,
     612,   612,   922,   934,   345,  1116,  1359,  1082,   315,   166,
    1075,  1075,   525,   525,   525,    16,  1422,   194,   293,   294,
     298,   299,  1435,  1436,  1256,   243,   518,  1078,   833,   611,
     574,   844,   885,  1183,  1359,  1180,  1188,   921,   924,  1213,
     612,   612,  1393,  1456,  1135,   570,  1137,   570,  1170,  1371,
    1198,   944,   944,  1159,   885,  1192,   612,   964,   964,   612,
     964,   964,  1356,  1356,  1001,   230,   612,   613,   185,   370,
     468,   350,   940,   912,   968,  1352,   968,  1081,   340,   575,
    1065,  1063,   589,  1482,   658,   665,   666,  1497,   686,  1371,
    1364,   662,   663,   434,   928,  1450,   810,   863,   811,    75,
     242,   952,   955,   958,   959,   960,   965,   345,   589,   953,
     957,   959,   962,   954,   956,   959,   961,   612,   613,  1192,
     612,  1423,   356,  1199,  1199,  1199,  1199,  1436,   563,  1364,
     837,   506,   838,   835,   836,  1371,   233,   252,    75,   107,
     219,   295,   313,   336,   516,   860,   861,   862,  1292,   590,
     591,   613,  1184,  1192,  1082,  1194,   923,  1218,  1144,  1082,
     611,  1082,   611,   612,   613,   182,  1157,  1157,   612,   612,
     952,   612,   612,  1005,   611,  1371,   125,   563,   612,   613,
     612,  1081,   612,    51,    62,   262,   493,   660,    52,    67,
     173,   214,   239,   250,   353,   435,   667,   714,   716,   717,
     718,   720,   721,   722,   723,   724,   725,   727,   735,   736,
     739,   750,   753,   755,   756,  1367,  1372,  1376,   671,   919,
     182,   659,  1491,   612,  1447,  1368,  1251,   960,  1192,   612,
     369,   962,   961,  1359,  1264,  1265,  1361,  1330,  1079,  1200,
     612,   613,   846,   527,  1251,   130,   130,  1251,  1251,  1251,
    1251,   611,   855,   862,   152,  1359,   388,  1205,    72,  1336,
    1451,  1170,  1170,  1371,   196,   240,   359,  1161,  1160,   936,
     952,   953,   954,   840,    50,   341,   432,   459,   941,   941,
     933,  1352,   933,  1450,    62,   356,    62,  1082,   149,   661,
     737,   740,  1371,   184,   335,   728,   715,  1372,  1372,  1371,
     719,   626,   272,   424,   588,   759,    30,   757,   620,   129,
     672,   673,  1088,  1498,  1078,   664,   919,   812,  1199,  1367,
    1192,   613,  1250,   924,   612,   834,   836,   611,   848,   850,
     845,  1368,  1251,  1251,  1202,  1202,  1200,  1373,   507,   856,
     857,  1251,  1192,  1371,   147,   158,   357,   524,  1337,  1338,
     258,  1339,   612,   612,    46,    46,   611,   611,   612,     5,
     121,   344,   350,   350,   356,   356,  1082,  1082,   586,   742,
     746,   184,  1371,   730,   731,  1082,   689,   713,   714,   716,
     718,   720,   722,   723,   724,   725,   727,   735,   750,   753,
     755,   689,   760,   758,   751,   754,   129,   713,  1485,   137,
    1492,  1450,  1265,  1256,  1331,   838,   611,   849,   850,   851,
     300,   847,   850,  1368,  1368,   858,   612,   613,   881,  1206,
      46,    46,   147,    46,  1338,   492,   524,  1340,  1341,  1167,
    1169,   563,   125,   738,   747,   144,   746,   749,   230,   148,
    1082,   148,   713,   617,   562,  1082,   690,   759,   757,   143,
     665,   671,   441,  1342,   612,   613,   300,   853,   854,  1085,
     859,  1373,   857,   611,  1352,  1352,    46,  1352,    46,    46,
    1341,   612,   612,   941,   941,   586,   741,   743,  1082,   689,
     148,   726,   214,   528,   272,   617,   762,   137,   120,   688,
     691,   752,  1372,   752,   443,  1493,   212,  1336,   850,   613,
     852,   860,  1078,  1207,  1208,  1209,  1352,  1352,  1352,   744,
     743,   749,   748,    52,   729,  1371,   732,  1082,   761,    91,
     165,   696,   711,  1371,   148,   713,   617,  1486,   713,    46,
    1339,   854,   612,  1082,   612,   613,  1082,   148,   528,   613,
     689,   148,   689,   199,   613,   692,    82,   101,   617,   713,
    1352,   215,  1343,  1079,  1209,   745,    52,   689,  1371,   733,
     424,   148,   182,  1371,   919,   182,   182,   345,   611,  1345,
     528,   144,   145,   734,   588,   693,   121,   712,   699,   700,
    1199,   694,   695,   258,   441,  1344,   612,   618,  1346,  1347,
    1361,   459,  1348,   689,   689,   730,   479,   481,   697,   698,
     699,   702,  1088,  1371,  1082,  1061,  1373,   612,   613,  1349,
    1350,  1361,   613,   713,   183,  1347,   613,  1250,   698,  1350,
    1078,  1256,  1079
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YYTHD, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* This macro is provided for backward compatibility. */

#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, YYTHD)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, YYTHD); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, class THD *YYTHD)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, YYTHD)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    class THD *YYTHD;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (YYTHD);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, class THD *YYTHD)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, YYTHD)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    class THD *YYTHD;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, YYTHD);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, class THD *YYTHD)
#else
static void
yy_reduce_print (yyvsp, yyrule, YYTHD)
    YYSTYPE *yyvsp;
    int yyrule;
    class THD *YYTHD;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , YYTHD);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, YYTHD); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (0, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  YYSIZE_T yysize1;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = 0;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                yysize1 = yysize + yytnamerr (0, yytname[yyx]);
                if (! (yysize <= yysize1
                       && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                  return 2;
                yysize = yysize1;
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  yysize1 = yysize + yystrlen (yyformat);
  if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
    return 2;
  yysize = yysize1;

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, class THD *YYTHD)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, YYTHD)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    class THD *YYTHD;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (YYTHD);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (class THD *YYTHD);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (class THD *YYTHD)
#else
int
yyparse (YYTHD)
    class THD *YYTHD;
#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1806 of yacc.c  */
#line 1673 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1806 of yacc.c  */
#line 1685 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1806 of yacc.c  */
#line 1710 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 61:

/* Line 1806 of yacc.c  */
#line 1783 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 64:

/* Line 1806 of yacc.c  */
#line 1798 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 65:

/* Line 1806 of yacc.c  */
#line 1808 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 66:

/* Line 1806 of yacc.c  */
#line 1815 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 67:

/* Line 1806 of yacc.c  */
#line 1825 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 68:

/* Line 1806 of yacc.c  */
#line 1832 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 73:

/* Line 1806 of yacc.c  */
#line 1847 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 74:

/* Line 1806 of yacc.c  */
#line 1859 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 75:

/* Line 1806 of yacc.c  */
#line 1867 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 76:

/* Line 1806 of yacc.c  */
#line 1878 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            lex->sql_command = SQLCOM_CHANGE_MASTER;
            bzero((char*) &lex->mi, sizeof(lex->mi));
            lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_UNCHANGED;

            DBUG_ASSERT(Lex->mi.repl_ignore_server_ids.elements == 0);
          }
    break;

  case 77:

/* Line 1806 of yacc.c  */
#line 1887 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 80:

/* Line 1806 of yacc.c  */
#line 1897 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 81:

/* Line 1806 of yacc.c  */
#line 1901 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 82:

/* Line 1806 of yacc.c  */
#line 1905 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:

/* Line 1806 of yacc.c  */
#line 1909 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 84:

/* Line 1806 of yacc.c  */
#line 1913 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 85:

/* Line 1806 of yacc.c  */
#line 1917 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 86:

/* Line 1806 of yacc.c  */
#line 1922 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 87:

/* Line 1806 of yacc.c  */
#line 1926 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 88:

/* Line 1806 of yacc.c  */
#line 1930 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 89:

/* Line 1806 of yacc.c  */
#line 1934 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 90:

/* Line 1806 of yacc.c  */
#line 1938 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1806 of yacc.c  */
#line 1942 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 92:

/* Line 1806 of yacc.c  */
#line 1948 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 93:

/* Line 1806 of yacc.c  */
#line 1979 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 98:

/* Line 1806 of yacc.c  */
#line 1994 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (Lex->mi.repl_ignore_server_ids.elements == 0)
            {
              my_init_dynamic_array2(&Lex->mi.repl_ignore_server_ids,
                                     sizeof(::server_id),
                                     Lex->mi.server_ids_buffer,
                                     array_elements(Lex->mi.server_ids_buffer),
                                     16);
            }
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 99:

/* Line 1806 of yacc.c  */
#line 2008 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 100:

/* Line 1806 of yacc.c  */
#line 2012 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 101:

/* Line 1806 of yacc.c  */
#line 2028 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 102:

/* Line 1806 of yacc.c  */
#line 2032 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 103:

/* Line 1806 of yacc.c  */
#line 2043 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            /*
              For CREATE TABLE, an non-existing table is not an error.
              Instruct open_tables() to just take an MDL lock if the
              table does not exist.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_IF_EXISTS;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 104:

/* Line 1806 of yacc.c  */
#line 2068 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= YYTHD->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(YYTHD);
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  ha_resolve_storage_engine_name(lex->create_info.db_type),
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 105:

/* Line 1806 of yacc.c  */
#line 2084 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 106:

/* Line 1806 of yacc.c  */
#line 2089 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 107:

/* Line 1806 of yacc.c  */
#line 2095 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 108:

/* Line 1806 of yacc.c  */
#line 2100 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 109:

/* Line 1806 of yacc.c  */
#line 2106 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 110:

/* Line 1806 of yacc.c  */
#line 2111 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 111:

/* Line 1806 of yacc.c  */
#line 2116 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 112:

/* Line 1806 of yacc.c  */
#line 2121 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 113:

/* Line 1806 of yacc.c  */
#line 2128 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 114:

/* Line 1806 of yacc.c  */
#line 2134 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 115:

/* Line 1806 of yacc.c  */
#line 2136 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 116:

/* Line 1806 of yacc.c  */
#line 2140 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 117:

/* Line 1806 of yacc.c  */
#line 2144 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 118:

/* Line 1806 of yacc.c  */
#line 2148 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 119:

/* Line 1806 of yacc.c  */
#line 2159 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 122:

/* Line 1806 of yacc.c  */
#line 2173 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 123:

/* Line 1806 of yacc.c  */
#line 2177 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 124:

/* Line 1806 of yacc.c  */
#line 2181 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 125:

/* Line 1806 of yacc.c  */
#line 2185 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 126:

/* Line 1806 of yacc.c  */
#line 2189 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 127:

/* Line 1806 of yacc.c  */
#line 2193 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 128:

/* Line 1806 of yacc.c  */
#line 2197 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 129:

/* Line 1806 of yacc.c  */
#line 2204 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 130:

/* Line 1806 of yacc.c  */
#line 2224 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 131:

/* Line 1806 of yacc.c  */
#line 2235 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 133:

/* Line 1806 of yacc.c  */
#line 2242 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 134:

/* Line 1806 of yacc.c  */
#line 2248 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 135:

/* Line 1806 of yacc.c  */
#line 2250 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 136:

/* Line 1806 of yacc.c  */
#line 2256 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 137:

/* Line 1806 of yacc.c  */
#line 2262 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 138:

/* Line 1806 of yacc.c  */
#line 2271 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local();
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 139:

/* Line 1806 of yacc.c  */
#line 2278 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 141:

/* Line 1806 of yacc.c  */
#line 2286 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 142:

/* Line 1806 of yacc.c  */
#line 2292 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 144:

/* Line 1806 of yacc.c  */
#line 2298 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 145:

/* Line 1806 of yacc.c  */
#line 2304 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 146:

/* Line 1806 of yacc.c  */
#line 2312 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 147:

/* Line 1806 of yacc.c  */
#line 2314 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 148:

/* Line 1806 of yacc.c  */
#line 2321 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 149:

/* Line 1806 of yacc.c  */
#line 2364 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 163:

/* Line 1806 of yacc.c  */
#line 2396 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 164:

/* Line 1806 of yacc.c  */
#line 2411 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 165:

/* Line 1806 of yacc.c  */
#line 2427 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 166:

/* Line 1806 of yacc.c  */
#line 2445 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 167:

/* Line 1806 of yacc.c  */
#line 2446 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 168:

/* Line 1806 of yacc.c  */
#line 2450 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 169:

/* Line 1806 of yacc.c  */
#line 2451 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 170:

/* Line 1806 of yacc.c  */
#line 2457 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 171:

/* Line 1806 of yacc.c  */
#line 2459 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 172:

/* Line 1806 of yacc.c  */
#line 2461 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 173:

/* Line 1806 of yacc.c  */
#line 2463 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 174:

/* Line 1806 of yacc.c  */
#line 2465 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 175:

/* Line 1806 of yacc.c  */
#line 2467 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 176:

/* Line 1806 of yacc.c  */
#line 2469 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 177:

/* Line 1806 of yacc.c  */
#line 2474 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { }
    break;

  case 178:

/* Line 1806 of yacc.c  */
#line 2475 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 179:

/* Line 1806 of yacc.c  */
#line 2476 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 180:

/* Line 1806 of yacc.c  */
#line 2481 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 181:

/* Line 1806 of yacc.c  */
#line 2485 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 182:

/* Line 1806 of yacc.c  */
#line 2492 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 183:

/* Line 1806 of yacc.c  */
#line 2500 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 188:

/* Line 1806 of yacc.c  */
#line 2516 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 189:

/* Line 1806 of yacc.c  */
#line 2520 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 194:

/* Line 1806 of yacc.c  */
#line 2538 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
          }
    break;

  case 195:

/* Line 1806 of yacc.c  */
#line 2558 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(1) - (3)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(3) - (3)].num),
                                                     sp_param_in);

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 200:

/* Line 1806 of yacc.c  */
#line 2595 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(3) - (4)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(4) - (4)].num),
                                                     (sp_param_mode_t)(yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 201:

/* Line 1806 of yacc.c  */
#line 2620 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 202:

/* Line 1806 of yacc.c  */
#line 2621 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 203:

/* Line 1806 of yacc.c  */
#line 2622 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_out; }
    break;

  case 204:

/* Line 1806 of yacc.c  */
#line 2623 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_inout; }
    break;

  case 205:

/* Line 1806 of yacc.c  */
#line 2627 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 207:

/* Line 1806 of yacc.c  */
#line 2632 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 209:

/* Line 1806 of yacc.c  */
#line 2638 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 210:

/* Line 1806 of yacc.c  */
#line 2642 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 211:

/* Line 1806 of yacc.c  */
#line 2668 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(YYTHD);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 212:

/* Line 1806 of yacc.c  */
#line 2676 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable_t *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->dflt= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(YYTHD, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 213:

/* Line 1806 of yacc.c  */
#line 2733 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_cond(&(yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(YYTHD->lex->spcont->push_cond(&(yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondtype)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 214:

/* Line 1806 of yacc.c  */
#line 2748 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->spcont= lex->spcont->push_context(LABEL_HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, (yyvsp[(2) - (4)].num),
                                      ctx->current_var_count());
            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[(2) - (4)].num) == SP_HANDLER_CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(empty_c_string, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 215:

/* Line 1806 of yacc.c  */
#line 2770 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == SP_HANDLER_CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx,
                                      ctx->current_var_count());
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx, 0);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= (yyvsp[(6) - (7)].num);
            lex->spcont->add_handlers((yyvsp[(6) - (7)].num));
          }
    break;

  case 216:

/* Line 1806 of yacc.c  */
#line 2802 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor(&(yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
            if (i == NULL ||
                sp->add_instr(i) ||
                ctx->push_cursor(&(yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 217:

/* Line 1806 of yacc.c  */
#line 2827 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD);
          }
    break;

  case 218:

/* Line 1806 of yacc.c  */
#line 2831 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 219:

/* Line 1806 of yacc.c  */
#line 2850 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_EXIT; }
    break;

  case 220:

/* Line 1806 of yacc.c  */
#line 2851 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_CONTINUE; }
    break;

  case 221:

/* Line 1806 of yacc.c  */
#line 2857 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 222:

/* Line 1806 of yacc.c  */
#line 2859 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 223:

/* Line 1806 of yacc.c  */
#line 2864 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->find_handler((yyvsp[(1) - (1)].spcondtype)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondtype));
              ctx->push_handler((yyvsp[(1) - (1)].spcondtype));
            }
          }
    break;

  case 224:

/* Line 1806 of yacc.c  */
#line 2887 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::number;
            (yyval.spcondtype)->mysqlerr= (yyvsp[(1) - (1)].ulong_num);
          }
    break;

  case 226:

/* Line 1806 of yacc.c  */
#line 2904 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { /* SQLSTATE */
            if (!sp_cond_check(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::state;
            memcpy((yyval.spcondtype)->sqlstate, (yyvsp[(3) - (3)].lex_str).str, SQLSTATE_LENGTH);
            (yyval.spcondtype)->sqlstate[SQLSTATE_LENGTH]= '\0';
          }
    break;

  case 227:

/* Line 1806 of yacc.c  */
#line 2920 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 228:

/* Line 1806 of yacc.c  */
#line 2921 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 229:

/* Line 1806 of yacc.c  */
#line 2926 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype);
          }
    break;

  case 230:

/* Line 1806 of yacc.c  */
#line 2930 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= Lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if ((yyval.spcondtype) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 231:

/* Line 1806 of yacc.c  */
#line 2939 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::warning;
          }
    break;

  case 232:

/* Line 1806 of yacc.c  */
#line 2946 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::notfound;
          }
    break;

  case 233:

/* Line 1806 of yacc.c  */
#line 2953 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::exception;
          }
    break;

  case 234:

/* Line 1806 of yacc.c  */
#line 2963 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_stmt= new (thd->mem_root) Signal_statement(lex, (yyvsp[(2) - (3)].spcondtype),
                                                      state->m_set_signal_info);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 235:

/* Line 1806 of yacc.c  */
#line 2978 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_cond_type_t *cond;
            if (lex->spcont == NULL)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            cond= lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if (cond == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_cond_type_t::state)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= cond;
          }
    break;

  case 236:

/* Line 1806 of yacc.c  */
#line 3001 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype); }
    break;

  case 237:

/* Line 1806 of yacc.c  */
#line 3006 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.spcondtype)= NULL; }
    break;

  case 238:

/* Line 1806 of yacc.c  */
#line 3008 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype); }
    break;

  case 239:

/* Line 1806 of yacc.c  */
#line 3013 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 241:

/* Line 1806 of yacc.c  */
#line 3021 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 242:

/* Line 1806 of yacc.c  */
#line 3030 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 243:

/* Line 1806 of yacc.c  */
#line 3049 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 244:

/* Line 1806 of yacc.c  */
#line 3051 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 245:

/* Line 1806 of yacc.c  */
#line 3069 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 246:

/* Line 1806 of yacc.c  */
#line 3075 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 247:

/* Line 1806 of yacc.c  */
#line 3077 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 248:

/* Line 1806 of yacc.c  */
#line 3079 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 249:

/* Line 1806 of yacc.c  */
#line 3081 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 250:

/* Line 1806 of yacc.c  */
#line 3083 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 251:

/* Line 1806 of yacc.c  */
#line 3085 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 252:

/* Line 1806 of yacc.c  */
#line 3087 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 253:

/* Line 1806 of yacc.c  */
#line 3089 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 254:

/* Line 1806 of yacc.c  */
#line 3091 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 255:

/* Line 1806 of yacc.c  */
#line 3093 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 256:

/* Line 1806 of yacc.c  */
#line 3095 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 257:

/* Line 1806 of yacc.c  */
#line 3097 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 258:

/* Line 1806 of yacc.c  */
#line 3102 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_stmt= new (thd->mem_root) Resignal_statement(lex, (yyvsp[(2) - (3)].spcondtype),
                                                      state->m_set_signal_info);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 259:

/* Line 1806 of yacc.c  */
#line 3117 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(1) - (1)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= 1;
          }
    break;

  case 260:

/* Line 1806 of yacc.c  */
#line 3132 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(3) - (3)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 261:

/* Line 1806 of yacc.c  */
#line 3149 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 262:

/* Line 1806 of yacc.c  */
#line 3150 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 276:

/* Line 1806 of yacc.c  */
#line 3171 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 277:

/* Line 1806 of yacc.c  */
#line 3173 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 278:

/* Line 1806 of yacc.c  */
#line 3177 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 279:

/* Line 1806 of yacc.c  */
#line 3186 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 280:

/* Line 1806 of yacc.c  */
#line 3234 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 281:

/* Line 1806 of yacc.c  */
#line 3236 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 282:

/* Line 1806 of yacc.c  */
#line 3262 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label((char *)"", lex->sphead->instructions());
          }
    break;

  case 283:

/* Line 1806 of yacc.c  */
#line 3268 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 284:

/* Line 1806 of yacc.c  */
#line 3277 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == SP_LAB_BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 285:

/* Line 1806 of yacc.c  */
#line 3330 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab || lab->type != SP_LAB_ITER)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 286:

/* Line 1806 of yacc.c  */
#line 3373 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 287:

/* Line 1806 of yacc.c  */
#line 3393 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(3) - (4)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 288:

/* Line 1806 of yacc.c  */
#line 3410 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 289:

/* Line 1806 of yacc.c  */
#line 3415 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 293:

/* Line 1806 of yacc.c  */
#line 3441 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 294:

/* Line 1806 of yacc.c  */
#line 3461 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(3) - (3)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 295:

/* Line 1806 of yacc.c  */
#line 3483 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 296:

/* Line 1806 of yacc.c  */
#line 3485 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
                sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 297:

/* Line 1806 of yacc.c  */
#line 3501 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label((char *)"", 0));
          }
    break;

  case 298:

/* Line 1806 of yacc.c  */
#line 3513 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 304:

/* Line 1806 of yacc.c  */
#line 3533 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 305:

/* Line 1806 of yacc.c  */
#line 3539 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 306:

/* Line 1806 of yacc.c  */
#line 3552 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 307:

/* Line 1806 of yacc.c  */
#line 3560 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 308:

/* Line 1806 of yacc.c  */
#line 3568 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 313:

/* Line 1806 of yacc.c  */
#line 3586 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 314:

/* Line 1806 of yacc.c  */
#line 3590 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 315:

/* Line 1806 of yacc.c  */
#line 3602 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 316:

/* Line 1806 of yacc.c  */
#line 3611 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 317:

/* Line 1806 of yacc.c  */
#line 3615 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 318:

/* Line 1806 of yacc.c  */
#line 3625 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 319:

/* Line 1806 of yacc.c  */
#line 3634 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 321:

/* Line 1806 of yacc.c  */
#line 3649 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                           lex->sphead->instructions());
              lab->type= SP_LAB_ITER;
            }
          }
    break;

  case 322:

/* Line 1806 of yacc.c  */
#line 3667 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 323:

/* Line 1806 of yacc.c  */
#line 3684 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 324:

/* Line 1806 of yacc.c  */
#line 3685 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 325:

/* Line 1806 of yacc.c  */
#line 3690 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                         lex->sphead->instructions());
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 326:

/* Line 1806 of yacc.c  */
#line 3706 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 327:

/* Line 1806 of yacc.c  */
#line 3722 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->push_label((char *)"", ip);
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 328:

/* Line 1806 of yacc.c  */
#line 3729 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 329:

/* Line 1806 of yacc.c  */
#line 3737 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(LABEL_DEFAULT_SCOPE);
          }
    break;

  case 330:

/* Line 1806 of yacc.c  */
#line 3746 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 331:

/* Line 1806 of yacc.c  */
#line 3774 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 332:

/* Line 1806 of yacc.c  */
#line 3784 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 333:

/* Line 1806 of yacc.c  */
#line 3786 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 334:

/* Line 1806 of yacc.c  */
#line 3802 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 335:

/* Line 1806 of yacc.c  */
#line 3813 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 336:

/* Line 1806 of yacc.c  */
#line 3815 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 337:

/* Line 1806 of yacc.c  */
#line 3834 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 338:

/* Line 1806 of yacc.c  */
#line 3836 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 339:

/* Line 1806 of yacc.c  */
#line 3841 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 340:

/* Line 1806 of yacc.c  */
#line 3843 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 341:

/* Line 1806 of yacc.c  */
#line 3845 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 345:

/* Line 1806 of yacc.c  */
#line 3879 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 346:

/* Line 1806 of yacc.c  */
#line 3881 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 347:

/* Line 1806 of yacc.c  */
#line 3891 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 348:

/* Line 1806 of yacc.c  */
#line 3897 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 353:

/* Line 1806 of yacc.c  */
#line 3920 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 400:

/* Line 1806 of yacc.c  */
#line 4014 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 401:

/* Line 1806 of yacc.c  */
#line 4022 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 402:

/* Line 1806 of yacc.c  */
#line 4030 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 403:

/* Line 1806 of yacc.c  */
#line 4038 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 404:

/* Line 1806 of yacc.c  */
#line 4050 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 405:

/* Line 1806 of yacc.c  */
#line 4062 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 406:

/* Line 1806 of yacc.c  */
#line 4067 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 407:

/* Line 1806 of yacc.c  */
#line 4072 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 408:

/* Line 1806 of yacc.c  */
#line 4080 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 409:

/* Line 1806 of yacc.c  */
#line 4088 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 410:

/* Line 1806 of yacc.c  */
#line 4096 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 411:

/* Line 1806 of yacc.c  */
#line 4104 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 412:

/* Line 1806 of yacc.c  */
#line 4112 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 413:

/* Line 1806 of yacc.c  */
#line 4120 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 414:

/* Line 1806 of yacc.c  */
#line 4128 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 415:

/* Line 1806 of yacc.c  */
#line 4141 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 416:

/* Line 1806 of yacc.c  */
#line 4154 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 419:

/* Line 1806 of yacc.c  */
#line 4173 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 420:

/* Line 1806 of yacc.c  */
#line 4178 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 421:

/* Line 1806 of yacc.c  */
#line 4190 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulonglong_number);}
    break;

  case 422:

/* Line 1806 of yacc.c  */
#line 4192 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 423:

/* Line 1806 of yacc.c  */
#line 4242 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 424:

/* Line 1806 of yacc.c  */
#line 4245 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 425:

/* Line 1806 of yacc.c  */
#line 4247 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 426:

/* Line 1806 of yacc.c  */
#line 4262 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 427:

/* Line 1806 of yacc.c  */
#line 4281 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 428:

/* Line 1806 of yacc.c  */
#line 4284 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 429:

/* Line 1806 of yacc.c  */
#line 4285 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 430:

/* Line 1806 of yacc.c  */
#line 4289 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 431:

/* Line 1806 of yacc.c  */
#line 4291 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 432:

/* Line 1806 of yacc.c  */
#line 4292 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 433:

/* Line 1806 of yacc.c  */
#line 4294 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 434:

/* Line 1806 of yacc.c  */
#line 4295 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 435:

/* Line 1806 of yacc.c  */
#line 4300 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 436:

/* Line 1806 of yacc.c  */
#line 4336 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 438:

/* Line 1806 of yacc.c  */
#line 4342 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= ALTER_PARTITION;
            }
          }
    break;

  case 440:

/* Line 1806 of yacc.c  */
#line 4360 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 441:

/* Line 1806 of yacc.c  */
#line 4379 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 442:

/* Line 1806 of yacc.c  */
#line 4391 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 444:

/* Line 1806 of yacc.c  */
#line 4400 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 445:

/* Line 1806 of yacc.c  */
#line 4407 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 446:

/* Line 1806 of yacc.c  */
#line 4408 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 447:

/* Line 1806 of yacc.c  */
#line 4410 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 448:

/* Line 1806 of yacc.c  */
#line 4412 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 449:

/* Line 1806 of yacc.c  */
#line 4414 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 450:

/* Line 1806 of yacc.c  */
#line 4416 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 451:

/* Line 1806 of yacc.c  */
#line 4420 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 452:

/* Line 1806 of yacc.c  */
#line 4422 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 453:

/* Line 1806 of yacc.c  */
#line 4427 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_NONE;}
    break;

  case 454:

/* Line 1806 of yacc.c  */
#line 4429 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            switch ((yyvsp[(3) - (3)].ulong_num)) {
            case 1:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_51;
              break;
            case 2:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_55;
              break;
            default:
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 455:

/* Line 1806 of yacc.c  */
#line 4445 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 456:

/* Line 1806 of yacc.c  */
#line 4446 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 457:

/* Line 1806 of yacc.c  */
#line 4450 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 458:

/* Line 1806 of yacc.c  */
#line 4451 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 459:

/* Line 1806 of yacc.c  */
#line 4456 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 460:

/* Line 1806 of yacc.c  */
#line 4475 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 461:

/* Line 1806 of yacc.c  */
#line 4485 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 462:

/* Line 1806 of yacc.c  */
#line 4496 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 463:

/* Line 1806 of yacc.c  */
#line 4504 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 464:

/* Line 1806 of yacc.c  */
#line 4506 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 465:

/* Line 1806 of yacc.c  */
#line 4521 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 466:

/* Line 1806 of yacc.c  */
#line 4523 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 467:

/* Line 1806 of yacc.c  */
#line 4524 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 468:

/* Line 1806 of yacc.c  */
#line 4527 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 469:

/* Line 1806 of yacc.c  */
#line 4532 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 470:

/* Line 1806 of yacc.c  */
#line 4536 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 471:

/* Line 1806 of yacc.c  */
#line 4537 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 472:

/* Line 1806 of yacc.c  */
#line 4542 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 473:

/* Line 1806 of yacc.c  */
#line 4560 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 474:

/* Line 1806 of yacc.c  */
#line 4575 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 475:

/* Line 1806 of yacc.c  */
#line 4577 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 476:

/* Line 1806 of yacc.c  */
#line 4592 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 477:

/* Line 1806 of yacc.c  */
#line 4608 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 478:

/* Line 1806 of yacc.c  */
#line 4629 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 479:

/* Line 1806 of yacc.c  */
#line 4630 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 480:

/* Line 1806 of yacc.c  */
#line 4635 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 481:

/* Line 1806 of yacc.c  */
#line 4654 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 482:

/* Line 1806 of yacc.c  */
#line 4659 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 483:

/* Line 1806 of yacc.c  */
#line 4668 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 484:

/* Line 1806 of yacc.c  */
#line 4690 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 485:

/* Line 1806 of yacc.c  */
#line 4705 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 486:

/* Line 1806 of yacc.c  */
#line 4707 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 487:

/* Line 1806 of yacc.c  */
#line 4722 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 488:

/* Line 1806 of yacc.c  */
#line 4727 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 489:

/* Line 1806 of yacc.c  */
#line 4748 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 490:

/* Line 1806 of yacc.c  */
#line 4753 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 491:

/* Line 1806 of yacc.c  */
#line 4782 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 492:

/* Line 1806 of yacc.c  */
#line 4793 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 493:

/* Line 1806 of yacc.c  */
#line 4794 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 494:

/* Line 1806 of yacc.c  */
#line 4799 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 495:

/* Line 1806 of yacc.c  */
#line 4810 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 496:

/* Line 1806 of yacc.c  */
#line 4812 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 497:

/* Line 1806 of yacc.c  */
#line 4835 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 498:

/* Line 1806 of yacc.c  */
#line 4836 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 499:

/* Line 1806 of yacc.c  */
#line 4841 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 500:

/* Line 1806 of yacc.c  */
#line 4854 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(YYTHD, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 501:

/* Line 1806 of yacc.c  */
#line 4874 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 502:

/* Line 1806 of yacc.c  */
#line 4888 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 503:

/* Line 1806 of yacc.c  */
#line 4913 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 504:

/* Line 1806 of yacc.c  */
#line 4914 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 505:

/* Line 1806 of yacc.c  */
#line 4919 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 506:

/* Line 1806 of yacc.c  */
#line 4951 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 507:

/* Line 1806 of yacc.c  */
#line 4956 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 508:

/* Line 1806 of yacc.c  */
#line 4960 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 509:

/* Line 1806 of yacc.c  */
#line 4961 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 510:

/* Line 1806 of yacc.c  */
#line 4965 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 511:

/* Line 1806 of yacc.c  */
#line 4966 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 512:

/* Line 1806 of yacc.c  */
#line 4971 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 513:

/* Line 1806 of yacc.c  */
#line 4973 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 514:

/* Line 1806 of yacc.c  */
#line 4979 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 515:

/* Line 1806 of yacc.c  */
#line 4981 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 516:

/* Line 1806 of yacc.c  */
#line 4983 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 517:

/* Line 1806 of yacc.c  */
#line 4985 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 518:

/* Line 1806 of yacc.c  */
#line 4987 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 519:

/* Line 1806 of yacc.c  */
#line 4989 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 520:

/* Line 1806 of yacc.c  */
#line 4998 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 521:

/* Line 1806 of yacc.c  */
#line 5013 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 522:

/* Line 1806 of yacc.c  */
#line 5017 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 523:

/* Line 1806 of yacc.c  */
#line 5027 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 524:

/* Line 1806 of yacc.c  */
#line 5028 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 525:

/* Line 1806 of yacc.c  */
#line 5032 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 526:

/* Line 1806 of yacc.c  */
#line 5033 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 527:

/* Line 1806 of yacc.c  */
#line 5037 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 528:

/* Line 1806 of yacc.c  */
#line 5038 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 529:

/* Line 1806 of yacc.c  */
#line 5042 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 530:

/* Line 1806 of yacc.c  */
#line 5043 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 531:

/* Line 1806 of yacc.c  */
#line 5047 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 532:

/* Line 1806 of yacc.c  */
#line 5048 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 533:

/* Line 1806 of yacc.c  */
#line 5052 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 534:

/* Line 1806 of yacc.c  */
#line 5053 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 535:

/* Line 1806 of yacc.c  */
#line 5057 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 536:

/* Line 1806 of yacc.c  */
#line 5061 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 537:

/* Line 1806 of yacc.c  */
#line 5062 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 545:

/* Line 1806 of yacc.c  */
#line 5083 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 546:

/* Line 1806 of yacc.c  */
#line 5088 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 547:

/* Line 1806 of yacc.c  */
#line 5093 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 548:

/* Line 1806 of yacc.c  */
#line 5098 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 549:

/* Line 1806 of yacc.c  */
#line 5103 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 550:

/* Line 1806 of yacc.c  */
#line 5108 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 551:

/* Line 1806 of yacc.c  */
#line 5113 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 552:

/* Line 1806 of yacc.c  */
#line 5118 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 553:

/* Line 1806 of yacc.c  */
#line 5133 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 554:

/* Line 1806 of yacc.c  */
#line 5139 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 555:

/* Line 1806 of yacc.c  */
#line 5144 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 556:

/* Line 1806 of yacc.c  */
#line 5149 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 557:

/* Line 1806 of yacc.c  */
#line 5154 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 558:

/* Line 1806 of yacc.c  */
#line 5159 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 559:

/* Line 1806 of yacc.c  */
#line 5163 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 562:

/* Line 1806 of yacc.c  */
#line 5187 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 563:

/* Line 1806 of yacc.c  */
#line 5192 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 564:

/* Line 1806 of yacc.c  */
#line 5197 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 565:

/* Line 1806 of yacc.c  */
#line 5202 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 566:

/* Line 1806 of yacc.c  */
#line 5204 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 567:

/* Line 1806 of yacc.c  */
#line 5206 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 568:

/* Line 1806 of yacc.c  */
#line 5208 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 569:

/* Line 1806 of yacc.c  */
#line 5214 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 570:

/* Line 1806 of yacc.c  */
#line 5222 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 571:

/* Line 1806 of yacc.c  */
#line 5240 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 572:

/* Line 1806 of yacc.c  */
#line 5257 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (YYTHD->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 573:

/* Line 1806 of yacc.c  */
#line 5280 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 574:

/* Line 1806 of yacc.c  */
#line 5293 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 575:

/* Line 1806 of yacc.c  */
#line 5294 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 576:

/* Line 1806 of yacc.c  */
#line 5295 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 577:

/* Line 1806 of yacc.c  */
#line 5296 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 578:

/* Line 1806 of yacc.c  */
#line 5297 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 579:

/* Line 1806 of yacc.c  */
#line 5298 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 580:

/* Line 1806 of yacc.c  */
#line 5302 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 581:

/* Line 1806 of yacc.c  */
#line 5303 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 582:

/* Line 1806 of yacc.c  */
#line 5304 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 583:

/* Line 1806 of yacc.c  */
#line 5308 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 585:

/* Line 1806 of yacc.c  */
#line 5313 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 586:

/* Line 1806 of yacc.c  */
#line 5314 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 587:

/* Line 1806 of yacc.c  */
#line 5315 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 588:

/* Line 1806 of yacc.c  */
#line 5316 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 589:

/* Line 1806 of yacc.c  */
#line 5322 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 595:

/* Line 1806 of yacc.c  */
#line 5340 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 596:

/* Line 1806 of yacc.c  */
#line 5347 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (7)].key_type), (yyvsp[(2) - (7)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 597:

/* Line 1806 of yacc.c  */
#line 5353 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 598:

/* Line 1806 of yacc.c  */
#line 5359 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 599:

/* Line 1806 of yacc.c  */
#line 5365 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (8)].key_type), (yyvsp[(3) - (8)].lex_str).str ? (yyvsp[(3) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 600:

/* Line 1806 of yacc.c  */
#line 5370 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table),
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= ALTER_FOREIGN_KEY;
          }
    break;

  case 601:

/* Line 1806 of yacc.c  */
#line 5388 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 605:

/* Line 1806 of yacc.c  */
#line 5403 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 606:

/* Line 1806 of yacc.c  */
#line 5404 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 607:

/* Line 1806 of yacc.c  */
#line 5408 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 608:

/* Line 1806 of yacc.c  */
#line 5413 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
          }
    break;

  case 609:

/* Line 1806 of yacc.c  */
#line 5422 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (4)].lex_str), (enum enum_field_types) (yyvsp[(3) - (4)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 610:

/* Line 1806 of yacc.c  */
#line 5435 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 611:

/* Line 1806 of yacc.c  */
#line 5436 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 612:

/* Line 1806 of yacc.c  */
#line 5437 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 613:

/* Line 1806 of yacc.c  */
#line 5439 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 614:

/* Line 1806 of yacc.c  */
#line 5444 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 615:

/* Line 1806 of yacc.c  */
#line 5448 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 616:

/* Line 1806 of yacc.c  */
#line 5453 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 617:

/* Line 1806 of yacc.c  */
#line 5458 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 618:

/* Line 1806 of yacc.c  */
#line 5462 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 619:

/* Line 1806 of yacc.c  */
#line 5467 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 620:

/* Line 1806 of yacc.c  */
#line 5472 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 621:

/* Line 1806 of yacc.c  */
#line 5478 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 622:

/* Line 1806 of yacc.c  */
#line 5483 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 623:

/* Line 1806 of yacc.c  */
#line 5489 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 624:

/* Line 1806 of yacc.c  */
#line 5493 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 625:

/* Line 1806 of yacc.c  */
#line 5498 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 626:

/* Line 1806 of yacc.c  */
#line 5503 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER(ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 627:

/* Line 1806 of yacc.c  */
#line 5521 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 628:

/* Line 1806 of yacc.c  */
#line 5523 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 629:

/* Line 1806 of yacc.c  */
#line 5525 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 630:

/* Line 1806 of yacc.c  */
#line 5538 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 631:

/* Line 1806 of yacc.c  */
#line 5540 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 632:

/* Line 1806 of yacc.c  */
#line 5545 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 633:

/* Line 1806 of yacc.c  */
#line 5550 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 634:

/* Line 1806 of yacc.c  */
#line 5562 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 635:

/* Line 1806 of yacc.c  */
#line 5567 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 636:

/* Line 1806 of yacc.c  */
#line 5572 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 637:

/* Line 1806 of yacc.c  */
#line 5577 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 638:

/* Line 1806 of yacc.c  */
#line 5579 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 639:

/* Line 1806 of yacc.c  */
#line 5581 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 640:

/* Line 1806 of yacc.c  */
#line 5583 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 641:

/* Line 1806 of yacc.c  */
#line 5585 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 642:

/* Line 1806 of yacc.c  */
#line 5587 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 643:

/* Line 1806 of yacc.c  */
#line 5589 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 644:

/* Line 1806 of yacc.c  */
#line 5591 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 645:

/* Line 1806 of yacc.c  */
#line 5593 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 646:

/* Line 1806 of yacc.c  */
#line 5595 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 647:

/* Line 1806 of yacc.c  */
#line 5597 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 648:

/* Line 1806 of yacc.c  */
#line 5599 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 649:

/* Line 1806 of yacc.c  */
#line 5601 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 650:

/* Line 1806 of yacc.c  */
#line 5603 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 651:

/* Line 1806 of yacc.c  */
#line 5611 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 652:

/* Line 1806 of yacc.c  */
#line 5612 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 653:

/* Line 1806 of yacc.c  */
#line 5614 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->length= const_cast<char*>(STRINGIFY_ARG
                                           (MAX_LEN_GEOM_POINT_FIELD));
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 654:

/* Line 1806 of yacc.c  */
#line 5619 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 655:

/* Line 1806 of yacc.c  */
#line 5620 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 656:

/* Line 1806 of yacc.c  */
#line 5621 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 657:

/* Line 1806 of yacc.c  */
#line 5622 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 658:

/* Line 1806 of yacc.c  */
#line 5623 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 659:

/* Line 1806 of yacc.c  */
#line 5627 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 660:

/* Line 1806 of yacc.c  */
#line 5631 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 661:

/* Line 1806 of yacc.c  */
#line 5632 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 662:

/* Line 1806 of yacc.c  */
#line 5636 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 663:

/* Line 1806 of yacc.c  */
#line 5637 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 664:

/* Line 1806 of yacc.c  */
#line 5641 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 665:

/* Line 1806 of yacc.c  */
#line 5642 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 666:

/* Line 1806 of yacc.c  */
#line 5643 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 667:

/* Line 1806 of yacc.c  */
#line 5644 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 668:

/* Line 1806 of yacc.c  */
#line 5645 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 669:

/* Line 1806 of yacc.c  */
#line 5649 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 670:

/* Line 1806 of yacc.c  */
#line 5650 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 671:

/* Line 1806 of yacc.c  */
#line 5651 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 672:

/* Line 1806 of yacc.c  */
#line 5652 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 673:

/* Line 1806 of yacc.c  */
#line 5653 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 674:

/* Line 1806 of yacc.c  */
#line 5658 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 675:

/* Line 1806 of yacc.c  */
#line 5663 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 676:

/* Line 1806 of yacc.c  */
#line 5665 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 677:

/* Line 1806 of yacc.c  */
#line 5670 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 678:

/* Line 1806 of yacc.c  */
#line 5672 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 679:

/* Line 1806 of yacc.c  */
#line 5674 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 680:

/* Line 1806 of yacc.c  */
#line 5679 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 681:

/* Line 1806 of yacc.c  */
#line 5687 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 682:

/* Line 1806 of yacc.c  */
#line 5688 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 683:

/* Line 1806 of yacc.c  */
#line 5692 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 684:

/* Line 1806 of yacc.c  */
#line 5693 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 685:

/* Line 1806 of yacc.c  */
#line 5697 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 686:

/* Line 1806 of yacc.c  */
#line 5698 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 687:

/* Line 1806 of yacc.c  */
#line 5699 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 688:

/* Line 1806 of yacc.c  */
#line 5703 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 689:

/* Line 1806 of yacc.c  */
#line 5704 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 690:

/* Line 1806 of yacc.c  */
#line 5705 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 691:

/* Line 1806 of yacc.c  */
#line 5706 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 692:

/* Line 1806 of yacc.c  */
#line 5709 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 693:

/* Line 1806 of yacc.c  */
#line 5710 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { }
    break;

  case 694:

/* Line 1806 of yacc.c  */
#line 5714 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 695:

/* Line 1806 of yacc.c  */
#line 5715 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 696:

/* Line 1806 of yacc.c  */
#line 5719 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 697:

/* Line 1806 of yacc.c  */
#line 5720 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 698:

/* Line 1806 of yacc.c  */
#line 5724 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 700:

/* Line 1806 of yacc.c  */
#line 5729 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 701:

/* Line 1806 of yacc.c  */
#line 5730 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 702:

/* Line 1806 of yacc.c  */
#line 5731 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 703:

/* Line 1806 of yacc.c  */
#line 5733 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local();
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 704:

/* Line 1806 of yacc.c  */
#line 5739 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 705:

/* Line 1806 of yacc.c  */
#line 5741 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 706:

/* Line 1806 of yacc.c  */
#line 5747 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 707:

/* Line 1806 of yacc.c  */
#line 5753 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 708:

/* Line 1806 of yacc.c  */
#line 5759 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX; 
          }
    break;

  case 709:

/* Line 1806 of yacc.c  */
#line 5764 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 710:

/* Line 1806 of yacc.c  */
#line 5766 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 711:

/* Line 1806 of yacc.c  */
#line 5783 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 712:

/* Line 1806 of yacc.c  */
#line 5804 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 713:

/* Line 1806 of yacc.c  */
#line 5810 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 714:

/* Line 1806 of yacc.c  */
#line 5814 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 715:

/* Line 1806 of yacc.c  */
#line 5815 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 716:

/* Line 1806 of yacc.c  */
#line 5820 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 717:

/* Line 1806 of yacc.c  */
#line 5827 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 718:

/* Line 1806 of yacc.c  */
#line 5831 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 719:

/* Line 1806 of yacc.c  */
#line 5832 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 720:

/* Line 1806 of yacc.c  */
#line 5836 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 721:

/* Line 1806 of yacc.c  */
#line 5837 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 722:

/* Line 1806 of yacc.c  */
#line 5842 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 723:

/* Line 1806 of yacc.c  */
#line 5850 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 724:

/* Line 1806 of yacc.c  */
#line 5854 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 725:

/* Line 1806 of yacc.c  */
#line 5855 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 726:

/* Line 1806 of yacc.c  */
#line 5860 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_name((yyvsp[(1) - (1)].lex_str).str,MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 727:

/* Line 1806 of yacc.c  */
#line 5870 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 728:

/* Line 1806 of yacc.c  */
#line 5871 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 729:

/* Line 1806 of yacc.c  */
#line 5875 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 730:

/* Line 1806 of yacc.c  */
#line 5876 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 731:

/* Line 1806 of yacc.c  */
#line 5880 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 732:

/* Line 1806 of yacc.c  */
#line 5881 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 733:

/* Line 1806 of yacc.c  */
#line 5886 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 734:

/* Line 1806 of yacc.c  */
#line 5888 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 735:

/* Line 1806 of yacc.c  */
#line 5892 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 736:

/* Line 1806 of yacc.c  */
#line 5899 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 737:

/* Line 1806 of yacc.c  */
#line 5908 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 738:

/* Line 1806 of yacc.c  */
#line 5916 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 739:

/* Line 1806 of yacc.c  */
#line 5926 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 742:

/* Line 1806 of yacc.c  */
#line 5929 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 743:

/* Line 1806 of yacc.c  */
#line 5930 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 744:

/* Line 1806 of yacc.c  */
#line 5932 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 745:

/* Line 1806 of yacc.c  */
#line 5937 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 746:

/* Line 1806 of yacc.c  */
#line 5944 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { }
    break;

  case 747:

/* Line 1806 of yacc.c  */
#line 5945 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 750:

/* Line 1806 of yacc.c  */
#line 5960 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 751:

/* Line 1806 of yacc.c  */
#line 5967 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 753:

/* Line 1806 of yacc.c  */
#line 5973 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 754:

/* Line 1806 of yacc.c  */
#line 5980 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 755:

/* Line 1806 of yacc.c  */
#line 5992 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 756:

/* Line 1806 of yacc.c  */
#line 5994 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 757:

/* Line 1806 of yacc.c  */
#line 5996 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 758:

/* Line 1806 of yacc.c  */
#line 5998 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 759:

/* Line 1806 of yacc.c  */
#line 6003 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 760:

/* Line 1806 of yacc.c  */
#line 6009 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 761:

/* Line 1806 of yacc.c  */
#line 6015 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 762:

/* Line 1806 of yacc.c  */
#line 6022 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 763:

/* Line 1806 of yacc.c  */
#line 6029 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 764:

/* Line 1806 of yacc.c  */
#line 6037 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 765:

/* Line 1806 of yacc.c  */
#line 6038 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 766:

/* Line 1806 of yacc.c  */
#line 6039 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 767:

/* Line 1806 of yacc.c  */
#line 6040 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 768:

/* Line 1806 of yacc.c  */
#line 6041 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 769:

/* Line 1806 of yacc.c  */
#line 6045 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 770:

/* Line 1806 of yacc.c  */
#line 6049 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 771:

/* Line 1806 of yacc.c  */
#line 6050 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 772:

/* Line 1806 of yacc.c  */
#line 6054 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 773:

/* Line 1806 of yacc.c  */
#line 6055 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 774:

/* Line 1806 of yacc.c  */
#line 6059 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 776:

/* Line 1806 of yacc.c  */
#line 6064 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 777:

/* Line 1806 of yacc.c  */
#line 6065 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 778:

/* Line 1806 of yacc.c  */
#line 6066 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 779:

/* Line 1806 of yacc.c  */
#line 6070 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 780:

/* Line 1806 of yacc.c  */
#line 6071 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 781:

/* Line 1806 of yacc.c  */
#line 6075 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 782:

/* Line 1806 of yacc.c  */
#line 6080 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 783:

/* Line 1806 of yacc.c  */
#line 6092 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 786:

/* Line 1806 of yacc.c  */
#line 6109 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 788:

/* Line 1806 of yacc.c  */
#line 6114 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 790:

/* Line 1806 of yacc.c  */
#line 6119 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 798:

/* Line 1806 of yacc.c  */
#line 6139 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 799:

/* Line 1806 of yacc.c  */
#line 6140 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 800:

/* Line 1806 of yacc.c  */
#line 6145 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 801:

/* Line 1806 of yacc.c  */
#line 6146 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 806:

/* Line 1806 of yacc.c  */
#line 6161 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 807:

/* Line 1806 of yacc.c  */
#line 6173 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 808:

/* Line 1806 of yacc.c  */
#line 6174 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 809:

/* Line 1806 of yacc.c  */
#line 6175 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 810:

/* Line 1806 of yacc.c  */
#line 6179 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 811:

/* Line 1806 of yacc.c  */
#line 6180 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 812:

/* Line 1806 of yacc.c  */
#line 6185 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 813:

/* Line 1806 of yacc.c  */
#line 6191 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 814:

/* Line 1806 of yacc.c  */
#line 6204 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 815:

/* Line 1806 of yacc.c  */
#line 6205 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 816:

/* Line 1806 of yacc.c  */
#line 6209 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 817:

/* Line 1806 of yacc.c  */
#line 6210 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 818:

/* Line 1806 of yacc.c  */
#line 6214 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 819:

/* Line 1806 of yacc.c  */
#line 6215 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 820:

/* Line 1806 of yacc.c  */
#line 6223 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
            lex->create_last_non_select_table= lex->last_table();
            DBUG_ASSERT(!lex->m_stmt);
          }
    break;

  case 821:

/* Line 1806 of yacc.c  */
#line 6249 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (!lex->m_stmt)
            {
              /* Create a generic ALTER TABLE statment. */
              lex->m_stmt= new (thd->mem_root) Alter_table_statement(lex);
              if (lex->m_stmt == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 822:

/* Line 1806 of yacc.c  */
#line 6261 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 823:

/* Line 1806 of yacc.c  */
#line 6266 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 824:

/* Line 1806 of yacc.c  */
#line 6275 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 825:

/* Line 1806 of yacc.c  */
#line 6286 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 826:

/* Line 1806 of yacc.c  */
#line 6297 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 827:

/* Line 1806 of yacc.c  */
#line 6304 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 828:

/* Line 1806 of yacc.c  */
#line 6315 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 829:

/* Line 1806 of yacc.c  */
#line 6322 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 830:

/* Line 1806 of yacc.c  */
#line 6333 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 831:

/* Line 1806 of yacc.c  */
#line 6340 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 832:

/* Line 1806 of yacc.c  */
#line 6352 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 833:

/* Line 1806 of yacc.c  */
#line 6354 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(5) - (5)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
#ifdef WITH_WSREP
            Lex->stmt_definition_begin= (yyvsp[(3) - (5)].simple_string);
#endif
          }
    break;

  case 834:

/* Line 1806 of yacc.c  */
#line 6377 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(7) - (11)].num) || (yyvsp[(8) - (11)].num) || (yyvsp[(9) - (11)].num) || (yyvsp[(10) - (11)].num) || (yyvsp[(11) - (11)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
#ifdef WITH_WSREP
            Lex->stmt_definition_end= (char*)YYLIP->get_cpp_ptr();
#endif
          }
    break;

  case 835:

/* Line 1806 of yacc.c  */
#line 6393 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 836:

/* Line 1806 of yacc.c  */
#line 6398 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 837:

/* Line 1806 of yacc.c  */
#line 6403 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 838:

/* Line 1806 of yacc.c  */
#line 6408 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 839:

/* Line 1806 of yacc.c  */
#line 6413 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 840:

/* Line 1806 of yacc.c  */
#line 6422 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 841:

/* Line 1806 of yacc.c  */
#line 6423 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 842:

/* Line 1806 of yacc.c  */
#line 6424 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 843:

/* Line 1806 of yacc.c  */
#line 6425 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 844:

/* Line 1806 of yacc.c  */
#line 6429 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 845:

/* Line 1806 of yacc.c  */
#line 6431 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 846:

/* Line 1806 of yacc.c  */
#line 6442 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 847:

/* Line 1806 of yacc.c  */
#line 6443 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 848:

/* Line 1806 of yacc.c  */
#line 6447 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 849:

/* Line 1806 of yacc.c  */
#line 6448 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 851:

/* Line 1806 of yacc.c  */
#line 6453 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->alter_info.tablespace_op= DISCARD_TABLESPACE; }
    break;

  case 852:

/* Line 1806 of yacc.c  */
#line 6454 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->alter_info.tablespace_op= IMPORT_TABLESPACE; }
    break;

  case 858:

/* Line 1806 of yacc.c  */
#line 6471 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_PARTITION;
          }
    break;

  case 859:

/* Line 1806 of yacc.c  */
#line 6476 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 860:

/* Line 1806 of yacc.c  */
#line 6483 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_optimize_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 862:

/* Line 1806 of yacc.c  */
#line 6497 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_analyze_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 863:

/* Line 1806 of yacc.c  */
#line 6509 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_check_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 865:

/* Line 1806 of yacc.c  */
#line 6522 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_repair_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 867:

/* Line 1806 of yacc.c  */
#line 6535 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 868:

/* Line 1806 of yacc.c  */
#line 6542 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_truncate_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 870:

/* Line 1806 of yacc.c  */
#line 6557 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 871:

/* Line 1806 of yacc.c  */
#line 6564 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ALL_PARTITION;
          }
    break;

  case 873:

/* Line 1806 of yacc.c  */
#line 6572 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 874:

/* Line 1806 of yacc.c  */
#line 6584 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 876:

/* Line 1806 of yacc.c  */
#line 6590 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 877:

/* Line 1806 of yacc.c  */
#line 6595 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 878:

/* Line 1806 of yacc.c  */
#line 6602 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 880:

/* Line 1806 of yacc.c  */
#line 6617 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_TABLE_REORG;
          }
    break;

  case 881:

/* Line 1806 of yacc.c  */
#line 6621 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 882:

/* Line 1806 of yacc.c  */
#line 6625 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 883:

/* Line 1806 of yacc.c  */
#line 6632 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 884:

/* Line 1806 of yacc.c  */
#line 6633 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 885:

/* Line 1806 of yacc.c  */
#line 6638 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 888:

/* Line 1806 of yacc.c  */
#line 6658 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= ALTER_ADD_COLUMN;
          }
    break;

  case 889:

/* Line 1806 of yacc.c  */
#line 6667 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 890:

/* Line 1806 of yacc.c  */
#line 6671 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 891:

/* Line 1806 of yacc.c  */
#line 6676 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_COLUMN | ALTER_ADD_INDEX;
          }
    break;

  case 892:

/* Line 1806 of yacc.c  */
#line 6680 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 893:

/* Line 1806 of yacc.c  */
#line 6686 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 894:

/* Line 1806 of yacc.c  */
#line 6690 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 895:

/* Line 1806 of yacc.c  */
#line 6699 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 896:

/* Line 1806 of yacc.c  */
#line 6711 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 897:

/* Line 1806 of yacc.c  */
#line 6715 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_COLUMN;
          }
    break;

  case 898:

/* Line 1806 of yacc.c  */
#line 6724 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_INDEX | ALTER_FOREIGN_KEY;
          }
    break;

  case 899:

/* Line 1806 of yacc.c  */
#line 6728 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 900:

/* Line 1806 of yacc.c  */
#line 6737 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 901:

/* Line 1806 of yacc.c  */
#line 6746 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= DISABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 902:

/* Line 1806 of yacc.c  */
#line 6752 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= ENABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 903:

/* Line 1806 of yacc.c  */
#line 6758 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 904:

/* Line 1806 of yacc.c  */
#line 6767 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 905:

/* Line 1806 of yacc.c  */
#line 6776 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= ALTER_RENAME;
          }
    break;

  case 906:

/* Line 1806 of yacc.c  */
#line 6795 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= ALTER_CONVERT;
          }
    break;

  case 907:

/* Line 1806 of yacc.c  */
#line 6816 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 908:

/* Line 1806 of yacc.c  */
#line 6826 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_RECREATE;
          }
    break;

  case 909:

/* Line 1806 of yacc.c  */
#line 6830 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_ORDER;
          }
    break;

  case 910:

/* Line 1806 of yacc.c  */
#line 6837 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 911:

/* Line 1806 of yacc.c  */
#line 6838 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 912:

/* Line 1806 of yacc.c  */
#line 6842 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 913:

/* Line 1806 of yacc.c  */
#line 6843 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 914:

/* Line 1806 of yacc.c  */
#line 6847 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 915:

/* Line 1806 of yacc.c  */
#line 6848 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 916:

/* Line 1806 of yacc.c  */
#line 6849 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 917:

/* Line 1806 of yacc.c  */
#line 6853 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 918:

/* Line 1806 of yacc.c  */
#line 6854 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { store_position_for_column((yyvsp[(2) - (2)].lex_str).str); }
    break;

  case 919:

/* Line 1806 of yacc.c  */
#line 6855 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { store_position_for_column(first_keyword); }
    break;

  case 920:

/* Line 1806 of yacc.c  */
#line 6859 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 921:

/* Line 1806 of yacc.c  */
#line 6860 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 922:

/* Line 1806 of yacc.c  */
#line 6861 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 923:

/* Line 1806 of yacc.c  */
#line 6862 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 924:

/* Line 1806 of yacc.c  */
#line 6871 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            bzero((char*) &lex->mi, sizeof(lex->mi));
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 925:

/* Line 1806 of yacc.c  */
#line 6880 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 926:

/* Line 1806 of yacc.c  */
#line 6882 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 927:

/* Line 1806 of yacc.c  */
#line 6889 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            bzero((char*) &lex->mi, sizeof(lex->mi));
          }
    break;

  case 928:

/* Line 1806 of yacc.c  */
#line 6897 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 929:

/* Line 1806 of yacc.c  */
#line 6899 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
          }
    break;

  case 930:

/* Line 1806 of yacc.c  */
#line 6908 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 931:

/* Line 1806 of yacc.c  */
#line 6916 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 932:

/* Line 1806 of yacc.c  */
#line 6918 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 933:

/* Line 1806 of yacc.c  */
#line 6924 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 934:

/* Line 1806 of yacc.c  */
#line 6926 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 937:

/* Line 1806 of yacc.c  */
#line 6935 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 938:

/* Line 1806 of yacc.c  */
#line 6936 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 939:

/* Line 1806 of yacc.c  */
#line 6937 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 940:

/* Line 1806 of yacc.c  */
#line 6941 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 941:

/* Line 1806 of yacc.c  */
#line 6943 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 944:

/* Line 1806 of yacc.c  */
#line 6964 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 945:

/* Line 1806 of yacc.c  */
#line 6971 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 946:

/* Line 1806 of yacc.c  */
#line 6975 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 947:

/* Line 1806 of yacc.c  */
#line 6976 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 948:

/* Line 1806 of yacc.c  */
#line 6977 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 949:

/* Line 1806 of yacc.c  */
#line 6982 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 950:

/* Line 1806 of yacc.c  */
#line 6992 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Repair_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 951:

/* Line 1806 of yacc.c  */
#line 7003 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 952:

/* Line 1806 of yacc.c  */
#line 7004 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 953:

/* Line 1806 of yacc.c  */
#line 7008 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 954:

/* Line 1806 of yacc.c  */
#line 7009 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 955:

/* Line 1806 of yacc.c  */
#line 7013 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 956:

/* Line 1806 of yacc.c  */
#line 7014 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 957:

/* Line 1806 of yacc.c  */
#line 7015 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 958:

/* Line 1806 of yacc.c  */
#line 7020 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 959:

/* Line 1806 of yacc.c  */
#line 7030 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Analyze_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 960:

/* Line 1806 of yacc.c  */
#line 7042 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 961:

/* Line 1806 of yacc.c  */
#line 7050 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 962:

/* Line 1806 of yacc.c  */
#line 7065 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Check_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 963:

/* Line 1806 of yacc.c  */
#line 7076 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 964:

/* Line 1806 of yacc.c  */
#line 7077 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 965:

/* Line 1806 of yacc.c  */
#line 7081 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 966:

/* Line 1806 of yacc.c  */
#line 7082 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 967:

/* Line 1806 of yacc.c  */
#line 7086 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 968:

/* Line 1806 of yacc.c  */
#line 7087 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 969:

/* Line 1806 of yacc.c  */
#line 7088 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 970:

/* Line 1806 of yacc.c  */
#line 7089 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 971:

/* Line 1806 of yacc.c  */
#line 7090 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 972:

/* Line 1806 of yacc.c  */
#line 7091 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 973:

/* Line 1806 of yacc.c  */
#line 7096 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 974:

/* Line 1806 of yacc.c  */
#line 7106 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Optimize_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 975:

/* Line 1806 of yacc.c  */
#line 7117 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 976:

/* Line 1806 of yacc.c  */
#line 7118 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 977:

/* Line 1806 of yacc.c  */
#line 7119 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 978:

/* Line 1806 of yacc.c  */
#line 7124 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 979:

/* Line 1806 of yacc.c  */
#line 7128 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 980:

/* Line 1806 of yacc.c  */
#line 7130 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 981:

/* Line 1806 of yacc.c  */
#line 7137 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 982:

/* Line 1806 of yacc.c  */
#line 7142 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 985:

/* Line 1806 of yacc.c  */
#line 7155 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 986:

/* Line 1806 of yacc.c  */
#line 7168 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 987:

/* Line 1806 of yacc.c  */
#line 7172 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 992:

/* Line 1806 of yacc.c  */
#line 7191 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 993:

/* Line 1806 of yacc.c  */
#line 7201 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 994:

/* Line 1806 of yacc.c  */
#line 7210 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 995:

/* Line 1806 of yacc.c  */
#line 7211 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 996:

/* Line 1806 of yacc.c  */
#line 7216 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 997:

/* Line 1806 of yacc.c  */
#line 7222 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1002:

/* Line 1806 of yacc.c  */
#line 7237 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1003:

/* Line 1806 of yacc.c  */
#line 7247 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1004:

/* Line 1806 of yacc.c  */
#line 7257 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
          }
    break;

  case 1006:

/* Line 1806 of yacc.c  */
#line 7264 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        old_mode ? 
                                        INDEX_HINT_MASK_JOIN : 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1008:

/* Line 1806 of yacc.c  */
#line 7275 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { }
    break;

  case 1010:

/* Line 1806 of yacc.c  */
#line 7281 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1011:

/* Line 1806 of yacc.c  */
#line 7282 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1012:

/* Line 1806 of yacc.c  */
#line 7292 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1015:

/* Line 1806 of yacc.c  */
#line 7306 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1017:

/* Line 1806 of yacc.c  */
#line 7316 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1019:

/* Line 1806 of yacc.c  */
#line 7325 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1021:

/* Line 1806 of yacc.c  */
#line 7344 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1022:

/* Line 1806 of yacc.c  */
#line 7352 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1024:

/* Line 1806 of yacc.c  */
#line 7359 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1029:

/* Line 1806 of yacc.c  */
#line 7369 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1032:

/* Line 1806 of yacc.c  */
#line 7384 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1036:

/* Line 1806 of yacc.c  */
#line 7401 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1037:

/* Line 1806 of yacc.c  */
#line 7429 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
	    Lex->disable_flashcache= TRUE;
	  }
    break;

  case 1038:

/* Line 1806 of yacc.c  */
#line 7433 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1040:

/* Line 1806 of yacc.c  */
#line 7465 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1041:

/* Line 1806 of yacc.c  */
#line 7471 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1044:

/* Line 1806 of yacc.c  */
#line 7483 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1045:

/* Line 1806 of yacc.c  */
#line 7498 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1046:

/* Line 1806 of yacc.c  */
#line 7505 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1047:

/* Line 1806 of yacc.c  */
#line 7530 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1048:

/* Line 1806 of yacc.c  */
#line 7536 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1049:

/* Line 1806 of yacc.c  */
#line 7542 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1050:

/* Line 1806 of yacc.c  */
#line 7543 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1051:

/* Line 1806 of yacc.c  */
#line 7544 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1052:

/* Line 1806 of yacc.c  */
#line 7545 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1053:

/* Line 1806 of yacc.c  */
#line 7546 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1054:

/* Line 1806 of yacc.c  */
#line 7550 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1055:

/* Line 1806 of yacc.c  */
#line 7551 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1056:

/* Line 1806 of yacc.c  */
#line 7557 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1057:

/* Line 1806 of yacc.c  */
#line 7608 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_cond_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1058:

/* Line 1806 of yacc.c  */
#line 7615 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1059:

/* Line 1806 of yacc.c  */
#line 7658 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1060:

/* Line 1806 of yacc.c  */
#line 7664 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1061:

/* Line 1806 of yacc.c  */
#line 7670 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1062:

/* Line 1806 of yacc.c  */
#line 7676 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1063:

/* Line 1806 of yacc.c  */
#line 7682 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1064:

/* Line 1806 of yacc.c  */
#line 7688 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1065:

/* Line 1806 of yacc.c  */
#line 7694 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1067:

/* Line 1806 of yacc.c  */
#line 7704 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1068:

/* Line 1806 of yacc.c  */
#line 7710 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1069:

/* Line 1806 of yacc.c  */
#line 7716 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1070:

/* Line 1806 of yacc.c  */
#line 7722 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1071:

/* Line 1806 of yacc.c  */
#line 7728 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1073:

/* Line 1806 of yacc.c  */
#line 7738 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1074:

/* Line 1806 of yacc.c  */
#line 7744 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1075:

/* Line 1806 of yacc.c  */
#line 7754 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1076:

/* Line 1806 of yacc.c  */
#line 7760 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1077:

/* Line 1806 of yacc.c  */
#line 7768 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1078:

/* Line 1806 of yacc.c  */
#line 7774 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1079:

/* Line 1806 of yacc.c  */
#line 7784 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1080:

/* Line 1806 of yacc.c  */
#line 7790 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1081:

/* Line 1806 of yacc.c  */
#line 7799 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1082:

/* Line 1806 of yacc.c  */
#line 7809 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1083:

/* Line 1806 of yacc.c  */
#line 7815 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1084:

/* Line 1806 of yacc.c  */
#line 7825 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1085:

/* Line 1806 of yacc.c  */
#line 7831 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1087:

/* Line 1806 of yacc.c  */
#line 7844 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1088:

/* Line 1806 of yacc.c  */
#line 7850 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1089:

/* Line 1806 of yacc.c  */
#line 7856 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1090:

/* Line 1806 of yacc.c  */
#line 7862 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1091:

/* Line 1806 of yacc.c  */
#line 7868 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1092:

/* Line 1806 of yacc.c  */
#line 7874 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1093:

/* Line 1806 of yacc.c  */
#line 7880 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1094:

/* Line 1806 of yacc.c  */
#line 7886 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1095:

/* Line 1806 of yacc.c  */
#line 7892 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1096:

/* Line 1806 of yacc.c  */
#line 7898 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1097:

/* Line 1806 of yacc.c  */
#line 7904 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1098:

/* Line 1806 of yacc.c  */
#line 7910 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1099:

/* Line 1806 of yacc.c  */
#line 7916 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1100:

/* Line 1806 of yacc.c  */
#line 7922 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1110:

/* Line 1806 of yacc.c  */
#line 7951 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1111:

/* Line 1806 of yacc.c  */
#line 7952 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1112:

/* Line 1806 of yacc.c  */
#line 7953 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1113:

/* Line 1806 of yacc.c  */
#line 7954 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1114:

/* Line 1806 of yacc.c  */
#line 7955 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1115:

/* Line 1806 of yacc.c  */
#line 7956 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1116:

/* Line 1806 of yacc.c  */
#line 7960 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1117:

/* Line 1806 of yacc.c  */
#line 7961 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1123:

/* Line 1806 of yacc.c  */
#line 7971 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1128:

/* Line 1806 of yacc.c  */
#line 7987 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1129:

/* Line 1806 of yacc.c  */
#line 7993 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1130:

/* Line 1806 of yacc.c  */
#line 7997 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1131:

/* Line 1806 of yacc.c  */
#line 8003 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1132:

/* Line 1806 of yacc.c  */
#line 8009 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1133:

/* Line 1806 of yacc.c  */
#line 8015 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1134:

/* Line 1806 of yacc.c  */
#line 8021 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1135:

/* Line 1806 of yacc.c  */
#line 8023 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1136:

/* Line 1806 of yacc.c  */
#line 8030 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1137:

/* Line 1806 of yacc.c  */
#line 8037 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1138:

/* Line 1806 of yacc.c  */
#line 8043 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(3) - (4)].item); }
    break;

  case 1139:

/* Line 1806 of yacc.c  */
#line 8045 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1140:

/* Line 1806 of yacc.c  */
#line 8054 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1141:

/* Line 1806 of yacc.c  */
#line 8061 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1142:

/* Line 1806 of yacc.c  */
#line 8069 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1143:

/* Line 1806 of yacc.c  */
#line 8075 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1144:

/* Line 1806 of yacc.c  */
#line 8082 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1145:

/* Line 1806 of yacc.c  */
#line 8088 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1146:

/* Line 1806 of yacc.c  */
#line 8102 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1147:

/* Line 1806 of yacc.c  */
#line 8110 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1148:

/* Line 1806 of yacc.c  */
#line 8125 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1149:

/* Line 1806 of yacc.c  */
#line 8131 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1150:

/* Line 1806 of yacc.c  */
#line 8137 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1151:

/* Line 1806 of yacc.c  */
#line 8145 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1152:

/* Line 1806 of yacc.c  */
#line 8151 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1153:

/* Line 1806 of yacc.c  */
#line 8157 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1154:

/* Line 1806 of yacc.c  */
#line 8163 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1155:

/* Line 1806 of yacc.c  */
#line 8169 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1156:

/* Line 1806 of yacc.c  */
#line 8184 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1157:

/* Line 1806 of yacc.c  */
#line 8196 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1158:

/* Line 1806 of yacc.c  */
#line 8202 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1159:

/* Line 1806 of yacc.c  */
#line 8208 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1160:

/* Line 1806 of yacc.c  */
#line 8214 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1161:

/* Line 1806 of yacc.c  */
#line 8220 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1162:

/* Line 1806 of yacc.c  */
#line 8226 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1163:

/* Line 1806 of yacc.c  */
#line 8232 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1164:

/* Line 1806 of yacc.c  */
#line 8238 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1165:

/* Line 1806 of yacc.c  */
#line 8244 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1166:

/* Line 1806 of yacc.c  */
#line 8250 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1167:

/* Line 1806 of yacc.c  */
#line 8256 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1168:

/* Line 1806 of yacc.c  */
#line 8262 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1169:

/* Line 1806 of yacc.c  */
#line 8268 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1170:

/* Line 1806 of yacc.c  */
#line 8274 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1171:

/* Line 1806 of yacc.c  */
#line 8280 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1172:

/* Line 1806 of yacc.c  */
#line 8286 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1173:

/* Line 1806 of yacc.c  */
#line 8292 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1174:

/* Line 1806 of yacc.c  */
#line 8300 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1175:

/* Line 1806 of yacc.c  */
#line 8321 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1176:

/* Line 1806 of yacc.c  */
#line 8328 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1177:

/* Line 1806 of yacc.c  */
#line 8334 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1178:

/* Line 1806 of yacc.c  */
#line 8341 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1179:

/* Line 1806 of yacc.c  */
#line 8348 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1180:

/* Line 1806 of yacc.c  */
#line 8356 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1181:

/* Line 1806 of yacc.c  */
#line 8363 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1182:

/* Line 1806 of yacc.c  */
#line 8369 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1183:

/* Line 1806 of yacc.c  */
#line 8375 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1184:

/* Line 1806 of yacc.c  */
#line 8381 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1185:

/* Line 1806 of yacc.c  */
#line 8388 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1186:

/* Line 1806 of yacc.c  */
#line 8395 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1187:

/* Line 1806 of yacc.c  */
#line 8401 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1188:

/* Line 1806 of yacc.c  */
#line 8408 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1189:

/* Line 1806 of yacc.c  */
#line 8414 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1190:

/* Line 1806 of yacc.c  */
#line 8420 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1191:

/* Line 1806 of yacc.c  */
#line 8426 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1192:

/* Line 1806 of yacc.c  */
#line 8432 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1193:

/* Line 1806 of yacc.c  */
#line 8438 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local();
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1194:

/* Line 1806 of yacc.c  */
#line 8456 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(3) - (4)].item));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1195:

/* Line 1806 of yacc.c  */
#line 8466 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1196:

/* Line 1806 of yacc.c  */
#line 8472 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1197:

/* Line 1806 of yacc.c  */
#line 8478 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1198:

/* Line 1806 of yacc.c  */
#line 8485 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1199:

/* Line 1806 of yacc.c  */
#line 8492 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1200:

/* Line 1806 of yacc.c  */
#line 8507 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1201:

/* Line 1806 of yacc.c  */
#line 8513 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1202:

/* Line 1806 of yacc.c  */
#line 8519 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1203:

/* Line 1806 of yacc.c  */
#line 8525 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1204:

/* Line 1806 of yacc.c  */
#line 8531 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1205:

/* Line 1806 of yacc.c  */
#line 8538 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1206:

/* Line 1806 of yacc.c  */
#line 8544 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1207:

/* Line 1806 of yacc.c  */
#line 8550 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1208:

/* Line 1806 of yacc.c  */
#line 8556 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1209:

/* Line 1806 of yacc.c  */
#line 8562 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            if (thd->variables.old_passwords)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1210:

/* Line 1806 of yacc.c  */
#line 8574 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1211:

/* Line 1806 of yacc.c  */
#line 8580 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1212:

/* Line 1806 of yacc.c  */
#line 8586 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1213:

/* Line 1806 of yacc.c  */
#line 8592 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1214:

/* Line 1806 of yacc.c  */
#line 8598 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1215:

/* Line 1806 of yacc.c  */
#line 8610 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1216:

/* Line 1806 of yacc.c  */
#line 8616 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1217:

/* Line 1806 of yacc.c  */
#line 8632 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1218:

/* Line 1806 of yacc.c  */
#line 8638 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1219:

/* Line 1806 of yacc.c  */
#line 8645 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1220:

/* Line 1806 of yacc.c  */
#line 8652 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1221:

/* Line 1806 of yacc.c  */
#line 8659 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1222:

/* Line 1806 of yacc.c  */
#line 8666 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1223:

/* Line 1806 of yacc.c  */
#line 8673 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1224:

/* Line 1806 of yacc.c  */
#line 8677 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1225:

/* Line 1806 of yacc.c  */
#line 8696 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1226:

/* Line 1806 of yacc.c  */
#line 8715 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1227:

/* Line 1806 of yacc.c  */
#line 8769 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str || check_db_name(&(yyvsp[(1) - (6)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (6)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1228:

/* Line 1806 of yacc.c  */
#line 8811 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1229:

/* Line 1806 of yacc.c  */
#line 8813 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1230:

/* Line 1806 of yacc.c  */
#line 8817 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1231:

/* Line 1806 of yacc.c  */
#line 8818 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1232:

/* Line 1806 of yacc.c  */
#line 8822 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1233:

/* Line 1806 of yacc.c  */
#line 8823 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1234:

/* Line 1806 of yacc.c  */
#line 8827 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1235:

/* Line 1806 of yacc.c  */
#line 8828 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1236:

/* Line 1806 of yacc.c  */
#line 8833 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1237:

/* Line 1806 of yacc.c  */
#line 8840 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1238:

/* Line 1806 of yacc.c  */
#line 8848 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM)
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1239:

/* Line 1806 of yacc.c  */
#line 8874 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1240:

/* Line 1806 of yacc.c  */
#line 8880 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1241:

/* Line 1806 of yacc.c  */
#line 8886 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1242:

/* Line 1806 of yacc.c  */
#line 8892 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1243:

/* Line 1806 of yacc.c  */
#line 8898 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1244:

/* Line 1806 of yacc.c  */
#line 8904 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1245:

/* Line 1806 of yacc.c  */
#line 8913 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1246:

/* Line 1806 of yacc.c  */
#line 8919 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1247:

/* Line 1806 of yacc.c  */
#line 8921 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1248:

/* Line 1806 of yacc.c  */
#line 8923 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:

/* Line 1806 of yacc.c  */
#line 8929 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1250:

/* Line 1806 of yacc.c  */
#line 8940 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:

/* Line 1806 of yacc.c  */
#line 8946 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1252:

/* Line 1806 of yacc.c  */
#line 8952 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:

/* Line 1806 of yacc.c  */
#line 8958 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1254:

/* Line 1806 of yacc.c  */
#line 8964 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:

/* Line 1806 of yacc.c  */
#line 8970 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:

/* Line 1806 of yacc.c  */
#line 8976 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1257:

/* Line 1806 of yacc.c  */
#line 8982 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:

/* Line 1806 of yacc.c  */
#line 8988 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1259:

/* Line 1806 of yacc.c  */
#line 8994 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1260:

/* Line 1806 of yacc.c  */
#line 8998 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
            sel->gorder_list.empty();
          }
    break;

  case 1261:

/* Line 1806 of yacc.c  */
#line 9013 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1262:

/* Line 1806 of yacc.c  */
#line 9021 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1263:

/* Line 1806 of yacc.c  */
#line 9028 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item), false);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1264:

/* Line 1806 of yacc.c  */
#line 9038 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1265:

/* Line 1806 of yacc.c  */
#line 9046 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1266:

/* Line 1806 of yacc.c  */
#line 9061 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1267:

/* Line 1806 of yacc.c  */
#line 9062 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1268:

/* Line 1806 of yacc.c  */
#line 9067 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1269:

/* Line 1806 of yacc.c  */
#line 9072 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1271:

/* Line 1806 of yacc.c  */
#line 9078 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1273:

/* Line 1806 of yacc.c  */
#line 9095 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { if (add_gorder_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1274:

/* Line 1806 of yacc.c  */
#line 9097 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { if (add_gorder_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1275:

/* Line 1806 of yacc.c  */
#line 9102 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1276:

/* Line 1806 of yacc.c  */
#line 9111 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1277:

/* Line 1806 of yacc.c  */
#line 9119 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1278:

/* Line 1806 of yacc.c  */
#line 9121 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1279:

/* Line 1806 of yacc.c  */
#line 9123 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1280:

/* Line 1806 of yacc.c  */
#line 9125 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1281:

/* Line 1806 of yacc.c  */
#line 9127 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1282:

/* Line 1806 of yacc.c  */
#line 9129 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1283:

/* Line 1806 of yacc.c  */
#line 9131 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1284:

/* Line 1806 of yacc.c  */
#line 9133 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1285:

/* Line 1806 of yacc.c  */
#line 9135 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_TIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1286:

/* Line 1806 of yacc.c  */
#line 9137 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATETIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1287:

/* Line 1806 of yacc.c  */
#line 9139 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1288:

/* Line 1806 of yacc.c  */
#line 9143 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1289:

/* Line 1806 of yacc.c  */
#line 9144 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1290:

/* Line 1806 of yacc.c  */
#line 9149 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1291:

/* Line 1806 of yacc.c  */
#line 9156 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1292:

/* Line 1806 of yacc.c  */
#line 9163 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1293:

/* Line 1806 of yacc.c  */
#line 9164 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1294:

/* Line 1806 of yacc.c  */
#line 9169 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1295:

/* Line 1806 of yacc.c  */
#line 9176 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1296:

/* Line 1806 of yacc.c  */
#line 9183 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1297:

/* Line 1806 of yacc.c  */
#line 9184 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1298:

/* Line 1806 of yacc.c  */
#line 9188 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1299:

/* Line 1806 of yacc.c  */
#line 9189 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1300:

/* Line 1806 of yacc.c  */
#line 9194 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1301:

/* Line 1806 of yacc.c  */
#line 9202 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1302:

/* Line 1806 of yacc.c  */
#line 9212 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1303:

/* Line 1806 of yacc.c  */
#line 9214 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1304:

/* Line 1806 of yacc.c  */
#line 9222 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1305:

/* Line 1806 of yacc.c  */
#line 9233 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1306:

/* Line 1806 of yacc.c  */
#line 9234 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1307:

/* Line 1806 of yacc.c  */
#line 9240 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1308:

/* Line 1806 of yacc.c  */
#line 9242 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1309:

/* Line 1806 of yacc.c  */
#line 9262 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1310:

/* Line 1806 of yacc.c  */
#line 9264 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1311:

/* Line 1806 of yacc.c  */
#line 9267 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1312:

/* Line 1806 of yacc.c  */
#line 9275 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1313:

/* Line 1806 of yacc.c  */
#line 9282 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1314:

/* Line 1806 of yacc.c  */
#line 9290 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1315:

/* Line 1806 of yacc.c  */
#line 9298 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1316:

/* Line 1806 of yacc.c  */
#line 9302 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1317:

/* Line 1806 of yacc.c  */
#line 9304 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1318:

/* Line 1806 of yacc.c  */
#line 9312 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1319:

/* Line 1806 of yacc.c  */
#line 9320 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1320:

/* Line 1806 of yacc.c  */
#line 9328 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1321:

/* Line 1806 of yacc.c  */
#line 9332 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1322:

/* Line 1806 of yacc.c  */
#line 9338 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1323:

/* Line 1806 of yacc.c  */
#line 9348 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1324:

/* Line 1806 of yacc.c  */
#line 9356 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1325:

/* Line 1806 of yacc.c  */
#line 9365 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1326:

/* Line 1806 of yacc.c  */
#line 9369 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1327:

/* Line 1806 of yacc.c  */
#line 9376 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1328:

/* Line 1806 of yacc.c  */
#line 9386 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1329:

/* Line 1806 of yacc.c  */
#line 9387 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1330:

/* Line 1806 of yacc.c  */
#line 9388 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1331:

/* Line 1806 of yacc.c  */
#line 9400 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1332:

/* Line 1806 of yacc.c  */
#line 9405 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (4)].table), (yyvsp[(3) - (4)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints())))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1333:

/* Line 1806 of yacc.c  */
#line 9415 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1334:

/* Line 1806 of yacc.c  */
#line 9455 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               new Table_ident(unit), (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if ((yyvsp[(5) - (5)].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1335:

/* Line 1806 of yacc.c  */
#line 9527 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (2)].table_list) && (yyvsp[(2) - (2)].is_not_empty))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1336:

/* Line 1806 of yacc.c  */
#line 9537 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1337:

/* Line 1806 of yacc.c  */
#line 9542 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1338:

/* Line 1806 of yacc.c  */
#line 9550 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (7)].table_list) != NULL)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1339:

/* Line 1806 of yacc.c  */
#line 9562 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1340:

/* Line 1806 of yacc.c  */
#line 9581 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1341:

/* Line 1806 of yacc.c  */
#line 9589 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1343:

/* Line 1806 of yacc.c  */
#line 9598 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1344:

/* Line 1806 of yacc.c  */
#line 9604 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1345:

/* Line 1806 of yacc.c  */
#line 9620 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1346:

/* Line 1806 of yacc.c  */
#line 9637 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1348:

/* Line 1806 of yacc.c  */
#line 9644 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1349:

/* Line 1806 of yacc.c  */
#line 9649 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1350:

/* Line 1806 of yacc.c  */
#line 9674 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1351:

/* Line 1806 of yacc.c  */
#line 9675 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1352:

/* Line 1806 of yacc.c  */
#line 9680 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.num)= old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1353:

/* Line 1806 of yacc.c  */
#line 9683 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1354:

/* Line 1806 of yacc.c  */
#line 9684 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1355:

/* Line 1806 of yacc.c  */
#line 9685 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1356:

/* Line 1806 of yacc.c  */
#line 9689 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1357:

/* Line 1806 of yacc.c  */
#line 9690 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1358:

/* Line 1806 of yacc.c  */
#line 9695 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1360:

/* Line 1806 of yacc.c  */
#line 9700 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1365:

/* Line 1806 of yacc.c  */
#line 9713 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1367:

/* Line 1806 of yacc.c  */
#line 9717 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1369:

/* Line 1806 of yacc.c  */
#line 9722 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1370:

/* Line 1806 of yacc.c  */
#line 9723 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1371:

/* Line 1806 of yacc.c  */
#line 9728 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1372:

/* Line 1806 of yacc.c  */
#line 9730 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1375:

/* Line 1806 of yacc.c  */
#line 9740 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1376:

/* Line 1806 of yacc.c  */
#line 9751 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1377:

/* Line 1806 of yacc.c  */
#line 9763 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1378:

/* Line 1806 of yacc.c  */
#line 9764 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1379:

/* Line 1806 of yacc.c  */
#line 9765 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1380:

/* Line 1806 of yacc.c  */
#line 9766 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1381:

/* Line 1806 of yacc.c  */
#line 9767 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1382:

/* Line 1806 of yacc.c  */
#line 9768 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1383:

/* Line 1806 of yacc.c  */
#line 9769 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1384:

/* Line 1806 of yacc.c  */
#line 9770 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1385:

/* Line 1806 of yacc.c  */
#line 9771 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1386:

/* Line 1806 of yacc.c  */
#line 9772 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1387:

/* Line 1806 of yacc.c  */
#line 9773 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1388:

/* Line 1806 of yacc.c  */
#line 9774 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1389:

/* Line 1806 of yacc.c  */
#line 9778 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1390:

/* Line 1806 of yacc.c  */
#line 9779 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1391:

/* Line 1806 of yacc.c  */
#line 9780 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1392:

/* Line 1806 of yacc.c  */
#line 9781 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1393:

/* Line 1806 of yacc.c  */
#line 9782 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1394:

/* Line 1806 of yacc.c  */
#line 9783 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1395:

/* Line 1806 of yacc.c  */
#line 9784 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1396:

/* Line 1806 of yacc.c  */
#line 9785 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1397:

/* Line 1806 of yacc.c  */
#line 9786 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1398:

/* Line 1806 of yacc.c  */
#line 9790 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1399:

/* Line 1806 of yacc.c  */
#line 9791 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1400:

/* Line 1806 of yacc.c  */
#line 9792 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1401:

/* Line 1806 of yacc.c  */
#line 9793 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1405:

/* Line 1806 of yacc.c  */
#line 9803 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1406:

/* Line 1806 of yacc.c  */
#line 9805 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1409:

/* Line 1806 of yacc.c  */
#line 9818 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1410:

/* Line 1806 of yacc.c  */
#line 9820 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1411:

/* Line 1806 of yacc.c  */
#line 9824 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= (yyvsp[(3) - (3)].item);
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1413:

/* Line 1806 of yacc.c  */
#line 9836 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1414:

/* Line 1806 of yacc.c  */
#line 9840 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= (yyvsp[(3) - (3)].item);
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1415:

/* Line 1806 of yacc.c  */
#line 9851 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1416:

/* Line 1806 of yacc.c  */
#line 9856 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1419:

/* Line 1806 of yacc.c  */
#line 9878 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1420:

/* Line 1806 of yacc.c  */
#line 9880 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1421:

/* Line 1806 of yacc.c  */
#line 9884 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1422:

/* Line 1806 of yacc.c  */
#line 9886 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1423:

/* Line 1806 of yacc.c  */
#line 9906 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1427:

/* Line 1806 of yacc.c  */
#line 9940 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1430:

/* Line 1806 of yacc.c  */
#line 9959 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1432:

/* Line 1806 of yacc.c  */
#line 9994 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1433:

/* Line 1806 of yacc.c  */
#line 9996 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1434:

/* Line 1806 of yacc.c  */
#line 10000 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1435:

/* Line 1806 of yacc.c  */
#line 10001 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1436:

/* Line 1806 of yacc.c  */
#line 10002 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1437:

/* Line 1806 of yacc.c  */
#line 10007 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
          }
    break;

  case 1438:

/* Line 1806 of yacc.c  */
#line 10013 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1439:

/* Line 1806 of yacc.c  */
#line 10017 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1440:

/* Line 1806 of yacc.c  */
#line 10018 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1441:

/* Line 1806 of yacc.c  */
#line 10023 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (Select->select_limit->fixed &&
                Select->select_limit->val_int() != 0)
            {
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            }
          }
    break;

  case 1442:

/* Line 1806 of yacc.c  */
#line 10034 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1443:

/* Line 1806 of yacc.c  */
#line 10041 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1444:

/* Line 1806 of yacc.c  */
#line 10048 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1445:

/* Line 1806 of yacc.c  */
#line 10058 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
          Item_splocal *splocal;
          THD *thd= YYTHD;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable_t *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
          {
            splocal= new (thd->mem_root)
              Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                  lip->get_tok_start() - lex->sphead->m_tmp_query,
                  lip->get_ptr() - lip->get_tok_start());
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
          {
            my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
            MYSQL_YYABORT;
          }
          if (splocal->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
    break;

  case 1446:

/* Line 1806 of yacc.c  */
#line 10092 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1447:

/* Line 1806 of yacc.c  */
#line 10096 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1448:

/* Line 1806 of yacc.c  */
#line 10102 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1449:

/* Line 1806 of yacc.c  */
#line 10108 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1450:

/* Line 1806 of yacc.c  */
#line 10117 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1451:

/* Line 1806 of yacc.c  */
#line 10122 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            if (Select->select_limit->fixed &&
                Select->select_limit->val_int() != 0)
            {
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            }
            sel->explicit_limit= 1;
          }
    break;

  case 1452:

/* Line 1806 of yacc.c  */
#line 10135 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1453:

/* Line 1806 of yacc.c  */
#line 10136 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1454:

/* Line 1806 of yacc.c  */
#line 10137 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1455:

/* Line 1806 of yacc.c  */
#line 10138 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1456:

/* Line 1806 of yacc.c  */
#line 10139 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1457:

/* Line 1806 of yacc.c  */
#line 10140 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1458:

/* Line 1806 of yacc.c  */
#line 10144 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1459:

/* Line 1806 of yacc.c  */
#line 10145 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1460:

/* Line 1806 of yacc.c  */
#line 10146 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1461:

/* Line 1806 of yacc.c  */
#line 10147 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1462:

/* Line 1806 of yacc.c  */
#line 10148 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1463:

/* Line 1806 of yacc.c  */
#line 10152 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1464:

/* Line 1806 of yacc.c  */
#line 10153 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1465:

/* Line 1806 of yacc.c  */
#line 10154 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1466:

/* Line 1806 of yacc.c  */
#line 10155 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1467:

/* Line 1806 of yacc.c  */
#line 10156 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1468:

/* Line 1806 of yacc.c  */
#line 10160 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1469:

/* Line 1806 of yacc.c  */
#line 10161 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1470:

/* Line 1806 of yacc.c  */
#line 10162 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1471:

/* Line 1806 of yacc.c  */
#line 10163 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1472:

/* Line 1806 of yacc.c  */
#line 10168 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1476:

/* Line 1806 of yacc.c  */
#line 10179 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (YYTHD->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1478:

/* Line 1806 of yacc.c  */
#line 10209 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1479:

/* Line 1806 of yacc.c  */
#line 10210 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1482:

/* Line 1806 of yacc.c  */
#line 10220 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1483:

/* Line 1806 of yacc.c  */
#line 10231 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1484:

/* Line 1806 of yacc.c  */
#line 10237 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1486:

/* Line 1806 of yacc.c  */
#line 10242 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1487:

/* Line 1806 of yacc.c  */
#line 10247 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1488:

/* Line 1806 of yacc.c  */
#line 10266 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable_t *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1489:

/* Line 1806 of yacc.c  */
#line 10298 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1491:

/* Line 1806 of yacc.c  */
#line 10310 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1492:

/* Line 1806 of yacc.c  */
#line 10318 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1494:

/* Line 1806 of yacc.c  */
#line 10321 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1495:

/* Line 1806 of yacc.c  */
#line 10333 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1496:

/* Line 1806 of yacc.c  */
#line 10344 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1497:

/* Line 1806 of yacc.c  */
#line 10350 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1498:

/* Line 1806 of yacc.c  */
#line 10361 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->drop_if_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1499:

/* Line 1806 of yacc.c  */
#line 10370 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1500:

/* Line 1806 of yacc.c  */
#line 10371 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1501:

/* Line 1806 of yacc.c  */
#line 10372 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 1502:

/* Line 1806 of yacc.c  */
#line 10388 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1503:

/* Line 1806 of yacc.c  */
#line 10395 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1504:

/* Line 1806 of yacc.c  */
#line 10418 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1505:

/* Line 1806 of yacc.c  */
#line 10439 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1506:

/* Line 1806 of yacc.c  */
#line 10451 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1507:

/* Line 1806 of yacc.c  */
#line 10455 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1508:

/* Line 1806 of yacc.c  */
#line 10463 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1509:

/* Line 1806 of yacc.c  */
#line 10465 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1510:

/* Line 1806 of yacc.c  */
#line 10471 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1511:

/* Line 1806 of yacc.c  */
#line 10478 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1512:

/* Line 1806 of yacc.c  */
#line 10483 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1513:

/* Line 1806 of yacc.c  */
#line 10488 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1516:

/* Line 1806 of yacc.c  */
#line 10503 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1519:

/* Line 1806 of yacc.c  */
#line 10519 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1520:

/* Line 1806 of yacc.c  */
#line 10529 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1521:

/* Line 1806 of yacc.c  */
#line 10530 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1522:

/* Line 1806 of yacc.c  */
#line 10534 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1523:

/* Line 1806 of yacc.c  */
#line 10535 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1524:

/* Line 1806 of yacc.c  */
#line 10543 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1525:

/* Line 1806 of yacc.c  */
#line 10551 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1526:

/* Line 1806 of yacc.c  */
#line 10556 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1527:

/* Line 1806 of yacc.c  */
#line 10561 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1528:

/* Line 1806 of yacc.c  */
#line 10568 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1529:

/* Line 1806 of yacc.c  */
#line 10573 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1530:

/* Line 1806 of yacc.c  */
#line 10578 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              If it is SP we do not allow insert optimisation whan result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
#else
            (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
#endif
          }
    break;

  case 1531:

/* Line 1806 of yacc.c  */
#line 10590 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1532:

/* Line 1806 of yacc.c  */
#line 10592 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1533:

/* Line 1806 of yacc.c  */
#line 10599 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1534:

/* Line 1806 of yacc.c  */
#line 10603 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1535:

/* Line 1806 of yacc.c  */
#line 10605 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1536:

/* Line 1806 of yacc.c  */
#line 10615 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1537:

/* Line 1806 of yacc.c  */
#line 10616 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1538:

/* Line 1806 of yacc.c  */
#line 10621 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1539:

/* Line 1806 of yacc.c  */
#line 10629 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1540:

/* Line 1806 of yacc.c  */
#line 10630 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1541:

/* Line 1806 of yacc.c  */
#line 10631 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1542:

/* Line 1806 of yacc.c  */
#line 10633 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1544:

/* Line 1806 of yacc.c  */
#line 10643 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1545:

/* Line 1806 of yacc.c  */
#line 10644 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1546:

/* Line 1806 of yacc.c  */
#line 10648 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1547:

/* Line 1806 of yacc.c  */
#line 10649 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1548:

/* Line 1806 of yacc.c  */
#line 10651 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1549:

/* Line 1806 of yacc.c  */
#line 10652 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1550:

/* Line 1806 of yacc.c  */
#line 10654 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1551:

/* Line 1806 of yacc.c  */
#line 10655 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1556:

/* Line 1806 of yacc.c  */
#line 10670 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1557:

/* Line 1806 of yacc.c  */
#line 10679 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1558:

/* Line 1806 of yacc.c  */
#line 10680 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1559:

/* Line 1806 of yacc.c  */
#line 10684 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1560:

/* Line 1806 of yacc.c  */
#line 10685 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1561:

/* Line 1806 of yacc.c  */
#line 10690 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1562:

/* Line 1806 of yacc.c  */
#line 10695 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1563:

/* Line 1806 of yacc.c  */
#line 10703 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1565:

/* Line 1806 of yacc.c  */
#line 10709 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1566:

/* Line 1806 of yacc.c  */
#line 10714 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1567:

/* Line 1806 of yacc.c  */
#line 10721 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1568:

/* Line 1806 of yacc.c  */
#line 10723 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1570:

/* Line 1806 of yacc.c  */
#line 10732 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1572:

/* Line 1806 of yacc.c  */
#line 10740 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1573:

/* Line 1806 of yacc.c  */
#line 10748 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1574:

/* Line 1806 of yacc.c  */
#line 10766 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1577:

/* Line 1806 of yacc.c  */
#line 10776 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1580:

/* Line 1806 of yacc.c  */
#line 10789 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1581:

/* Line 1806 of yacc.c  */
#line 10798 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1582:

/* Line 1806 of yacc.c  */
#line 10799 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1583:

/* Line 1806 of yacc.c  */
#line 10806 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1585:

/* Line 1806 of yacc.c  */
#line 10821 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (2)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1586:

/* Line 1806 of yacc.c  */
#line 10830 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1587:

/* Line 1806 of yacc.c  */
#line 10832 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1588:

/* Line 1806 of yacc.c  */
#line 10838 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1589:

/* Line 1806 of yacc.c  */
#line 10843 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1590:

/* Line 1806 of yacc.c  */
#line 10849 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1593:

/* Line 1806 of yacc.c  */
#line 10862 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1594:

/* Line 1806 of yacc.c  */
#line 10875 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1595:

/* Line 1806 of yacc.c  */
#line 10890 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1596:

/* Line 1806 of yacc.c  */
#line 10891 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1597:

/* Line 1806 of yacc.c  */
#line 10895 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1598:

/* Line 1806 of yacc.c  */
#line 10896 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1599:

/* Line 1806 of yacc.c  */
#line 10900 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1600:

/* Line 1806 of yacc.c  */
#line 10901 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1601:

/* Line 1806 of yacc.c  */
#line 10902 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1602:

/* Line 1806 of yacc.c  */
#line 10907 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1603:

/* Line 1806 of yacc.c  */
#line 10918 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Truncate_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1610:

/* Line 1806 of yacc.c  */
#line 10943 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1611:

/* Line 1806 of yacc.c  */
#line 10947 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1612:

/* Line 1806 of yacc.c  */
#line 10951 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1613:

/* Line 1806 of yacc.c  */
#line 10955 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1614:

/* Line 1806 of yacc.c  */
#line 10959 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1615:

/* Line 1806 of yacc.c  */
#line 10963 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1616:

/* Line 1806 of yacc.c  */
#line 10967 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1617:

/* Line 1806 of yacc.c  */
#line 10971 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1618:

/* Line 1806 of yacc.c  */
#line 10975 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1619:

/* Line 1806 of yacc.c  */
#line 10982 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1620:

/* Line 1806 of yacc.c  */
#line 10986 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1621:

/* Line 1806 of yacc.c  */
#line 10995 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1622:

/* Line 1806 of yacc.c  */
#line 11003 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1623:

/* Line 1806 of yacc.c  */
#line 11010 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1624:

/* Line 1806 of yacc.c  */
#line 11017 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1625:

/* Line 1806 of yacc.c  */
#line 11025 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TEMPORARY_TABLES;
             lex->option_type= (yyvsp[(1) - (4)].var_type);
             lex->select_lex.db= (yyvsp[(4) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TEMPORARY_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1626:

/* Line 1806 of yacc.c  */
#line 11034 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1627:

/* Line 1806 of yacc.c  */
#line 11042 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1628:

/* Line 1806 of yacc.c  */
#line 11050 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1629:

/* Line 1806 of yacc.c  */
#line 11058 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1630:

/* Line 1806 of yacc.c  */
#line 11066 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1631:

/* Line 1806 of yacc.c  */
#line 11073 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1632:

/* Line 1806 of yacc.c  */
#line 11075 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1633:

/* Line 1806 of yacc.c  */
#line 11077 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1634:

/* Line 1806 of yacc.c  */
#line 11086 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1635:

/* Line 1806 of yacc.c  */
#line 11090 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1636:

/* Line 1806 of yacc.c  */
#line 11094 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1638:

/* Line 1806 of yacc.c  */
#line 11099 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1640:

/* Line 1806 of yacc.c  */
#line 11104 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1641:

/* Line 1806 of yacc.c  */
#line 11113 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1642:

/* Line 1806 of yacc.c  */
#line 11120 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
            push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                "SHOW AUTHORS");
          }
    break;

  case 1643:

/* Line 1806 of yacc.c  */
#line 11129 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
            push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                "SHOW CONTRIBUTORS");
          }
    break;

  case 1644:

/* Line 1806 of yacc.c  */
#line 11138 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1645:

/* Line 1806 of yacc.c  */
#line 11143 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1646:

/* Line 1806 of yacc.c  */
#line 11145 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1647:

/* Line 1806 of yacc.c  */
#line 11147 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1648:

/* Line 1806 of yacc.c  */
#line 11149 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1649:

/* Line 1806 of yacc.c  */
#line 11151 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1650:

/* Line 1806 of yacc.c  */
#line 11153 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1651:

/* Line 1806 of yacc.c  */
#line 11160 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1652:

/* Line 1806 of yacc.c  */
#line 11168 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1653:

/* Line 1806 of yacc.c  */
#line 11170 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1654:

/* Line 1806 of yacc.c  */
#line 11178 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1655:

/* Line 1806 of yacc.c  */
#line 11185 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1656:

/* Line 1806 of yacc.c  */
#line 11192 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            bzero(curr_user, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1657:

/* Line 1806 of yacc.c  */
#line 11202 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1658:

/* Line 1806 of yacc.c  */
#line 11209 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1659:

/* Line 1806 of yacc.c  */
#line 11215 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1660:

/* Line 1806 of yacc.c  */
#line 11224 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1661:

/* Line 1806 of yacc.c  */
#line 11232 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1662:

/* Line 1806 of yacc.c  */
#line 11236 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1663:

/* Line 1806 of yacc.c  */
#line 11241 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
	    Lex->sql_command = SQLCOM_SHOW_SLAVE_NOLOCK_STAT; //SQLCOM_SHOW_SLAVE_NOLOCK_STAT;
          }
    break;

  case 1664:

/* Line 1806 of yacc.c  */
#line 11245 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
#ifdef HAVE_RESPONSE_TIME_DISTRIBUTION
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SELECT;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_QUERY_RESPONSE_TIME))
             MYSQL_YYABORT;
#endif // HAVE_RESPONSE_TIME_DISTRIBUTION
         }
    break;

  case 1665:

/* Line 1806 of yacc.c  */
#line 11254 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           Lex->sql_command= SQLCOM_SELECT;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_CLIENT_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1666:

/* Line 1806 of yacc.c  */
#line 11261 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SELECT;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_USER_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1667:

/* Line 1806 of yacc.c  */
#line 11268 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           Lex->sql_command= SQLCOM_SELECT;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_THREAD_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1668:

/* Line 1806 of yacc.c  */
#line 11275 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SELECT;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1669:

/* Line 1806 of yacc.c  */
#line 11282 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SELECT;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_INDEX_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1670:

/* Line 1806 of yacc.c  */
#line 11289 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1671:

/* Line 1806 of yacc.c  */
#line 11296 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1672:

/* Line 1806 of yacc.c  */
#line 11303 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1673:

/* Line 1806 of yacc.c  */
#line 11309 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1674:

/* Line 1806 of yacc.c  */
#line 11316 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1675:

/* Line 1806 of yacc.c  */
#line 11323 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1676:

/* Line 1806 of yacc.c  */
#line 11328 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1677:

/* Line 1806 of yacc.c  */
#line 11333 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1678:

/* Line 1806 of yacc.c  */
#line 11341 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1679:

/* Line 1806 of yacc.c  */
#line 11343 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1680:

/* Line 1806 of yacc.c  */
#line 11345 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1685:

/* Line 1806 of yacc.c  */
#line 11359 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1686:

/* Line 1806 of yacc.c  */
#line 11360 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1687:

/* Line 1806 of yacc.c  */
#line 11364 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1688:

/* Line 1806 of yacc.c  */
#line 11365 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1691:

/* Line 1806 of yacc.c  */
#line 11374 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1692:

/* Line 1806 of yacc.c  */
#line 11375 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1693:

/* Line 1806 of yacc.c  */
#line 11379 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1694:

/* Line 1806 of yacc.c  */
#line 11380 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1696:

/* Line 1806 of yacc.c  */
#line 11386 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1697:

/* Line 1806 of yacc.c  */
#line 11393 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Select->where= (yyvsp[(2) - (2)].item);
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1698:

/* Line 1806 of yacc.c  */
#line 11403 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1699:

/* Line 1806 of yacc.c  */
#line 11414 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1700:

/* Line 1806 of yacc.c  */
#line 11418 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1701:

/* Line 1806 of yacc.c  */
#line 11420 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1704:

/* Line 1806 of yacc.c  */
#line 11432 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1705:

/* Line 1806 of yacc.c  */
#line 11433 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1706:

/* Line 1806 of yacc.c  */
#line 11434 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1707:

/* Line 1806 of yacc.c  */
#line 11438 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1708:

/* Line 1806 of yacc.c  */
#line 11439 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1709:

/* Line 1806 of yacc.c  */
#line 11441 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1710:

/* Line 1806 of yacc.c  */
#line 11455 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1711:

/* Line 1806 of yacc.c  */
#line 11462 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1712:

/* Line 1806 of yacc.c  */
#line 11467 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1713:

/* Line 1806 of yacc.c  */
#line 11476 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1714:

/* Line 1806 of yacc.c  */
#line 11477 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1716:

/* Line 1806 of yacc.c  */
#line 11482 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1717:

/* Line 1806 of yacc.c  */
#line 11484 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK;
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1719:

/* Line 1806 of yacc.c  */
#line 11499 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1720:

/* Line 1806 of yacc.c  */
#line 11504 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1721:

/* Line 1806 of yacc.c  */
#line 11506 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1722:

/* Line 1806 of yacc.c  */
#line 11508 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1723:

/* Line 1806 of yacc.c  */
#line 11510 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1724:

/* Line 1806 of yacc.c  */
#line 11512 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1725:

/* Line 1806 of yacc.c  */
#line 11514 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_RELAY_LOG; }
    break;

  case 1726:

/* Line 1806 of yacc.c  */
#line 11516 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1727:

/* Line 1806 of yacc.c  */
#line 11518 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1728:

/* Line 1806 of yacc.c  */
#line 11520 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1729:

/* Line 1806 of yacc.c  */
#line 11522 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1730:

/* Line 1806 of yacc.c  */
#line 11524 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1731:

/* Line 1806 of yacc.c  */
#line 11526 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { 
            Lex->type|= REFRESH_SLAVE;
            Lex->reset_slave_info.all= false;
          }
    break;

  case 1732:

/* Line 1806 of yacc.c  */
#line 11531 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { 
#ifdef HAVE_RESPONSE_TIME_DISTRIBUTION
            Lex->type|= REFRESH_QUERY_RESPONSE_TIME;
#endif // HAVE_RESPONSE_TIME_DISTRIBUTION
          }
    break;

  case 1733:

/* Line 1806 of yacc.c  */
#line 11537 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_CLIENT_STATS; }
    break;

  case 1734:

/* Line 1806 of yacc.c  */
#line 11539 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_STATS; }
    break;

  case 1735:

/* Line 1806 of yacc.c  */
#line 11541 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_THREAD_STATS; }
    break;

  case 1736:

/* Line 1806 of yacc.c  */
#line 11543 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_TABLE_STATS; }
    break;

  case 1737:

/* Line 1806 of yacc.c  */
#line 11545 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_INDEX_STATS; }
    break;

  case 1738:

/* Line 1806 of yacc.c  */
#line 11547 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1739:

/* Line 1806 of yacc.c  */
#line 11549 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1740:

/* Line 1806 of yacc.c  */
#line 11551 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1741:

/* Line 1806 of yacc.c  */
#line 11553 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_FLUSH_PAGE_BITMAPS; }
    break;

  case 1742:

/* Line 1806 of yacc.c  */
#line 11557 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1743:

/* Line 1806 of yacc.c  */
#line 11558 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1744:

/* Line 1806 of yacc.c  */
#line 11563 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1745:

/* Line 1806 of yacc.c  */
#line 11568 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1748:

/* Line 1806 of yacc.c  */
#line 11577 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1749:

/* Line 1806 of yacc.c  */
#line 11578 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { }
    break;

  case 1750:

/* Line 1806 of yacc.c  */
#line 11579 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1751:

/* Line 1806 of yacc.c  */
#line 11580 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1752:

/* Line 1806 of yacc.c  */
#line 11582 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type |= REFRESH_RESET_PAGE_BITMAPS; }
    break;

  case 1753:

/* Line 1806 of yacc.c  */
#line 11586 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1754:

/* Line 1806 of yacc.c  */
#line 11587 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1755:

/* Line 1806 of yacc.c  */
#line 11592 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1756:

/* Line 1806 of yacc.c  */
#line 11598 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1758:

/* Line 1806 of yacc.c  */
#line 11604 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front(new Item_uint((yyvsp[(3) - (3)].ulonglong_number)));
            lex->type= PURGE_BITMAPS_TO_LSN;
          }
    break;

  case 1759:

/* Line 1806 of yacc.c  */
#line 11614 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1760:

/* Line 1806 of yacc.c  */
#line 11618 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1761:

/* Line 1806 of yacc.c  */
#line 11630 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(3) - (3)].item));
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1762:

/* Line 1806 of yacc.c  */
#line 11639 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1763:

/* Line 1806 of yacc.c  */
#line 11640 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1764:

/* Line 1806 of yacc.c  */
#line 11641 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->type= ONLY_KILL_QUERY; }
    break;

  case 1765:

/* Line 1806 of yacc.c  */
#line 11648 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1766:

/* Line 1806 of yacc.c  */
#line 11659 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1767:

/* Line 1806 of yacc.c  */
#line 11671 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1768:

/* Line 1806 of yacc.c  */
#line 11681 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(12) - (12)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (12)].lock_type), MDL_SHARED_WRITE))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1769:

/* Line 1806 of yacc.c  */
#line 11691 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(14) - (14)].charset); }
    break;

  case 1770:

/* Line 1806 of yacc.c  */
#line 11695 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1771:

/* Line 1806 of yacc.c  */
#line 11699 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1772:

/* Line 1806 of yacc.c  */
#line 11700 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1773:

/* Line 1806 of yacc.c  */
#line 11704 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1774:

/* Line 1806 of yacc.c  */
#line 11705 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1775:

/* Line 1806 of yacc.c  */
#line 11709 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1776:

/* Line 1806 of yacc.c  */
#line 11711 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              Ignore this option in SP to avoid problem with query cache
            */
            if (Lex->sphead != 0)
              (yyval.lock_type)= TL_WRITE_DEFAULT;
            else
#endif
              (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
          }
    break;

  case 1777:

/* Line 1806 of yacc.c  */
#line 11722 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1778:

/* Line 1806 of yacc.c  */
#line 11726 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1779:

/* Line 1806 of yacc.c  */
#line 11727 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1780:

/* Line 1806 of yacc.c  */
#line 11728 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1785:

/* Line 1806 of yacc.c  */
#line 11743 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1786:

/* Line 1806 of yacc.c  */
#line 11748 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1787:

/* Line 1806 of yacc.c  */
#line 11755 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1788:

/* Line 1806 of yacc.c  */
#line 11760 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1793:

/* Line 1806 of yacc.c  */
#line 11778 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1794:

/* Line 1806 of yacc.c  */
#line 11783 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1795:

/* Line 1806 of yacc.c  */
#line 11790 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { }
    break;

  case 1796:

/* Line 1806 of yacc.c  */
#line 11792 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1798:

/* Line 1806 of yacc.c  */
#line 11797 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1799:

/* Line 1806 of yacc.c  */
#line 11804 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { }
    break;

  case 1800:

/* Line 1806 of yacc.c  */
#line 11806 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { }
    break;

  case 1801:

/* Line 1806 of yacc.c  */
#line 11810 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1802:

/* Line 1806 of yacc.c  */
#line 11811 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1803:

/* Line 1806 of yacc.c  */
#line 11812 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1804:

/* Line 1806 of yacc.c  */
#line 11817 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1805:

/* Line 1806 of yacc.c  */
#line 11819 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1806:

/* Line 1806 of yacc.c  */
#line 11823 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1807:

/* Line 1806 of yacc.c  */
#line 11825 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1808:

/* Line 1806 of yacc.c  */
#line 11833 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1809:

/* Line 1806 of yacc.c  */
#line 11834 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1812:

/* Line 1806 of yacc.c  */
#line 11844 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint length= (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string));
            String *val= new (YYTHD->mem_root) String((yyvsp[(3) - (5)].simple_string),
                                                      length,
                                                      YYTHD->charset());
            if (val == NULL)
              MYSQL_YYABORT;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) ||
                lex->value_list.push_back((yyvsp[(4) - (5)].item)) ||
                lex->load_set_str_list.push_back(val))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->set_name_no_truncate((yyvsp[(3) - (5)].simple_string), length, YYTHD->charset());
          }
    break;

  case 1813:

/* Line 1806 of yacc.c  */
#line 11864 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1814:

/* Line 1806 of yacc.c  */
#line 11888 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1815:

/* Line 1806 of yacc.c  */
#line 11900 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1816:

/* Line 1806 of yacc.c  */
#line 11911 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1817:

/* Line 1806 of yacc.c  */
#line 11930 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1818:

/* Line 1806 of yacc.c  */
#line 11938 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1819:

/* Line 1806 of yacc.c  */
#line 11950 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1820:

/* Line 1806 of yacc.c  */
#line 11965 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1821:

/* Line 1806 of yacc.c  */
#line 11985 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1822:

/* Line 1806 of yacc.c  */
#line 11986 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1823:

/* Line 1806 of yacc.c  */
#line 11988 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1824:

/* Line 1806 of yacc.c  */
#line 11995 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1825:

/* Line 1806 of yacc.c  */
#line 11996 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1826:

/* Line 1806 of yacc.c  */
#line 11998 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1827:

/* Line 1806 of yacc.c  */
#line 12005 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1828:

/* Line 1806 of yacc.c  */
#line 12011 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1829:

/* Line 1806 of yacc.c  */
#line 12017 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1830:

/* Line 1806 of yacc.c  */
#line 12023 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1831:

/* Line 1806 of yacc.c  */
#line 12029 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1832:

/* Line 1806 of yacc.c  */
#line 12058 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1833:

/* Line 1806 of yacc.c  */
#line 12085 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1834:

/* Line 1806 of yacc.c  */
#line 12086 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1835:

/* Line 1806 of yacc.c  */
#line 12087 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1836:

/* Line 1806 of yacc.c  */
#line 12092 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1837:

/* Line 1806 of yacc.c  */
#line 12102 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1838:

/* Line 1806 of yacc.c  */
#line 12112 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1839:

/* Line 1806 of yacc.c  */
#line 12118 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1840:

/* Line 1806 of yacc.c  */
#line 12127 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1841:

/* Line 1806 of yacc.c  */
#line 12141 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1842:

/* Line 1806 of yacc.c  */
#line 12142 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1843:

/* Line 1806 of yacc.c  */
#line 12147 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1844:

/* Line 1806 of yacc.c  */
#line 12156 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1845:

/* Line 1806 of yacc.c  */
#line 12171 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1846:

/* Line 1806 of yacc.c  */
#line 12176 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable_t *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1847:

/* Line 1806 of yacc.c  */
#line 12222 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1848:

/* Line 1806 of yacc.c  */
#line 12227 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1849:

/* Line 1806 of yacc.c  */
#line 12244 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1850:

/* Line 1806 of yacc.c  */
#line 12249 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1851:

/* Line 1806 of yacc.c  */
#line 12328 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1852:

/* Line 1806 of yacc.c  */
#line 12353 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1853:

/* Line 1806 of yacc.c  */
#line 12383 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1854:

/* Line 1806 of yacc.c  */
#line 12385 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1855:

/* Line 1806 of yacc.c  */
#line 12401 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1856:

/* Line 1806 of yacc.c  */
#line 12410 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1857:

/* Line 1806 of yacc.c  */
#line 12415 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1858:

/* Line 1806 of yacc.c  */
#line 12421 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1859:

/* Line 1806 of yacc.c  */
#line 12427 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1860:

/* Line 1806 of yacc.c  */
#line 12437 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1861:

/* Line 1806 of yacc.c  */
#line 12443 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1862:

/* Line 1806 of yacc.c  */
#line 12452 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1863:

/* Line 1806 of yacc.c  */
#line 12461 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1864:

/* Line 1806 of yacc.c  */
#line 12463 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1865:

/* Line 1806 of yacc.c  */
#line 12493 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1866:

/* Line 1806 of yacc.c  */
#line 12509 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1867:

/* Line 1806 of yacc.c  */
#line 12525 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1868:

/* Line 1806 of yacc.c  */
#line 12541 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1869:

/* Line 1806 of yacc.c  */
#line 12543 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1870:

/* Line 1806 of yacc.c  */
#line 12553 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1871:

/* Line 1806 of yacc.c  */
#line 12555 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1872:

/* Line 1806 of yacc.c  */
#line 12565 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1873:

/* Line 1806 of yacc.c  */
#line 12566 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1874:

/* Line 1806 of yacc.c  */
#line 12567 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1875:

/* Line 1806 of yacc.c  */
#line 12572 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1876:

/* Line 1806 of yacc.c  */
#line 12589 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
          }
    break;

  case 1877:

/* Line 1806 of yacc.c  */
#line 12611 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            bzero((yyval.lex_user), sizeof(LEX_USER));
          }
    break;

  case 1878:

/* Line 1806 of yacc.c  */
#line 12625 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1879:

/* Line 1806 of yacc.c  */
#line 12626 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1880:

/* Line 1806 of yacc.c  */
#line 12627 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1881:

/* Line 1806 of yacc.c  */
#line 12628 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1882:

/* Line 1806 of yacc.c  */
#line 12629 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1883:

/* Line 1806 of yacc.c  */
#line 12630 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1884:

/* Line 1806 of yacc.c  */
#line 12631 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1885:

/* Line 1806 of yacc.c  */
#line 12632 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1886:

/* Line 1806 of yacc.c  */
#line 12633 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1887:

/* Line 1806 of yacc.c  */
#line 12634 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1888:

/* Line 1806 of yacc.c  */
#line 12635 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1889:

/* Line 1806 of yacc.c  */
#line 12636 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1890:

/* Line 1806 of yacc.c  */
#line 12637 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1891:

/* Line 1806 of yacc.c  */
#line 12638 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1892:

/* Line 1806 of yacc.c  */
#line 12639 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1893:

/* Line 1806 of yacc.c  */
#line 12640 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1894:

/* Line 1806 of yacc.c  */
#line 12641 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1895:

/* Line 1806 of yacc.c  */
#line 12642 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1896:

/* Line 1806 of yacc.c  */
#line 12643 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1897:

/* Line 1806 of yacc.c  */
#line 12644 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1898:

/* Line 1806 of yacc.c  */
#line 12645 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1899:

/* Line 1806 of yacc.c  */
#line 12646 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1900:

/* Line 1806 of yacc.c  */
#line 12647 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1901:

/* Line 1806 of yacc.c  */
#line 12648 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1902:

/* Line 1806 of yacc.c  */
#line 12649 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1903:

/* Line 1806 of yacc.c  */
#line 12650 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1904:

/* Line 1806 of yacc.c  */
#line 12651 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1905:

/* Line 1806 of yacc.c  */
#line 12652 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1906:

/* Line 1806 of yacc.c  */
#line 12653 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1907:

/* Line 1806 of yacc.c  */
#line 12654 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1908:

/* Line 1806 of yacc.c  */
#line 12655 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1909:

/* Line 1806 of yacc.c  */
#line 12656 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1910:

/* Line 1806 of yacc.c  */
#line 12657 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1911:

/* Line 1806 of yacc.c  */
#line 12658 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1912:

/* Line 1806 of yacc.c  */
#line 12659 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1913:

/* Line 1806 of yacc.c  */
#line 12660 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1914:

/* Line 1806 of yacc.c  */
#line 12661 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1915:

/* Line 1806 of yacc.c  */
#line 12662 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1916:

/* Line 1806 of yacc.c  */
#line 12663 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1917:

/* Line 1806 of yacc.c  */
#line 12664 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1918:

/* Line 1806 of yacc.c  */
#line 12665 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1919:

/* Line 1806 of yacc.c  */
#line 12666 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1920:

/* Line 1806 of yacc.c  */
#line 12667 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1921:

/* Line 1806 of yacc.c  */
#line 12668 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1922:

/* Line 1806 of yacc.c  */
#line 12669 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1923:

/* Line 1806 of yacc.c  */
#line 12670 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1924:

/* Line 1806 of yacc.c  */
#line 12671 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1925:

/* Line 1806 of yacc.c  */
#line 12672 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1926:

/* Line 1806 of yacc.c  */
#line 12673 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1927:

/* Line 1806 of yacc.c  */
#line 12674 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1928:

/* Line 1806 of yacc.c  */
#line 12684 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1929:

/* Line 1806 of yacc.c  */
#line 12685 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1930:

/* Line 1806 of yacc.c  */
#line 12686 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1931:

/* Line 1806 of yacc.c  */
#line 12687 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1932:

/* Line 1806 of yacc.c  */
#line 12688 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1933:

/* Line 1806 of yacc.c  */
#line 12689 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1934:

/* Line 1806 of yacc.c  */
#line 12690 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1935:

/* Line 1806 of yacc.c  */
#line 12691 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1936:

/* Line 1806 of yacc.c  */
#line 12692 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1937:

/* Line 1806 of yacc.c  */
#line 12693 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1938:

/* Line 1806 of yacc.c  */
#line 12694 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1939:

/* Line 1806 of yacc.c  */
#line 12695 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1940:

/* Line 1806 of yacc.c  */
#line 12696 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1941:

/* Line 1806 of yacc.c  */
#line 12697 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1942:

/* Line 1806 of yacc.c  */
#line 12698 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1943:

/* Line 1806 of yacc.c  */
#line 12699 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1944:

/* Line 1806 of yacc.c  */
#line 12700 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1945:

/* Line 1806 of yacc.c  */
#line 12701 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1946:

/* Line 1806 of yacc.c  */
#line 12702 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1947:

/* Line 1806 of yacc.c  */
#line 12703 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1948:

/* Line 1806 of yacc.c  */
#line 12704 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1949:

/* Line 1806 of yacc.c  */
#line 12705 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1950:

/* Line 1806 of yacc.c  */
#line 12706 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1951:

/* Line 1806 of yacc.c  */
#line 12707 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1952:

/* Line 1806 of yacc.c  */
#line 12708 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1953:

/* Line 1806 of yacc.c  */
#line 12709 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1954:

/* Line 1806 of yacc.c  */
#line 12710 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1955:

/* Line 1806 of yacc.c  */
#line 12711 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1956:

/* Line 1806 of yacc.c  */
#line 12712 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1957:

/* Line 1806 of yacc.c  */
#line 12713 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1958:

/* Line 1806 of yacc.c  */
#line 12714 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1959:

/* Line 1806 of yacc.c  */
#line 12715 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1960:

/* Line 1806 of yacc.c  */
#line 12716 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1961:

/* Line 1806 of yacc.c  */
#line 12717 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1962:

/* Line 1806 of yacc.c  */
#line 12718 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1963:

/* Line 1806 of yacc.c  */
#line 12719 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1964:

/* Line 1806 of yacc.c  */
#line 12720 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1965:

/* Line 1806 of yacc.c  */
#line 12721 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1966:

/* Line 1806 of yacc.c  */
#line 12722 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1967:

/* Line 1806 of yacc.c  */
#line 12723 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1968:

/* Line 1806 of yacc.c  */
#line 12724 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1969:

/* Line 1806 of yacc.c  */
#line 12725 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1970:

/* Line 1806 of yacc.c  */
#line 12726 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1971:

/* Line 1806 of yacc.c  */
#line 12727 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1972:

/* Line 1806 of yacc.c  */
#line 12728 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1973:

/* Line 1806 of yacc.c  */
#line 12729 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1974:

/* Line 1806 of yacc.c  */
#line 12730 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1975:

/* Line 1806 of yacc.c  */
#line 12731 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1976:

/* Line 1806 of yacc.c  */
#line 12732 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1977:

/* Line 1806 of yacc.c  */
#line 12733 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1978:

/* Line 1806 of yacc.c  */
#line 12734 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1979:

/* Line 1806 of yacc.c  */
#line 12735 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1980:

/* Line 1806 of yacc.c  */
#line 12736 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1981:

/* Line 1806 of yacc.c  */
#line 12737 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1982:

/* Line 1806 of yacc.c  */
#line 12738 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1983:

/* Line 1806 of yacc.c  */
#line 12739 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1984:

/* Line 1806 of yacc.c  */
#line 12740 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1985:

/* Line 1806 of yacc.c  */
#line 12741 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1986:

/* Line 1806 of yacc.c  */
#line 12742 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1987:

/* Line 1806 of yacc.c  */
#line 12743 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1988:

/* Line 1806 of yacc.c  */
#line 12744 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1989:

/* Line 1806 of yacc.c  */
#line 12745 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1990:

/* Line 1806 of yacc.c  */
#line 12746 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1991:

/* Line 1806 of yacc.c  */
#line 12747 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1992:

/* Line 1806 of yacc.c  */
#line 12748 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1993:

/* Line 1806 of yacc.c  */
#line 12749 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1994:

/* Line 1806 of yacc.c  */
#line 12750 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1995:

/* Line 1806 of yacc.c  */
#line 12751 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1996:

/* Line 1806 of yacc.c  */
#line 12752 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1997:

/* Line 1806 of yacc.c  */
#line 12753 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1998:

/* Line 1806 of yacc.c  */
#line 12754 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 1999:

/* Line 1806 of yacc.c  */
#line 12755 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2000:

/* Line 1806 of yacc.c  */
#line 12756 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2001:

/* Line 1806 of yacc.c  */
#line 12757 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2002:

/* Line 1806 of yacc.c  */
#line 12758 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2003:

/* Line 1806 of yacc.c  */
#line 12759 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2004:

/* Line 1806 of yacc.c  */
#line 12760 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2005:

/* Line 1806 of yacc.c  */
#line 12761 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2006:

/* Line 1806 of yacc.c  */
#line 12762 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2007:

/* Line 1806 of yacc.c  */
#line 12763 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2008:

/* Line 1806 of yacc.c  */
#line 12764 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2009:

/* Line 1806 of yacc.c  */
#line 12765 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2010:

/* Line 1806 of yacc.c  */
#line 12766 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2011:

/* Line 1806 of yacc.c  */
#line 12767 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2012:

/* Line 1806 of yacc.c  */
#line 12768 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2013:

/* Line 1806 of yacc.c  */
#line 12769 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2014:

/* Line 1806 of yacc.c  */
#line 12770 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2015:

/* Line 1806 of yacc.c  */
#line 12771 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2016:

/* Line 1806 of yacc.c  */
#line 12772 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2017:

/* Line 1806 of yacc.c  */
#line 12773 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2018:

/* Line 1806 of yacc.c  */
#line 12774 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2019:

/* Line 1806 of yacc.c  */
#line 12775 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2020:

/* Line 1806 of yacc.c  */
#line 12776 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1806 of yacc.c  */
#line 12777 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2022:

/* Line 1806 of yacc.c  */
#line 12778 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2023:

/* Line 1806 of yacc.c  */
#line 12779 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2024:

/* Line 1806 of yacc.c  */
#line 12780 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2025:

/* Line 1806 of yacc.c  */
#line 12781 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2026:

/* Line 1806 of yacc.c  */
#line 12782 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2027:

/* Line 1806 of yacc.c  */
#line 12783 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2028:

/* Line 1806 of yacc.c  */
#line 12784 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2029:

/* Line 1806 of yacc.c  */
#line 12785 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2030:

/* Line 1806 of yacc.c  */
#line 12786 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2031:

/* Line 1806 of yacc.c  */
#line 12787 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2032:

/* Line 1806 of yacc.c  */
#line 12788 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2033:

/* Line 1806 of yacc.c  */
#line 12789 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2034:

/* Line 1806 of yacc.c  */
#line 12790 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2035:

/* Line 1806 of yacc.c  */
#line 12791 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2036:

/* Line 1806 of yacc.c  */
#line 12792 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2037:

/* Line 1806 of yacc.c  */
#line 12793 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2038:

/* Line 1806 of yacc.c  */
#line 12794 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2039:

/* Line 1806 of yacc.c  */
#line 12795 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2040:

/* Line 1806 of yacc.c  */
#line 12796 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2041:

/* Line 1806 of yacc.c  */
#line 12797 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2042:

/* Line 1806 of yacc.c  */
#line 12798 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2043:

/* Line 1806 of yacc.c  */
#line 12799 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2044:

/* Line 1806 of yacc.c  */
#line 12800 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2045:

/* Line 1806 of yacc.c  */
#line 12801 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2046:

/* Line 1806 of yacc.c  */
#line 12802 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2047:

/* Line 1806 of yacc.c  */
#line 12803 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2048:

/* Line 1806 of yacc.c  */
#line 12804 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2049:

/* Line 1806 of yacc.c  */
#line 12805 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2050:

/* Line 1806 of yacc.c  */
#line 12806 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2051:

/* Line 1806 of yacc.c  */
#line 12807 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2052:

/* Line 1806 of yacc.c  */
#line 12808 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2053:

/* Line 1806 of yacc.c  */
#line 12809 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2054:

/* Line 1806 of yacc.c  */
#line 12810 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2055:

/* Line 1806 of yacc.c  */
#line 12811 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2056:

/* Line 1806 of yacc.c  */
#line 12812 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2057:

/* Line 1806 of yacc.c  */
#line 12813 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2058:

/* Line 1806 of yacc.c  */
#line 12814 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2059:

/* Line 1806 of yacc.c  */
#line 12815 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2060:

/* Line 1806 of yacc.c  */
#line 12816 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2061:

/* Line 1806 of yacc.c  */
#line 12817 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2062:

/* Line 1806 of yacc.c  */
#line 12818 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2063:

/* Line 1806 of yacc.c  */
#line 12819 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2064:

/* Line 1806 of yacc.c  */
#line 12820 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2065:

/* Line 1806 of yacc.c  */
#line 12821 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2066:

/* Line 1806 of yacc.c  */
#line 12822 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2067:

/* Line 1806 of yacc.c  */
#line 12823 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2068:

/* Line 1806 of yacc.c  */
#line 12824 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2069:

/* Line 1806 of yacc.c  */
#line 12825 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2070:

/* Line 1806 of yacc.c  */
#line 12826 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2071:

/* Line 1806 of yacc.c  */
#line 12827 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2072:

/* Line 1806 of yacc.c  */
#line 12828 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1806 of yacc.c  */
#line 12829 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1806 of yacc.c  */
#line 12830 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2075:

/* Line 1806 of yacc.c  */
#line 12831 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1806 of yacc.c  */
#line 12832 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2077:

/* Line 1806 of yacc.c  */
#line 12833 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2078:

/* Line 1806 of yacc.c  */
#line 12834 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2079:

/* Line 1806 of yacc.c  */
#line 12835 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1806 of yacc.c  */
#line 12836 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2081:

/* Line 1806 of yacc.c  */
#line 12837 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2082:

/* Line 1806 of yacc.c  */
#line 12838 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1806 of yacc.c  */
#line 12839 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2084:

/* Line 1806 of yacc.c  */
#line 12840 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2085:

/* Line 1806 of yacc.c  */
#line 12841 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2086:

/* Line 1806 of yacc.c  */
#line 12842 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2087:

/* Line 1806 of yacc.c  */
#line 12843 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2088:

/* Line 1806 of yacc.c  */
#line 12844 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1806 of yacc.c  */
#line 12845 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2090:

/* Line 1806 of yacc.c  */
#line 12846 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2091:

/* Line 1806 of yacc.c  */
#line 12847 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2092:

/* Line 1806 of yacc.c  */
#line 12848 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2093:

/* Line 1806 of yacc.c  */
#line 12849 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2094:

/* Line 1806 of yacc.c  */
#line 12850 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2095:

/* Line 1806 of yacc.c  */
#line 12851 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2096:

/* Line 1806 of yacc.c  */
#line 12852 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2097:

/* Line 1806 of yacc.c  */
#line 12853 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2098:

/* Line 1806 of yacc.c  */
#line 12854 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2099:

/* Line 1806 of yacc.c  */
#line 12855 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2100:

/* Line 1806 of yacc.c  */
#line 12856 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2101:

/* Line 1806 of yacc.c  */
#line 12857 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2102:

/* Line 1806 of yacc.c  */
#line 12858 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2103:

/* Line 1806 of yacc.c  */
#line 12859 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2104:

/* Line 1806 of yacc.c  */
#line 12860 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2105:

/* Line 1806 of yacc.c  */
#line 12861 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2106:

/* Line 1806 of yacc.c  */
#line 12862 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2107:

/* Line 1806 of yacc.c  */
#line 12863 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2108:

/* Line 1806 of yacc.c  */
#line 12864 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2109:

/* Line 1806 of yacc.c  */
#line 12865 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2110:

/* Line 1806 of yacc.c  */
#line 12866 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2111:

/* Line 1806 of yacc.c  */
#line 12867 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2112:

/* Line 1806 of yacc.c  */
#line 12868 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2113:

/* Line 1806 of yacc.c  */
#line 12869 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1806 of yacc.c  */
#line 12870 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2115:

/* Line 1806 of yacc.c  */
#line 12871 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1806 of yacc.c  */
#line 12872 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1806 of yacc.c  */
#line 12873 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1806 of yacc.c  */
#line 12874 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1806 of yacc.c  */
#line 12875 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1806 of yacc.c  */
#line 12876 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1806 of yacc.c  */
#line 12877 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1806 of yacc.c  */
#line 12878 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1806 of yacc.c  */
#line 12879 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1806 of yacc.c  */
#line 12880 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1806 of yacc.c  */
#line 12881 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1806 of yacc.c  */
#line 12882 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1806 of yacc.c  */
#line 12883 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1806 of yacc.c  */
#line 12884 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1806 of yacc.c  */
#line 12885 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1806 of yacc.c  */
#line 12886 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1806 of yacc.c  */
#line 12887 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1806 of yacc.c  */
#line 12888 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1806 of yacc.c  */
#line 12889 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1806 of yacc.c  */
#line 12890 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1806 of yacc.c  */
#line 12891 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1806 of yacc.c  */
#line 12892 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1806 of yacc.c  */
#line 12893 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1806 of yacc.c  */
#line 12894 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1806 of yacc.c  */
#line 12895 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1806 of yacc.c  */
#line 12896 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1806 of yacc.c  */
#line 12897 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1806 of yacc.c  */
#line 12898 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1806 of yacc.c  */
#line 12899 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1806 of yacc.c  */
#line 12900 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1806 of yacc.c  */
#line 12901 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1806 of yacc.c  */
#line 12902 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1806 of yacc.c  */
#line 12903 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1806 of yacc.c  */
#line 12904 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1806 of yacc.c  */
#line 12905 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1806 of yacc.c  */
#line 12906 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2151:

/* Line 1806 of yacc.c  */
#line 12907 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1806 of yacc.c  */
#line 12908 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1806 of yacc.c  */
#line 12909 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1806 of yacc.c  */
#line 12910 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1806 of yacc.c  */
#line 12911 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1806 of yacc.c  */
#line 12912 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2157:

/* Line 1806 of yacc.c  */
#line 12913 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2158:

/* Line 1806 of yacc.c  */
#line 12914 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1806 of yacc.c  */
#line 12915 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2160:

/* Line 1806 of yacc.c  */
#line 12916 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1806 of yacc.c  */
#line 12917 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2162:

/* Line 1806 of yacc.c  */
#line 12918 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2163:

/* Line 1806 of yacc.c  */
#line 12919 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2164:

/* Line 1806 of yacc.c  */
#line 12920 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2165:

/* Line 1806 of yacc.c  */
#line 12921 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1806 of yacc.c  */
#line 12922 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2167:

/* Line 1806 of yacc.c  */
#line 12923 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2168:

/* Line 1806 of yacc.c  */
#line 12924 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2169:

/* Line 1806 of yacc.c  */
#line 12925 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2170:

/* Line 1806 of yacc.c  */
#line 12926 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2171:

/* Line 1806 of yacc.c  */
#line 12927 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1806 of yacc.c  */
#line 12928 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1806 of yacc.c  */
#line 12929 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2174:

/* Line 1806 of yacc.c  */
#line 12930 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2175:

/* Line 1806 of yacc.c  */
#line 12931 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2176:

/* Line 1806 of yacc.c  */
#line 12932 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1806 of yacc.c  */
#line 12933 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1806 of yacc.c  */
#line 12934 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1806 of yacc.c  */
#line 12935 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2180:

/* Line 1806 of yacc.c  */
#line 12936 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1806 of yacc.c  */
#line 12937 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2182:

/* Line 1806 of yacc.c  */
#line 12938 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1806 of yacc.c  */
#line 12939 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1806 of yacc.c  */
#line 12940 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1806 of yacc.c  */
#line 12941 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2186:

/* Line 1806 of yacc.c  */
#line 12942 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1806 of yacc.c  */
#line 12943 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2188:

/* Line 1806 of yacc.c  */
#line 12944 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2189:

/* Line 1806 of yacc.c  */
#line 12945 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2190:

/* Line 1806 of yacc.c  */
#line 12946 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1806 of yacc.c  */
#line 12947 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2192:

/* Line 1806 of yacc.c  */
#line 12948 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2193:

/* Line 1806 of yacc.c  */
#line 12949 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2194:

/* Line 1806 of yacc.c  */
#line 12950 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2195:

/* Line 1806 of yacc.c  */
#line 12951 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2196:

/* Line 1806 of yacc.c  */
#line 12952 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2197:

/* Line 1806 of yacc.c  */
#line 12953 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2198:

/* Line 1806 of yacc.c  */
#line 12954 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2199:

/* Line 1806 of yacc.c  */
#line 12955 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2200:

/* Line 1806 of yacc.c  */
#line 12956 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2201:

/* Line 1806 of yacc.c  */
#line 12957 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2202:

/* Line 1806 of yacc.c  */
#line 12958 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2203:

/* Line 1806 of yacc.c  */
#line 12959 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2204:

/* Line 1806 of yacc.c  */
#line 12960 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2205:

/* Line 1806 of yacc.c  */
#line 12961 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2206:

/* Line 1806 of yacc.c  */
#line 12962 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2207:

/* Line 1806 of yacc.c  */
#line 12963 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2208:

/* Line 1806 of yacc.c  */
#line 12964 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2209:

/* Line 1806 of yacc.c  */
#line 12965 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2210:

/* Line 1806 of yacc.c  */
#line 12966 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1806 of yacc.c  */
#line 12967 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2212:

/* Line 1806 of yacc.c  */
#line 12968 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2213:

/* Line 1806 of yacc.c  */
#line 12975 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
          }
    break;

  case 2214:

/* Line 1806 of yacc.c  */
#line 12985 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2215:

/* Line 1806 of yacc.c  */
#line 12989 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2216:

/* Line 1806 of yacc.c  */
#line 12990 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2219:

/* Line 1806 of yacc.c  */
#line 12999 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              /*
                If we are in SP we want have own LEX for each assignment.
                This is mostly because it is hard for several sp_instr_set
                and sp_instr_set_trigger instructions share one LEX.
                (Well, it is theoretically possible but adds some extra
                overhead on preparation for execution stage and IMO less
                robust).

                QQ: May be we should simply prohibit group assignments in SP?
              */
              lex->sphead->reset_lex(thd);
              lex= thd->lex;

              /* Set new LEX as if we at start of set rule. */
              lex->sql_command= SQLCOM_SET_OPTION;
              mysql_init_select(lex);
              lex->option_type=OPT_SESSION;
              lex->var_list.empty();
              lex->one_shot_set= 0;
              lex->autocommit= 0;
              lex->sphead->m_tmp_query= lip->get_tok_start();
            }
          }
    break;

  case 2220:

/* Line 1806 of yacc.c  */
#line 13030 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              sp_head *sp= lex->sphead;

              if (!lex->var_list.is_empty())
              {
                /*
                  We have assignment to user or system variable or
                  option setting, so we should construct sp_instr_stmt
                  for it.
                */
                LEX_STRING qbuff;
                sp_instr_stmt *i;

                if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                           lex)))
                  MYSQL_YYABORT;

                /*
                  Extract the query statement from the tokenizer.  The
                  end is either lip->ptr, if there was no lookahead,
                  lip->tok_end otherwise.
                */
                if (yychar == YYEMPTY)
                  qbuff.length= lip->get_ptr() - sp->m_tmp_query;
                else
                  qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

                if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                                    qbuff.length + 5)))
                  MYSQL_YYABORT;

                strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
                        qbuff.length);
                qbuff.length+= 4;
                i->m_query= qbuff;
                if (sp->add_instr(i))
                  MYSQL_YYABORT;
              }
              if (lex->sphead->restore_lex(thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2221:

/* Line 1806 of yacc.c  */
#line 13081 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2222:

/* Line 1806 of yacc.c  */
#line 13082 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2223:

/* Line 1806 of yacc.c  */
#line 13083 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2224:

/* Line 1806 of yacc.c  */
#line 13084 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2225:

/* Line 1806 of yacc.c  */
#line 13088 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= OPT_DEFAULT; }
    break;

  case 2226:

/* Line 1806 of yacc.c  */
#line 13089 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->one_shot_set= 1; (yyval.num)= OPT_SESSION; }
    break;

  case 2227:

/* Line 1806 of yacc.c  */
#line 13093 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2228:

/* Line 1806 of yacc.c  */
#line 13094 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2229:

/* Line 1806 of yacc.c  */
#line 13095 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2230:

/* Line 1806 of yacc.c  */
#line 13096 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2231:

/* Line 1806 of yacc.c  */
#line 13100 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2232:

/* Line 1806 of yacc.c  */
#line 13101 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2233:

/* Line 1806 of yacc.c  */
#line 13102 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2234:

/* Line 1806 of yacc.c  */
#line 13103 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2237:

/* Line 1806 of yacc.c  */
#line 13113 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            LEX_STRING *name= &(yyvsp[(2) - (4)].variable).base_name;

            if ((yyvsp[(2) - (4)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              if (set_trigger_new_row(YYTHD, name, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(2) - (4)].variable).var)
            {
              if ((yyvsp[(1) - (4)].var_type))
                lex->option_type= (yyvsp[(1) - (4)].var_type);

              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(2) - (4)].variable), lex->option_type, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable_t *spv= spc->find_variable(name);

              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2238:

/* Line 1806 of yacc.c  */
#line 13155 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            lex->option_type= (yyvsp[(1) - (5)].var_type);
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(5) - (5)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2239:

/* Line 1806 of yacc.c  */
#line 13174 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item), false);
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2240:

/* Line 1806 of yacc.c  */
#line 13185 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2241:

/* Line 1806 of yacc.c  */
#line 13198 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2242:

/* Line 1806 of yacc.c  */
#line 13212 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(&names))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2243:

/* Line 1806 of yacc.c  */
#line 13227 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2244:

/* Line 1806 of yacc.c  */
#line 13246 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(&pw))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2245:

/* Line 1806 of yacc.c  */
#line 13273 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2246:

/* Line 1806 of yacc.c  */
#line 13286 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable_t *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2247:

/* Line 1806 of yacc.c  */
#line 13313 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2248:

/* Line 1806 of yacc.c  */
#line 13356 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2249:

/* Line 1806 of yacc.c  */
#line 13369 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2250:

/* Line 1806 of yacc.c  */
#line 13370 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2251:

/* Line 1806 of yacc.c  */
#line 13371 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2252:

/* Line 1806 of yacc.c  */
#line 13372 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2253:

/* Line 1806 of yacc.c  */
#line 13376 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2254:

/* Line 1806 of yacc.c  */
#line 13378 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? YYTHD->variables.old_passwords ?
              Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              Item_func_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2255:

/* Line 1806 of yacc.c  */
#line 13387 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str,
                                                          (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2256:

/* Line 1806 of yacc.c  */
#line 13398 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2257:

/* Line 1806 of yacc.c  */
#line 13399 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2258:

/* Line 1806 of yacc.c  */
#line 13401 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2259:

/* Line 1806 of yacc.c  */
#line 13407 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2260:

/* Line 1806 of yacc.c  */
#line 13413 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2261:

/* Line 1806 of yacc.c  */
#line 13424 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2262:

/* Line 1806 of yacc.c  */
#line 13435 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2267:

/* Line 1806 of yacc.c  */
#line 13450 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2268:

/* Line 1806 of yacc.c  */
#line 13462 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2269:

/* Line 1806 of yacc.c  */
#line 13463 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2270:

/* Line 1806 of yacc.c  */
#line 13464 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2271:

/* Line 1806 of yacc.c  */
#line 13465 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2272:

/* Line 1806 of yacc.c  */
#line 13470 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2273:

/* Line 1806 of yacc.c  */
#line 13481 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2274:

/* Line 1806 of yacc.c  */
#line 13490 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2275:

/* Line 1806 of yacc.c  */
#line 13502 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2276:

/* Line 1806 of yacc.c  */
#line 13514 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2277:

/* Line 1806 of yacc.c  */
#line 13533 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2278:

/* Line 1806 of yacc.c  */
#line 13546 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2279:

/* Line 1806 of yacc.c  */
#line 13547 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2280:

/* Line 1806 of yacc.c  */
#line 13551 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2281:

/* Line 1806 of yacc.c  */
#line 13552 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2282:

/* Line 1806 of yacc.c  */
#line 13556 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2283:

/* Line 1806 of yacc.c  */
#line 13557 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2284:

/* Line 1806 of yacc.c  */
#line 13558 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2285:

/* Line 1806 of yacc.c  */
#line 13559 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2286:

/* Line 1806 of yacc.c  */
#line 13561 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2287:

/* Line 1806 of yacc.c  */
#line 13569 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2288:

/* Line 1806 of yacc.c  */
#line 13573 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2289:

/* Line 1806 of yacc.c  */
#line 13574 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2290:

/* Line 1806 of yacc.c  */
#line 13575 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2291:

/* Line 1806 of yacc.c  */
#line 13576 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2292:

/* Line 1806 of yacc.c  */
#line 13577 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2293:

/* Line 1806 of yacc.c  */
#line 13584 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2294:

/* Line 1806 of yacc.c  */
#line 13589 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2295:

/* Line 1806 of yacc.c  */
#line 13595 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2296:

/* Line 1806 of yacc.c  */
#line 13606 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2297:

/* Line 1806 of yacc.c  */
#line 13617 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2298:

/* Line 1806 of yacc.c  */
#line 13621 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2299:

/* Line 1806 of yacc.c  */
#line 13631 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2300:

/* Line 1806 of yacc.c  */
#line 13637 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2301:

/* Line 1806 of yacc.c  */
#line 13644 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2302:

/* Line 1806 of yacc.c  */
#line 13656 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2303:

/* Line 1806 of yacc.c  */
#line 13667 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2306:

/* Line 1806 of yacc.c  */
#line 13681 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2307:

/* Line 1806 of yacc.c  */
#line 13683 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2312:

/* Line 1806 of yacc.c  */
#line 13701 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2313:

/* Line 1806 of yacc.c  */
#line 13702 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2314:

/* Line 1806 of yacc.c  */
#line 13704 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2315:

/* Line 1806 of yacc.c  */
#line 13705 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2316:

/* Line 1806 of yacc.c  */
#line 13707 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2317:

/* Line 1806 of yacc.c  */
#line 13708 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2318:

/* Line 1806 of yacc.c  */
#line 13710 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2319:

/* Line 1806 of yacc.c  */
#line 13711 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2320:

/* Line 1806 of yacc.c  */
#line 13712 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2321:

/* Line 1806 of yacc.c  */
#line 13713 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2322:

/* Line 1806 of yacc.c  */
#line 13714 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2323:

/* Line 1806 of yacc.c  */
#line 13715 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2324:

/* Line 1806 of yacc.c  */
#line 13716 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2325:

/* Line 1806 of yacc.c  */
#line 13717 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2326:

/* Line 1806 of yacc.c  */
#line 13718 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2327:

/* Line 1806 of yacc.c  */
#line 13719 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2328:

/* Line 1806 of yacc.c  */
#line 13720 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2329:

/* Line 1806 of yacc.c  */
#line 13721 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2330:

/* Line 1806 of yacc.c  */
#line 13722 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2331:

/* Line 1806 of yacc.c  */
#line 13723 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2332:

/* Line 1806 of yacc.c  */
#line 13724 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2333:

/* Line 1806 of yacc.c  */
#line 13725 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2334:

/* Line 1806 of yacc.c  */
#line 13726 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2335:

/* Line 1806 of yacc.c  */
#line 13727 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2336:

/* Line 1806 of yacc.c  */
#line 13728 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2337:

/* Line 1806 of yacc.c  */
#line 13729 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2338:

/* Line 1806 of yacc.c  */
#line 13730 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2339:

/* Line 1806 of yacc.c  */
#line 13731 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2340:

/* Line 1806 of yacc.c  */
#line 13732 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2341:

/* Line 1806 of yacc.c  */
#line 13733 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2342:

/* Line 1806 of yacc.c  */
#line 13734 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2343:

/* Line 1806 of yacc.c  */
#line 13735 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2344:

/* Line 1806 of yacc.c  */
#line 13736 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2345:

/* Line 1806 of yacc.c  */
#line 13737 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2346:

/* Line 1806 of yacc.c  */
#line 13741 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2347:

/* Line 1806 of yacc.c  */
#line 13742 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2350:

/* Line 1806 of yacc.c  */
#line 13752 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2351:

/* Line 1806 of yacc.c  */
#line 13762 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2352:

/* Line 1806 of yacc.c  */
#line 13772 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2353:

/* Line 1806 of yacc.c  */
#line 13785 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2354:

/* Line 1806 of yacc.c  */
#line 13800 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2355:

/* Line 1806 of yacc.c  */
#line 13813 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2356:

/* Line 1806 of yacc.c  */
#line 13826 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2357:

/* Line 1806 of yacc.c  */
#line 13838 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2358:

/* Line 1806 of yacc.c  */
#line 13843 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2359:

/* Line 1806 of yacc.c  */
#line 13851 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2360:

/* Line 1806 of yacc.c  */
#line 13856 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2361:

/* Line 1806 of yacc.c  */
#line 13864 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (YYTHD->variables.old_passwords)
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2362:

/* Line 1806 of yacc.c  */
#line 13893 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { 
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
          }
    break;

  case 2363:

/* Line 1806 of yacc.c  */
#line 13900 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
          }
    break;

  case 2364:

/* Line 1806 of yacc.c  */
#line 13908 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 2365:

/* Line 1806 of yacc.c  */
#line 13916 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2366:

/* Line 1806 of yacc.c  */
#line 13921 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2370:

/* Line 1806 of yacc.c  */
#line 13935 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.ptr(), new_str->ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2372:

/* Line 1806 of yacc.c  */
#line 13964 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2373:

/* Line 1806 of yacc.c  */
#line 13968 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2374:

/* Line 1806 of yacc.c  */
#line 13972 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2375:

/* Line 1806 of yacc.c  */
#line 13976 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2376:

/* Line 1806 of yacc.c  */
#line 13982 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2378:

/* Line 1806 of yacc.c  */
#line 13987 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2379:

/* Line 1806 of yacc.c  */
#line 13988 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2380:

/* Line 1806 of yacc.c  */
#line 13992 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2381:

/* Line 1806 of yacc.c  */
#line 13993 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2382:

/* Line 1806 of yacc.c  */
#line 13997 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2383:

/* Line 1806 of yacc.c  */
#line 13999 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2384:

/* Line 1806 of yacc.c  */
#line 14005 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2385:

/* Line 1806 of yacc.c  */
#line 14011 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2386:

/* Line 1806 of yacc.c  */
#line 14017 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2387:

/* Line 1806 of yacc.c  */
#line 14026 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2388:

/* Line 1806 of yacc.c  */
#line 14031 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2389:

/* Line 1806 of yacc.c  */
#line 14035 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2390:

/* Line 1806 of yacc.c  */
#line 14036 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2391:

/* Line 1806 of yacc.c  */
#line 14041 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2392:

/* Line 1806 of yacc.c  */
#line 14042 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2393:

/* Line 1806 of yacc.c  */
#line 14043 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2394:

/* Line 1806 of yacc.c  */
#line 14048 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2395:

/* Line 1806 of yacc.c  */
#line 14049 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2396:

/* Line 1806 of yacc.c  */
#line 14050 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2397:

/* Line 1806 of yacc.c  */
#line 14054 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2398:

/* Line 1806 of yacc.c  */
#line 14055 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2399:

/* Line 1806 of yacc.c  */
#line 14060 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2400:

/* Line 1806 of yacc.c  */
#line 14072 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2401:

/* Line 1806 of yacc.c  */
#line 14082 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2402:

/* Line 1806 of yacc.c  */
#line 14091 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2403:

/* Line 1806 of yacc.c  */
#line 14100 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2404:

/* Line 1806 of yacc.c  */
#line 14113 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2406:

/* Line 1806 of yacc.c  */
#line 14119 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2407:

/* Line 1806 of yacc.c  */
#line 14124 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2408:

/* Line 1806 of yacc.c  */
#line 14134 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2409:

/* Line 1806 of yacc.c  */
#line 14135 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2410:

/* Line 1806 of yacc.c  */
#line 14136 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2411:

/* Line 1806 of yacc.c  */
#line 14140 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= false; }
    break;

  case 2412:

/* Line 1806 of yacc.c  */
#line 14141 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= true; }
    break;

  case 2413:

/* Line 1806 of yacc.c  */
#line 14145 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2414:

/* Line 1806 of yacc.c  */
#line 14161 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2417:

/* Line 1806 of yacc.c  */
#line 14174 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2418:

/* Line 1806 of yacc.c  */
#line 14175 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2419:

/* Line 1806 of yacc.c  */
#line 14176 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2420:

/* Line 1806 of yacc.c  */
#line 14181 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2421:

/* Line 1806 of yacc.c  */
#line 14185 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2423:

/* Line 1806 of yacc.c  */
#line 14194 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2424:

/* Line 1806 of yacc.c  */
#line 14200 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2425:

/* Line 1806 of yacc.c  */
#line 14209 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2426:

/* Line 1806 of yacc.c  */
#line 14215 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2427:

/* Line 1806 of yacc.c  */
#line 14236 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2432:

/* Line 1806 of yacc.c  */
#line 14264 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2433:

/* Line 1806 of yacc.c  */
#line 14266 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2434:

/* Line 1806 of yacc.c  */
#line 14273 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2435:

/* Line 1806 of yacc.c  */
#line 14274 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2436:

/* Line 1806 of yacc.c  */
#line 14275 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2437:

/* Line 1806 of yacc.c  */
#line 14277 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2438:

/* Line 1806 of yacc.c  */
#line 14283 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2439:

/* Line 1806 of yacc.c  */
#line 14288 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2440:

/* Line 1806 of yacc.c  */
#line 14299 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2441:

/* Line 1806 of yacc.c  */
#line 14301 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2442:

/* Line 1806 of yacc.c  */
#line 14303 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2456:

/* Line 1806 of yacc.c  */
#line 14336 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2457:

/* Line 1806 of yacc.c  */
#line 14350 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2458:

/* Line 1806 of yacc.c  */
#line 14363 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2459:

/* Line 1806 of yacc.c  */
#line 14365 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2460:

/* Line 1806 of yacc.c  */
#line 14367 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2461:

/* Line 1806 of yacc.c  */
#line 14372 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2462:

/* Line 1806 of yacc.c  */
#line 14377 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2463:

/* Line 1806 of yacc.c  */
#line 14379 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2464:

/* Line 1806 of yacc.c  */
#line 14381 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2465:

/* Line 1806 of yacc.c  */
#line 14386 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2466:

/* Line 1806 of yacc.c  */
#line 14388 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2467:

/* Line 1806 of yacc.c  */
#line 14390 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2468:

/* Line 1806 of yacc.c  */
#line 14395 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2470:

/* Line 1806 of yacc.c  */
#line 14412 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2472:

/* Line 1806 of yacc.c  */
#line 14418 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2473:

/* Line 1806 of yacc.c  */
#line 14423 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2474:

/* Line 1806 of yacc.c  */
#line 14430 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2475:

/* Line 1806 of yacc.c  */
#line 14439 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2478:

/* Line 1806 of yacc.c  */
#line 14461 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2479:

/* Line 1806 of yacc.c  */
#line 14463 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2480:

/* Line 1806 of yacc.c  */
#line 14465 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2481:

/* Line 1806 of yacc.c  */
#line 14467 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2482:

/* Line 1806 of yacc.c  */
#line 14484 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2483:

/* Line 1806 of yacc.c  */
#line 14490 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2484:

/* Line 1806 of yacc.c  */
#line 14495 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2485:

/* Line 1806 of yacc.c  */
#line 14525 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(YYTHD);
            sp->restore_thd_mem_root(YYTHD);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2486:

/* Line 1806 of yacc.c  */
#line 14559 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2487:

/* Line 1806 of yacc.c  */
#line 14577 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2488:

/* Line 1806 of yacc.c  */
#line 14600 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2489:

/* Line 1806 of yacc.c  */
#line 14632 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2490:

/* Line 1806 of yacc.c  */
#line 14636 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
          }
    break;

  case 2491:

/* Line 1806 of yacc.c  */
#line 14644 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(YYTHD, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2492:

/* Line 1806 of yacc.c  */
#line 14667 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2493:

/* Line 1806 of yacc.c  */
#line 14676 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  MYSQL_ERROR::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2494:

/* Line 1806 of yacc.c  */
#line 14732 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(YYTHD);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(YYTHD, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2495:

/* Line 1806 of yacc.c  */
#line 14756 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2496:

/* Line 1806 of yacc.c  */
#line 14765 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2497:

/* Line 1806 of yacc.c  */
#line 14773 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2498:

/* Line 1806 of yacc.c  */
#line 14781 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(YYTHD);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(YYTHD);
          }
    break;

  case 2499:

/* Line 1806 of yacc.c  */
#line 14795 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2500:

/* Line 1806 of yacc.c  */
#line 14799 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2501:

/* Line 1806 of yacc.c  */
#line 14803 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2502:

/* Line 1806 of yacc.c  */
#line 14807 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2503:

/* Line 1806 of yacc.c  */
#line 14811 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2504:

/* Line 1806 of yacc.c  */
#line 14815 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2505:

/* Line 1806 of yacc.c  */
#line 14822 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2506:

/* Line 1806 of yacc.c  */
#line 14829 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2507:

/* Line 1806 of yacc.c  */
#line 14836 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2508:

/* Line 1806 of yacc.c  */
#line 14845 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2509:

/* Line 1806 of yacc.c  */
#line 14846 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2510:

/* Line 1806 of yacc.c  */
#line 14850 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2511:

/* Line 1806 of yacc.c  */
#line 14851 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2512:

/* Line 1806 of yacc.c  */
#line 14852 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2513:

/* Line 1806 of yacc.c  */
#line 14856 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2514:

/* Line 1806 of yacc.c  */
#line 14857 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2515:

/* Line 1806 of yacc.c  */
#line 14862 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2516:

/* Line 1806 of yacc.c  */
#line 14864 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2518:

/* Line 1806 of yacc.c  */
#line 14869 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {}
    break;

  case 2519:

/* Line 1806 of yacc.c  */
#line 14870 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2520:

/* Line 1806 of yacc.c  */
#line 14875 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2521:

/* Line 1806 of yacc.c  */
#line 14885 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;



/* Line 1806 of yacc.c  */
#line 38806 "/home/jenkins/workspace/percona-xtradb-cluster-5.5-source-tarball/sql/sql_yacc.cc"
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YYTHD, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (YYTHD, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, YYTHD);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, YYTHD);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YYTHD, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, YYTHD);
    }
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, YYTHD);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



